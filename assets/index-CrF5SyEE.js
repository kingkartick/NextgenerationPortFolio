(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const d of document.querySelectorAll('link[rel="modulepreload"]'))l(d);new MutationObserver(d=>{for(const m of d)if(m.type==="childList")for(const v of m.addedNodes)v.tagName==="LINK"&&v.rel==="modulepreload"&&l(v)}).observe(document,{childList:!0,subtree:!0});function s(d){const m={};return d.integrity&&(m.integrity=d.integrity),d.referrerPolicy&&(m.referrerPolicy=d.referrerPolicy),d.crossOrigin==="use-credentials"?m.credentials="include":d.crossOrigin==="anonymous"?m.credentials="omit":m.credentials="same-origin",m}function l(d){if(d.ep)return;d.ep=!0;const m=s(d);fetch(d.href,m)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Tp="171",iT=0,W_=1,rT=2,K0=1,sT=2,Ls=3,Fs=0,vr=1,Fr=2,la=0,ac=1,X_=2,q_=3,Y_=4,aT=5,Qa=100,oT=101,cT=102,lT=103,hT=104,uT=200,dT=201,fT=202,pT=203,Bf=204,zf=205,mT=206,gT=207,_T=208,xT=209,vT=210,yT=211,MT=212,ST=213,ET=214,Vf=0,kf=1,Hf=2,lc=3,Gf=4,Wf=5,Xf=6,qf=7,J0=0,bT=1,TT=2,ha=0,AT=1,wT=2,CT=3,RT=4,PT=5,IT=6,LT=7,j0=300,hc=301,uc=302,Yf=303,Zf=304,Tu=306,$f=1e3,to=1001,Kf=1002,is=1003,DT=1004,Zh=1005,Or=1006,af=1007,no=1008,Os=1009,Q0=1010,ex=1011,fl=1012,Ap=1013,io=1014,Ds=1015,ml=1016,wp=1017,Cp=1018,dc=1020,tx=35902,nx=1021,ix=1022,ns=1023,rx=1024,sx=1025,oc=1026,fc=1027,ax=1028,Rp=1029,ox=1030,Pp=1031,Ip=1033,gu=33776,_u=33777,xu=33778,vu=33779,Jf=35840,jf=35841,Qf=35842,ep=35843,tp=36196,np=37492,ip=37496,rp=37808,sp=37809,ap=37810,op=37811,cp=37812,lp=37813,hp=37814,up=37815,dp=37816,fp=37817,pp=37818,mp=37819,gp=37820,_p=37821,yu=36492,xp=36494,vp=36495,cx=36283,yp=36284,Mp=36285,Sp=36286,UT=3200,NT=3201,FT=0,OT=1,oa="",Nr="srgb",pc="srgb-linear",Su="linear",ui="srgb",Wo=7680,Z_=519,BT=512,zT=513,VT=514,lx=515,kT=516,HT=517,GT=518,WT=519,$_=35044,K_="300 es",Us=2e3,Eu=2001;class _c{addEventListener(n,s){this._listeners===void 0&&(this._listeners={});const l=this._listeners;l[n]===void 0&&(l[n]=[]),l[n].indexOf(s)===-1&&l[n].push(s)}hasEventListener(n,s){if(this._listeners===void 0)return!1;const l=this._listeners;return l[n]!==void 0&&l[n].indexOf(s)!==-1}removeEventListener(n,s){if(this._listeners===void 0)return;const d=this._listeners[n];if(d!==void 0){const m=d.indexOf(s);m!==-1&&d.splice(m,1)}}dispatchEvent(n){if(this._listeners===void 0)return;const l=this._listeners[n.type];if(l!==void 0){n.target=this;const d=l.slice(0);for(let m=0,v=d.length;m<v;m++)d[m].call(this,n);n.target=null}}}const er=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],of=Math.PI/180,Ep=180/Math.PI;function gl(){const u=Math.random()*4294967295|0,n=Math.random()*4294967295|0,s=Math.random()*4294967295|0,l=Math.random()*4294967295|0;return(er[u&255]+er[u>>8&255]+er[u>>16&255]+er[u>>24&255]+"-"+er[n&255]+er[n>>8&255]+"-"+er[n>>16&15|64]+er[n>>24&255]+"-"+er[s&63|128]+er[s>>8&255]+"-"+er[s>>16&255]+er[s>>24&255]+er[l&255]+er[l>>8&255]+er[l>>16&255]+er[l>>24&255]).toLowerCase()}function Gn(u,n,s){return Math.max(n,Math.min(s,u))}function XT(u,n){return(u%n+n)%n}function cf(u,n,s){return(1-s)*u+s*n}function sl(u,n){switch(n.constructor){case Float32Array:return u;case Uint32Array:return u/4294967295;case Uint16Array:return u/65535;case Uint8Array:return u/255;case Int32Array:return Math.max(u/2147483647,-1);case Int16Array:return Math.max(u/32767,-1);case Int8Array:return Math.max(u/127,-1);default:throw new Error("Invalid component type.")}}function xr(u,n){switch(n.constructor){case Float32Array:return u;case Uint32Array:return Math.round(u*4294967295);case Uint16Array:return Math.round(u*65535);case Uint8Array:return Math.round(u*255);case Int32Array:return Math.round(u*2147483647);case Int16Array:return Math.round(u*32767);case Int8Array:return Math.round(u*127);default:throw new Error("Invalid component type.")}}class ii{constructor(n=0,s=0){ii.prototype.isVector2=!0,this.x=n,this.y=s}get width(){return this.x}set width(n){this.x=n}get height(){return this.y}set height(n){this.y=n}set(n,s){return this.x=n,this.y=s,this}setScalar(n){return this.x=n,this.y=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setComponent(n,s){switch(n){case 0:this.x=s;break;case 1:this.y=s;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y)}copy(n){return this.x=n.x,this.y=n.y,this}add(n){return this.x+=n.x,this.y+=n.y,this}addScalar(n){return this.x+=n,this.y+=n,this}addVectors(n,s){return this.x=n.x+s.x,this.y=n.y+s.y,this}addScaledVector(n,s){return this.x+=n.x*s,this.y+=n.y*s,this}sub(n){return this.x-=n.x,this.y-=n.y,this}subScalar(n){return this.x-=n,this.y-=n,this}subVectors(n,s){return this.x=n.x-s.x,this.y=n.y-s.y,this}multiply(n){return this.x*=n.x,this.y*=n.y,this}multiplyScalar(n){return this.x*=n,this.y*=n,this}divide(n){return this.x/=n.x,this.y/=n.y,this}divideScalar(n){return this.multiplyScalar(1/n)}applyMatrix3(n){const s=this.x,l=this.y,d=n.elements;return this.x=d[0]*s+d[3]*l+d[6],this.y=d[1]*s+d[4]*l+d[7],this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this}clamp(n,s){return this.x=Gn(this.x,n.x,s.x),this.y=Gn(this.y,n.y,s.y),this}clampScalar(n,s){return this.x=Gn(this.x,n,s),this.y=Gn(this.y,n,s),this}clampLength(n,s){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Gn(l,n,s))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(n){return this.x*n.x+this.y*n.y}cross(n){return this.x*n.y-this.y*n.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(n){const s=Math.sqrt(this.lengthSq()*n.lengthSq());if(s===0)return Math.PI/2;const l=this.dot(n)/s;return Math.acos(Gn(l,-1,1))}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const s=this.x-n.x,l=this.y-n.y;return s*s+l*l}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,s){return this.x+=(n.x-this.x)*s,this.y+=(n.y-this.y)*s,this}lerpVectors(n,s,l){return this.x=n.x+(s.x-n.x)*l,this.y=n.y+(s.y-n.y)*l,this}equals(n){return n.x===this.x&&n.y===this.y}fromArray(n,s=0){return this.x=n[s],this.y=n[s+1],this}toArray(n=[],s=0){return n[s]=this.x,n[s+1]=this.y,n}fromBufferAttribute(n,s){return this.x=n.getX(s),this.y=n.getY(s),this}rotateAround(n,s){const l=Math.cos(s),d=Math.sin(s),m=this.x-n.x,v=this.y-n.y;return this.x=m*l-v*d+n.x,this.y=m*d+v*l+n.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Un{constructor(n,s,l,d,m,v,M,T,A){Un.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],n!==void 0&&this.set(n,s,l,d,m,v,M,T,A)}set(n,s,l,d,m,v,M,T,A){const C=this.elements;return C[0]=n,C[1]=d,C[2]=M,C[3]=s,C[4]=m,C[5]=T,C[6]=l,C[7]=v,C[8]=A,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(n){const s=this.elements,l=n.elements;return s[0]=l[0],s[1]=l[1],s[2]=l[2],s[3]=l[3],s[4]=l[4],s[5]=l[5],s[6]=l[6],s[7]=l[7],s[8]=l[8],this}extractBasis(n,s,l){return n.setFromMatrix3Column(this,0),s.setFromMatrix3Column(this,1),l.setFromMatrix3Column(this,2),this}setFromMatrix4(n){const s=n.elements;return this.set(s[0],s[4],s[8],s[1],s[5],s[9],s[2],s[6],s[10]),this}multiply(n){return this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,s){const l=n.elements,d=s.elements,m=this.elements,v=l[0],M=l[3],T=l[6],A=l[1],C=l[4],P=l[7],I=l[2],F=l[5],W=l[8],Y=d[0],U=d[3],R=d[6],oe=d[1],se=d[4],ee=d[7],xe=d[2],de=d[5],le=d[8];return m[0]=v*Y+M*oe+T*xe,m[3]=v*U+M*se+T*de,m[6]=v*R+M*ee+T*le,m[1]=A*Y+C*oe+P*xe,m[4]=A*U+C*se+P*de,m[7]=A*R+C*ee+P*le,m[2]=I*Y+F*oe+W*xe,m[5]=I*U+F*se+W*de,m[8]=I*R+F*ee+W*le,this}multiplyScalar(n){const s=this.elements;return s[0]*=n,s[3]*=n,s[6]*=n,s[1]*=n,s[4]*=n,s[7]*=n,s[2]*=n,s[5]*=n,s[8]*=n,this}determinant(){const n=this.elements,s=n[0],l=n[1],d=n[2],m=n[3],v=n[4],M=n[5],T=n[6],A=n[7],C=n[8];return s*v*C-s*M*A-l*m*C+l*M*T+d*m*A-d*v*T}invert(){const n=this.elements,s=n[0],l=n[1],d=n[2],m=n[3],v=n[4],M=n[5],T=n[6],A=n[7],C=n[8],P=C*v-M*A,I=M*T-C*m,F=A*m-v*T,W=s*P+l*I+d*F;if(W===0)return this.set(0,0,0,0,0,0,0,0,0);const Y=1/W;return n[0]=P*Y,n[1]=(d*A-C*l)*Y,n[2]=(M*l-d*v)*Y,n[3]=I*Y,n[4]=(C*s-d*T)*Y,n[5]=(d*m-M*s)*Y,n[6]=F*Y,n[7]=(l*T-A*s)*Y,n[8]=(v*s-l*m)*Y,this}transpose(){let n;const s=this.elements;return n=s[1],s[1]=s[3],s[3]=n,n=s[2],s[2]=s[6],s[6]=n,n=s[5],s[5]=s[7],s[7]=n,this}getNormalMatrix(n){return this.setFromMatrix4(n).invert().transpose()}transposeIntoArray(n){const s=this.elements;return n[0]=s[0],n[1]=s[3],n[2]=s[6],n[3]=s[1],n[4]=s[4],n[5]=s[7],n[6]=s[2],n[7]=s[5],n[8]=s[8],this}setUvTransform(n,s,l,d,m,v,M){const T=Math.cos(m),A=Math.sin(m);return this.set(l*T,l*A,-l*(T*v+A*M)+v+n,-d*A,d*T,-d*(-A*v+T*M)+M+s,0,0,1),this}scale(n,s){return this.premultiply(lf.makeScale(n,s)),this}rotate(n){return this.premultiply(lf.makeRotation(-n)),this}translate(n,s){return this.premultiply(lf.makeTranslation(n,s)),this}makeTranslation(n,s){return n.isVector2?this.set(1,0,n.x,0,1,n.y,0,0,1):this.set(1,0,n,0,1,s,0,0,1),this}makeRotation(n){const s=Math.cos(n),l=Math.sin(n);return this.set(s,-l,0,l,s,0,0,0,1),this}makeScale(n,s){return this.set(n,0,0,0,s,0,0,0,1),this}equals(n){const s=this.elements,l=n.elements;for(let d=0;d<9;d++)if(s[d]!==l[d])return!1;return!0}fromArray(n,s=0){for(let l=0;l<9;l++)this.elements[l]=n[l+s];return this}toArray(n=[],s=0){const l=this.elements;return n[s]=l[0],n[s+1]=l[1],n[s+2]=l[2],n[s+3]=l[3],n[s+4]=l[4],n[s+5]=l[5],n[s+6]=l[6],n[s+7]=l[7],n[s+8]=l[8],n}clone(){return new this.constructor().fromArray(this.elements)}}const lf=new Un;function hx(u){for(let n=u.length-1;n>=0;--n)if(u[n]>=65535)return!0;return!1}function pl(u){return document.createElementNS("http://www.w3.org/1999/xhtml",u)}function qT(){const u=pl("canvas");return u.style.display="block",u}const J_={};function rc(u){u in J_||(J_[u]=!0,console.warn(u))}function YT(u,n,s){return new Promise(function(l,d){function m(){switch(u.clientWaitSync(n,u.SYNC_FLUSH_COMMANDS_BIT,0)){case u.WAIT_FAILED:d();break;case u.TIMEOUT_EXPIRED:setTimeout(m,s);break;default:l()}}setTimeout(m,s)})}function ZT(u){const n=u.elements;n[2]=.5*n[2]+.5*n[3],n[6]=.5*n[6]+.5*n[7],n[10]=.5*n[10]+.5*n[11],n[14]=.5*n[14]+.5*n[15]}function $T(u){const n=u.elements;n[11]===-1?(n[10]=-n[10]-1,n[14]=-n[14]):(n[10]=-n[10],n[14]=-n[14]+1)}const j_=new Un().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Q_=new Un().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function KT(){const u={enabled:!0,workingColorSpace:pc,spaces:{},convert:function(d,m,v){return this.enabled===!1||m===v||!m||!v||(this.spaces[m].transfer===ui&&(d.r=Ns(d.r),d.g=Ns(d.g),d.b=Ns(d.b)),this.spaces[m].primaries!==this.spaces[v].primaries&&(d.applyMatrix3(this.spaces[m].toXYZ),d.applyMatrix3(this.spaces[v].fromXYZ)),this.spaces[v].transfer===ui&&(d.r=cc(d.r),d.g=cc(d.g),d.b=cc(d.b))),d},fromWorkingColorSpace:function(d,m){return this.convert(d,this.workingColorSpace,m)},toWorkingColorSpace:function(d,m){return this.convert(d,m,this.workingColorSpace)},getPrimaries:function(d){return this.spaces[d].primaries},getTransfer:function(d){return d===oa?Su:this.spaces[d].transfer},getLuminanceCoefficients:function(d,m=this.workingColorSpace){return d.fromArray(this.spaces[m].luminanceCoefficients)},define:function(d){Object.assign(this.spaces,d)},_getMatrix:function(d,m,v){return d.copy(this.spaces[m].toXYZ).multiply(this.spaces[v].fromXYZ)},_getDrawingBufferColorSpace:function(d){return this.spaces[d].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(d=this.workingColorSpace){return this.spaces[d].workingColorSpaceConfig.unpackColorSpace}},n=[.64,.33,.3,.6,.15,.06],s=[.2126,.7152,.0722],l=[.3127,.329];return u.define({[pc]:{primaries:n,whitePoint:l,transfer:Su,toXYZ:j_,fromXYZ:Q_,luminanceCoefficients:s,workingColorSpaceConfig:{unpackColorSpace:Nr},outputColorSpaceConfig:{drawingBufferColorSpace:Nr}},[Nr]:{primaries:n,whitePoint:l,transfer:ui,toXYZ:j_,fromXYZ:Q_,luminanceCoefficients:s,outputColorSpaceConfig:{drawingBufferColorSpace:Nr}}}),u}const ni=KT();function Ns(u){return u<.04045?u*.0773993808:Math.pow(u*.9478672986+.0521327014,2.4)}function cc(u){return u<.0031308?u*12.92:1.055*Math.pow(u,.41666)-.055}let Xo;class JT{static getDataURL(n){if(/^data:/i.test(n.src)||typeof HTMLCanvasElement>"u")return n.src;let s;if(n instanceof HTMLCanvasElement)s=n;else{Xo===void 0&&(Xo=pl("canvas")),Xo.width=n.width,Xo.height=n.height;const l=Xo.getContext("2d");n instanceof ImageData?l.putImageData(n,0,0):l.drawImage(n,0,0,n.width,n.height),s=Xo}return s.width>2048||s.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",n),s.toDataURL("image/jpeg",.6)):s.toDataURL("image/png")}static sRGBToLinear(n){if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&n instanceof ImageBitmap){const s=pl("canvas");s.width=n.width,s.height=n.height;const l=s.getContext("2d");l.drawImage(n,0,0,n.width,n.height);const d=l.getImageData(0,0,n.width,n.height),m=d.data;for(let v=0;v<m.length;v++)m[v]=Ns(m[v]/255)*255;return l.putImageData(d,0,0),s}else if(n.data){const s=n.data.slice(0);for(let l=0;l<s.length;l++)s instanceof Uint8Array||s instanceof Uint8ClampedArray?s[l]=Math.floor(Ns(s[l]/255)*255):s[l]=Ns(s[l]);return{data:s,width:n.width,height:n.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),n}}let jT=0;class ux{constructor(n=null){this.isSource=!0,Object.defineProperty(this,"id",{value:jT++}),this.uuid=gl(),this.data=n,this.dataReady=!0,this.version=0}set needsUpdate(n){n===!0&&this.version++}toJSON(n){const s=n===void 0||typeof n=="string";if(!s&&n.images[this.uuid]!==void 0)return n.images[this.uuid];const l={uuid:this.uuid,url:""},d=this.data;if(d!==null){let m;if(Array.isArray(d)){m=[];for(let v=0,M=d.length;v<M;v++)d[v].isDataTexture?m.push(hf(d[v].image)):m.push(hf(d[v]))}else m=hf(d);l.url=m}return s||(n.images[this.uuid]=l),l}}function hf(u){return typeof HTMLImageElement<"u"&&u instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&u instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&u instanceof ImageBitmap?JT.getDataURL(u):u.data?{data:Array.from(u.data),width:u.width,height:u.height,type:u.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let QT=0;class ir extends _c{constructor(n=ir.DEFAULT_IMAGE,s=ir.DEFAULT_MAPPING,l=to,d=to,m=Or,v=no,M=ns,T=Os,A=ir.DEFAULT_ANISOTROPY,C=oa){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:QT++}),this.uuid=gl(),this.name="",this.source=new ux(n),this.mipmaps=[],this.mapping=s,this.channel=0,this.wrapS=l,this.wrapT=d,this.magFilter=m,this.minFilter=v,this.anisotropy=A,this.format=M,this.internalFormat=null,this.type=T,this.offset=new ii(0,0),this.repeat=new ii(1,1),this.center=new ii(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Un,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=C,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(n=null){this.source.data=n}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(n){return this.name=n.name,this.source=n.source,this.mipmaps=n.mipmaps.slice(0),this.mapping=n.mapping,this.channel=n.channel,this.wrapS=n.wrapS,this.wrapT=n.wrapT,this.magFilter=n.magFilter,this.minFilter=n.minFilter,this.anisotropy=n.anisotropy,this.format=n.format,this.internalFormat=n.internalFormat,this.type=n.type,this.offset.copy(n.offset),this.repeat.copy(n.repeat),this.center.copy(n.center),this.rotation=n.rotation,this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrix.copy(n.matrix),this.generateMipmaps=n.generateMipmaps,this.premultiplyAlpha=n.premultiplyAlpha,this.flipY=n.flipY,this.unpackAlignment=n.unpackAlignment,this.colorSpace=n.colorSpace,this.userData=JSON.parse(JSON.stringify(n.userData)),this.needsUpdate=!0,this}toJSON(n){const s=n===void 0||typeof n=="string";if(!s&&n.textures[this.uuid]!==void 0)return n.textures[this.uuid];const l={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(n).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(l.userData=this.userData),s||(n.textures[this.uuid]=l),l}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(n){if(this.mapping!==j0)return n;if(n.applyMatrix3(this.matrix),n.x<0||n.x>1)switch(this.wrapS){case $f:n.x=n.x-Math.floor(n.x);break;case to:n.x=n.x<0?0:1;break;case Kf:Math.abs(Math.floor(n.x)%2)===1?n.x=Math.ceil(n.x)-n.x:n.x=n.x-Math.floor(n.x);break}if(n.y<0||n.y>1)switch(this.wrapT){case $f:n.y=n.y-Math.floor(n.y);break;case to:n.y=n.y<0?0:1;break;case Kf:Math.abs(Math.floor(n.y)%2)===1?n.y=Math.ceil(n.y)-n.y:n.y=n.y-Math.floor(n.y);break}return this.flipY&&(n.y=1-n.y),n}set needsUpdate(n){n===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(n){n===!0&&this.pmremVersion++}}ir.DEFAULT_IMAGE=null;ir.DEFAULT_MAPPING=j0;ir.DEFAULT_ANISOTROPY=1;class di{constructor(n=0,s=0,l=0,d=1){di.prototype.isVector4=!0,this.x=n,this.y=s,this.z=l,this.w=d}get width(){return this.z}set width(n){this.z=n}get height(){return this.w}set height(n){this.w=n}set(n,s,l,d){return this.x=n,this.y=s,this.z=l,this.w=d,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this.w=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setW(n){return this.w=n,this}setComponent(n,s){switch(n){case 0:this.x=s;break;case 1:this.y=s;break;case 2:this.z=s;break;case 3:this.w=s;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this.w=n.w!==void 0?n.w:1,this}add(n){return this.x+=n.x,this.y+=n.y,this.z+=n.z,this.w+=n.w,this}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this.w+=n,this}addVectors(n,s){return this.x=n.x+s.x,this.y=n.y+s.y,this.z=n.z+s.z,this.w=n.w+s.w,this}addScaledVector(n,s){return this.x+=n.x*s,this.y+=n.y*s,this.z+=n.z*s,this.w+=n.w*s,this}sub(n){return this.x-=n.x,this.y-=n.y,this.z-=n.z,this.w-=n.w,this}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this.w-=n,this}subVectors(n,s){return this.x=n.x-s.x,this.y=n.y-s.y,this.z=n.z-s.z,this.w=n.w-s.w,this}multiply(n){return this.x*=n.x,this.y*=n.y,this.z*=n.z,this.w*=n.w,this}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this.w*=n,this}applyMatrix4(n){const s=this.x,l=this.y,d=this.z,m=this.w,v=n.elements;return this.x=v[0]*s+v[4]*l+v[8]*d+v[12]*m,this.y=v[1]*s+v[5]*l+v[9]*d+v[13]*m,this.z=v[2]*s+v[6]*l+v[10]*d+v[14]*m,this.w=v[3]*s+v[7]*l+v[11]*d+v[15]*m,this}divide(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this.w/=n.w,this}divideScalar(n){return this.multiplyScalar(1/n)}setAxisAngleFromQuaternion(n){this.w=2*Math.acos(n.w);const s=Math.sqrt(1-n.w*n.w);return s<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=n.x/s,this.y=n.y/s,this.z=n.z/s),this}setAxisAngleFromRotationMatrix(n){let s,l,d,m;const T=n.elements,A=T[0],C=T[4],P=T[8],I=T[1],F=T[5],W=T[9],Y=T[2],U=T[6],R=T[10];if(Math.abs(C-I)<.01&&Math.abs(P-Y)<.01&&Math.abs(W-U)<.01){if(Math.abs(C+I)<.1&&Math.abs(P+Y)<.1&&Math.abs(W+U)<.1&&Math.abs(A+F+R-3)<.1)return this.set(1,0,0,0),this;s=Math.PI;const se=(A+1)/2,ee=(F+1)/2,xe=(R+1)/2,de=(C+I)/4,le=(P+Y)/4,ve=(W+U)/4;return se>ee&&se>xe?se<.01?(l=0,d=.707106781,m=.707106781):(l=Math.sqrt(se),d=de/l,m=le/l):ee>xe?ee<.01?(l=.707106781,d=0,m=.707106781):(d=Math.sqrt(ee),l=de/d,m=ve/d):xe<.01?(l=.707106781,d=.707106781,m=0):(m=Math.sqrt(xe),l=le/m,d=ve/m),this.set(l,d,m,s),this}let oe=Math.sqrt((U-W)*(U-W)+(P-Y)*(P-Y)+(I-C)*(I-C));return Math.abs(oe)<.001&&(oe=1),this.x=(U-W)/oe,this.y=(P-Y)/oe,this.z=(I-C)/oe,this.w=Math.acos((A+F+R-1)/2),this}setFromMatrixPosition(n){const s=n.elements;return this.x=s[12],this.y=s[13],this.z=s[14],this.w=s[15],this}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this.w=Math.min(this.w,n.w),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this.w=Math.max(this.w,n.w),this}clamp(n,s){return this.x=Gn(this.x,n.x,s.x),this.y=Gn(this.y,n.y,s.y),this.z=Gn(this.z,n.z,s.z),this.w=Gn(this.w,n.w,s.w),this}clampScalar(n,s){return this.x=Gn(this.x,n,s),this.y=Gn(this.y,n,s),this.z=Gn(this.z,n,s),this.w=Gn(this.w,n,s),this}clampLength(n,s){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Gn(l,n,s))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z+this.w*n.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,s){return this.x+=(n.x-this.x)*s,this.y+=(n.y-this.y)*s,this.z+=(n.z-this.z)*s,this.w+=(n.w-this.w)*s,this}lerpVectors(n,s,l){return this.x=n.x+(s.x-n.x)*l,this.y=n.y+(s.y-n.y)*l,this.z=n.z+(s.z-n.z)*l,this.w=n.w+(s.w-n.w)*l,this}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z&&n.w===this.w}fromArray(n,s=0){return this.x=n[s],this.y=n[s+1],this.z=n[s+2],this.w=n[s+3],this}toArray(n=[],s=0){return n[s]=this.x,n[s+1]=this.y,n[s+2]=this.z,n[s+3]=this.w,n}fromBufferAttribute(n,s){return this.x=n.getX(s),this.y=n.getY(s),this.z=n.getZ(s),this.w=n.getW(s),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class eA extends _c{constructor(n=1,s=1,l={}){super(),this.isRenderTarget=!0,this.width=n,this.height=s,this.depth=1,this.scissor=new di(0,0,n,s),this.scissorTest=!1,this.viewport=new di(0,0,n,s);const d={width:n,height:s,depth:1};l=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Or,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},l);const m=new ir(d,l.mapping,l.wrapS,l.wrapT,l.magFilter,l.minFilter,l.format,l.type,l.anisotropy,l.colorSpace);m.flipY=!1,m.generateMipmaps=l.generateMipmaps,m.internalFormat=l.internalFormat,this.textures=[];const v=l.count;for(let M=0;M<v;M++)this.textures[M]=m.clone(),this.textures[M].isRenderTargetTexture=!0;this.depthBuffer=l.depthBuffer,this.stencilBuffer=l.stencilBuffer,this.resolveDepthBuffer=l.resolveDepthBuffer,this.resolveStencilBuffer=l.resolveStencilBuffer,this.depthTexture=l.depthTexture,this.samples=l.samples}get texture(){return this.textures[0]}set texture(n){this.textures[0]=n}setSize(n,s,l=1){if(this.width!==n||this.height!==s||this.depth!==l){this.width=n,this.height=s,this.depth=l;for(let d=0,m=this.textures.length;d<m;d++)this.textures[d].image.width=n,this.textures[d].image.height=s,this.textures[d].image.depth=l;this.dispose()}this.viewport.set(0,0,n,s),this.scissor.set(0,0,n,s)}clone(){return new this.constructor().copy(this)}copy(n){this.width=n.width,this.height=n.height,this.depth=n.depth,this.scissor.copy(n.scissor),this.scissorTest=n.scissorTest,this.viewport.copy(n.viewport),this.textures.length=0;for(let l=0,d=n.textures.length;l<d;l++)this.textures[l]=n.textures[l].clone(),this.textures[l].isRenderTargetTexture=!0;const s=Object.assign({},n.texture.image);return this.texture.source=new ux(s),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,n.depthTexture!==null&&(this.depthTexture=n.depthTexture.clone()),this.samples=n.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class ro extends eA{constructor(n=1,s=1,l={}){super(n,s,l),this.isWebGLRenderTarget=!0}}class dx extends ir{constructor(n=null,s=1,l=1,d=1){super(null),this.isDataArrayTexture=!0,this.image={data:n,width:s,height:l,depth:d},this.magFilter=is,this.minFilter=is,this.wrapR=to,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(n){this.layerUpdates.add(n)}clearLayerUpdates(){this.layerUpdates.clear()}}class tA extends ir{constructor(n=null,s=1,l=1,d=1){super(null),this.isData3DTexture=!0,this.image={data:n,width:s,height:l,depth:d},this.magFilter=is,this.minFilter=is,this.wrapR=to,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class _l{constructor(n=0,s=0,l=0,d=1){this.isQuaternion=!0,this._x=n,this._y=s,this._z=l,this._w=d}static slerpFlat(n,s,l,d,m,v,M){let T=l[d+0],A=l[d+1],C=l[d+2],P=l[d+3];const I=m[v+0],F=m[v+1],W=m[v+2],Y=m[v+3];if(M===0){n[s+0]=T,n[s+1]=A,n[s+2]=C,n[s+3]=P;return}if(M===1){n[s+0]=I,n[s+1]=F,n[s+2]=W,n[s+3]=Y;return}if(P!==Y||T!==I||A!==F||C!==W){let U=1-M;const R=T*I+A*F+C*W+P*Y,oe=R>=0?1:-1,se=1-R*R;if(se>Number.EPSILON){const xe=Math.sqrt(se),de=Math.atan2(xe,R*oe);U=Math.sin(U*de)/xe,M=Math.sin(M*de)/xe}const ee=M*oe;if(T=T*U+I*ee,A=A*U+F*ee,C=C*U+W*ee,P=P*U+Y*ee,U===1-M){const xe=1/Math.sqrt(T*T+A*A+C*C+P*P);T*=xe,A*=xe,C*=xe,P*=xe}}n[s]=T,n[s+1]=A,n[s+2]=C,n[s+3]=P}static multiplyQuaternionsFlat(n,s,l,d,m,v){const M=l[d],T=l[d+1],A=l[d+2],C=l[d+3],P=m[v],I=m[v+1],F=m[v+2],W=m[v+3];return n[s]=M*W+C*P+T*F-A*I,n[s+1]=T*W+C*I+A*P-M*F,n[s+2]=A*W+C*F+M*I-T*P,n[s+3]=C*W-M*P-T*I-A*F,n}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get w(){return this._w}set w(n){this._w=n,this._onChangeCallback()}set(n,s,l,d){return this._x=n,this._y=s,this._z=l,this._w=d,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(n){return this._x=n.x,this._y=n.y,this._z=n.z,this._w=n.w,this._onChangeCallback(),this}setFromEuler(n,s=!0){const l=n._x,d=n._y,m=n._z,v=n._order,M=Math.cos,T=Math.sin,A=M(l/2),C=M(d/2),P=M(m/2),I=T(l/2),F=T(d/2),W=T(m/2);switch(v){case"XYZ":this._x=I*C*P+A*F*W,this._y=A*F*P-I*C*W,this._z=A*C*W+I*F*P,this._w=A*C*P-I*F*W;break;case"YXZ":this._x=I*C*P+A*F*W,this._y=A*F*P-I*C*W,this._z=A*C*W-I*F*P,this._w=A*C*P+I*F*W;break;case"ZXY":this._x=I*C*P-A*F*W,this._y=A*F*P+I*C*W,this._z=A*C*W+I*F*P,this._w=A*C*P-I*F*W;break;case"ZYX":this._x=I*C*P-A*F*W,this._y=A*F*P+I*C*W,this._z=A*C*W-I*F*P,this._w=A*C*P+I*F*W;break;case"YZX":this._x=I*C*P+A*F*W,this._y=A*F*P+I*C*W,this._z=A*C*W-I*F*P,this._w=A*C*P-I*F*W;break;case"XZY":this._x=I*C*P-A*F*W,this._y=A*F*P-I*C*W,this._z=A*C*W+I*F*P,this._w=A*C*P+I*F*W;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+v)}return s===!0&&this._onChangeCallback(),this}setFromAxisAngle(n,s){const l=s/2,d=Math.sin(l);return this._x=n.x*d,this._y=n.y*d,this._z=n.z*d,this._w=Math.cos(l),this._onChangeCallback(),this}setFromRotationMatrix(n){const s=n.elements,l=s[0],d=s[4],m=s[8],v=s[1],M=s[5],T=s[9],A=s[2],C=s[6],P=s[10],I=l+M+P;if(I>0){const F=.5/Math.sqrt(I+1);this._w=.25/F,this._x=(C-T)*F,this._y=(m-A)*F,this._z=(v-d)*F}else if(l>M&&l>P){const F=2*Math.sqrt(1+l-M-P);this._w=(C-T)/F,this._x=.25*F,this._y=(d+v)/F,this._z=(m+A)/F}else if(M>P){const F=2*Math.sqrt(1+M-l-P);this._w=(m-A)/F,this._x=(d+v)/F,this._y=.25*F,this._z=(T+C)/F}else{const F=2*Math.sqrt(1+P-l-M);this._w=(v-d)/F,this._x=(m+A)/F,this._y=(T+C)/F,this._z=.25*F}return this._onChangeCallback(),this}setFromUnitVectors(n,s){let l=n.dot(s)+1;return l<Number.EPSILON?(l=0,Math.abs(n.x)>Math.abs(n.z)?(this._x=-n.y,this._y=n.x,this._z=0,this._w=l):(this._x=0,this._y=-n.z,this._z=n.y,this._w=l)):(this._x=n.y*s.z-n.z*s.y,this._y=n.z*s.x-n.x*s.z,this._z=n.x*s.y-n.y*s.x,this._w=l),this.normalize()}angleTo(n){return 2*Math.acos(Math.abs(Gn(this.dot(n),-1,1)))}rotateTowards(n,s){const l=this.angleTo(n);if(l===0)return this;const d=Math.min(1,s/l);return this.slerp(n,d),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(n){return this._x*n._x+this._y*n._y+this._z*n._z+this._w*n._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let n=this.length();return n===0?(this._x=0,this._y=0,this._z=0,this._w=1):(n=1/n,this._x=this._x*n,this._y=this._y*n,this._z=this._z*n,this._w=this._w*n),this._onChangeCallback(),this}multiply(n){return this.multiplyQuaternions(this,n)}premultiply(n){return this.multiplyQuaternions(n,this)}multiplyQuaternions(n,s){const l=n._x,d=n._y,m=n._z,v=n._w,M=s._x,T=s._y,A=s._z,C=s._w;return this._x=l*C+v*M+d*A-m*T,this._y=d*C+v*T+m*M-l*A,this._z=m*C+v*A+l*T-d*M,this._w=v*C-l*M-d*T-m*A,this._onChangeCallback(),this}slerp(n,s){if(s===0)return this;if(s===1)return this.copy(n);const l=this._x,d=this._y,m=this._z,v=this._w;let M=v*n._w+l*n._x+d*n._y+m*n._z;if(M<0?(this._w=-n._w,this._x=-n._x,this._y=-n._y,this._z=-n._z,M=-M):this.copy(n),M>=1)return this._w=v,this._x=l,this._y=d,this._z=m,this;const T=1-M*M;if(T<=Number.EPSILON){const F=1-s;return this._w=F*v+s*this._w,this._x=F*l+s*this._x,this._y=F*d+s*this._y,this._z=F*m+s*this._z,this.normalize(),this}const A=Math.sqrt(T),C=Math.atan2(A,M),P=Math.sin((1-s)*C)/A,I=Math.sin(s*C)/A;return this._w=v*P+this._w*I,this._x=l*P+this._x*I,this._y=d*P+this._y*I,this._z=m*P+this._z*I,this._onChangeCallback(),this}slerpQuaternions(n,s,l){return this.copy(n).slerp(s,l)}random(){const n=2*Math.PI*Math.random(),s=2*Math.PI*Math.random(),l=Math.random(),d=Math.sqrt(1-l),m=Math.sqrt(l);return this.set(d*Math.sin(n),d*Math.cos(n),m*Math.sin(s),m*Math.cos(s))}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._w===this._w}fromArray(n,s=0){return this._x=n[s],this._y=n[s+1],this._z=n[s+2],this._w=n[s+3],this._onChangeCallback(),this}toArray(n=[],s=0){return n[s]=this._x,n[s+1]=this._y,n[s+2]=this._z,n[s+3]=this._w,n}fromBufferAttribute(n,s){return this._x=n.getX(s),this._y=n.getY(s),this._z=n.getZ(s),this._w=n.getW(s),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Se{constructor(n=0,s=0,l=0){Se.prototype.isVector3=!0,this.x=n,this.y=s,this.z=l}set(n,s,l){return l===void 0&&(l=this.z),this.x=n,this.y=s,this.z=l,this}setScalar(n){return this.x=n,this.y=n,this.z=n,this}setX(n){return this.x=n,this}setY(n){return this.y=n,this}setZ(n){return this.z=n,this}setComponent(n,s){switch(n){case 0:this.x=s;break;case 1:this.y=s;break;case 2:this.z=s;break;default:throw new Error("index is out of range: "+n)}return this}getComponent(n){switch(n){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+n)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(n){return this.x=n.x,this.y=n.y,this.z=n.z,this}add(n){return this.x+=n.x,this.y+=n.y,this.z+=n.z,this}addScalar(n){return this.x+=n,this.y+=n,this.z+=n,this}addVectors(n,s){return this.x=n.x+s.x,this.y=n.y+s.y,this.z=n.z+s.z,this}addScaledVector(n,s){return this.x+=n.x*s,this.y+=n.y*s,this.z+=n.z*s,this}sub(n){return this.x-=n.x,this.y-=n.y,this.z-=n.z,this}subScalar(n){return this.x-=n,this.y-=n,this.z-=n,this}subVectors(n,s){return this.x=n.x-s.x,this.y=n.y-s.y,this.z=n.z-s.z,this}multiply(n){return this.x*=n.x,this.y*=n.y,this.z*=n.z,this}multiplyScalar(n){return this.x*=n,this.y*=n,this.z*=n,this}multiplyVectors(n,s){return this.x=n.x*s.x,this.y=n.y*s.y,this.z=n.z*s.z,this}applyEuler(n){return this.applyQuaternion(e0.setFromEuler(n))}applyAxisAngle(n,s){return this.applyQuaternion(e0.setFromAxisAngle(n,s))}applyMatrix3(n){const s=this.x,l=this.y,d=this.z,m=n.elements;return this.x=m[0]*s+m[3]*l+m[6]*d,this.y=m[1]*s+m[4]*l+m[7]*d,this.z=m[2]*s+m[5]*l+m[8]*d,this}applyNormalMatrix(n){return this.applyMatrix3(n).normalize()}applyMatrix4(n){const s=this.x,l=this.y,d=this.z,m=n.elements,v=1/(m[3]*s+m[7]*l+m[11]*d+m[15]);return this.x=(m[0]*s+m[4]*l+m[8]*d+m[12])*v,this.y=(m[1]*s+m[5]*l+m[9]*d+m[13])*v,this.z=(m[2]*s+m[6]*l+m[10]*d+m[14])*v,this}applyQuaternion(n){const s=this.x,l=this.y,d=this.z,m=n.x,v=n.y,M=n.z,T=n.w,A=2*(v*d-M*l),C=2*(M*s-m*d),P=2*(m*l-v*s);return this.x=s+T*A+v*P-M*C,this.y=l+T*C+M*A-m*P,this.z=d+T*P+m*C-v*A,this}project(n){return this.applyMatrix4(n.matrixWorldInverse).applyMatrix4(n.projectionMatrix)}unproject(n){return this.applyMatrix4(n.projectionMatrixInverse).applyMatrix4(n.matrixWorld)}transformDirection(n){const s=this.x,l=this.y,d=this.z,m=n.elements;return this.x=m[0]*s+m[4]*l+m[8]*d,this.y=m[1]*s+m[5]*l+m[9]*d,this.z=m[2]*s+m[6]*l+m[10]*d,this.normalize()}divide(n){return this.x/=n.x,this.y/=n.y,this.z/=n.z,this}divideScalar(n){return this.multiplyScalar(1/n)}min(n){return this.x=Math.min(this.x,n.x),this.y=Math.min(this.y,n.y),this.z=Math.min(this.z,n.z),this}max(n){return this.x=Math.max(this.x,n.x),this.y=Math.max(this.y,n.y),this.z=Math.max(this.z,n.z),this}clamp(n,s){return this.x=Gn(this.x,n.x,s.x),this.y=Gn(this.y,n.y,s.y),this.z=Gn(this.z,n.z,s.z),this}clampScalar(n,s){return this.x=Gn(this.x,n,s),this.y=Gn(this.y,n,s),this.z=Gn(this.z,n,s),this}clampLength(n,s){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Gn(l,n,s))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(n){return this.x*n.x+this.y*n.y+this.z*n.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(n){return this.normalize().multiplyScalar(n)}lerp(n,s){return this.x+=(n.x-this.x)*s,this.y+=(n.y-this.y)*s,this.z+=(n.z-this.z)*s,this}lerpVectors(n,s,l){return this.x=n.x+(s.x-n.x)*l,this.y=n.y+(s.y-n.y)*l,this.z=n.z+(s.z-n.z)*l,this}cross(n){return this.crossVectors(this,n)}crossVectors(n,s){const l=n.x,d=n.y,m=n.z,v=s.x,M=s.y,T=s.z;return this.x=d*T-m*M,this.y=m*v-l*T,this.z=l*M-d*v,this}projectOnVector(n){const s=n.lengthSq();if(s===0)return this.set(0,0,0);const l=n.dot(this)/s;return this.copy(n).multiplyScalar(l)}projectOnPlane(n){return uf.copy(this).projectOnVector(n),this.sub(uf)}reflect(n){return this.sub(uf.copy(n).multiplyScalar(2*this.dot(n)))}angleTo(n){const s=Math.sqrt(this.lengthSq()*n.lengthSq());if(s===0)return Math.PI/2;const l=this.dot(n)/s;return Math.acos(Gn(l,-1,1))}distanceTo(n){return Math.sqrt(this.distanceToSquared(n))}distanceToSquared(n){const s=this.x-n.x,l=this.y-n.y,d=this.z-n.z;return s*s+l*l+d*d}manhattanDistanceTo(n){return Math.abs(this.x-n.x)+Math.abs(this.y-n.y)+Math.abs(this.z-n.z)}setFromSpherical(n){return this.setFromSphericalCoords(n.radius,n.phi,n.theta)}setFromSphericalCoords(n,s,l){const d=Math.sin(s)*n;return this.x=d*Math.sin(l),this.y=Math.cos(s)*n,this.z=d*Math.cos(l),this}setFromCylindrical(n){return this.setFromCylindricalCoords(n.radius,n.theta,n.y)}setFromCylindricalCoords(n,s,l){return this.x=n*Math.sin(s),this.y=l,this.z=n*Math.cos(s),this}setFromMatrixPosition(n){const s=n.elements;return this.x=s[12],this.y=s[13],this.z=s[14],this}setFromMatrixScale(n){const s=this.setFromMatrixColumn(n,0).length(),l=this.setFromMatrixColumn(n,1).length(),d=this.setFromMatrixColumn(n,2).length();return this.x=s,this.y=l,this.z=d,this}setFromMatrixColumn(n,s){return this.fromArray(n.elements,s*4)}setFromMatrix3Column(n,s){return this.fromArray(n.elements,s*3)}setFromEuler(n){return this.x=n._x,this.y=n._y,this.z=n._z,this}setFromColor(n){return this.x=n.r,this.y=n.g,this.z=n.b,this}equals(n){return n.x===this.x&&n.y===this.y&&n.z===this.z}fromArray(n,s=0){return this.x=n[s],this.y=n[s+1],this.z=n[s+2],this}toArray(n=[],s=0){return n[s]=this.x,n[s+1]=this.y,n[s+2]=this.z,n}fromBufferAttribute(n,s){return this.x=n.getX(s),this.y=n.getY(s),this.z=n.getZ(s),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const n=Math.random()*Math.PI*2,s=Math.random()*2-1,l=Math.sqrt(1-s*s);return this.x=l*Math.cos(n),this.y=s,this.z=l*Math.sin(n),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const uf=new Se,e0=new _l;class xl{constructor(n=new Se(1/0,1/0,1/0),s=new Se(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=n,this.max=s}set(n,s){return this.min.copy(n),this.max.copy(s),this}setFromArray(n){this.makeEmpty();for(let s=0,l=n.length;s<l;s+=3)this.expandByPoint(jr.fromArray(n,s));return this}setFromBufferAttribute(n){this.makeEmpty();for(let s=0,l=n.count;s<l;s++)this.expandByPoint(jr.fromBufferAttribute(n,s));return this}setFromPoints(n){this.makeEmpty();for(let s=0,l=n.length;s<l;s++)this.expandByPoint(n[s]);return this}setFromCenterAndSize(n,s){const l=jr.copy(s).multiplyScalar(.5);return this.min.copy(n).sub(l),this.max.copy(n).add(l),this}setFromObject(n,s=!1){return this.makeEmpty(),this.expandByObject(n,s)}clone(){return new this.constructor().copy(this)}copy(n){return this.min.copy(n.min),this.max.copy(n.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(n){return this.isEmpty()?n.set(0,0,0):n.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(n){return this.isEmpty()?n.set(0,0,0):n.subVectors(this.max,this.min)}expandByPoint(n){return this.min.min(n),this.max.max(n),this}expandByVector(n){return this.min.sub(n),this.max.add(n),this}expandByScalar(n){return this.min.addScalar(-n),this.max.addScalar(n),this}expandByObject(n,s=!1){n.updateWorldMatrix(!1,!1);const l=n.geometry;if(l!==void 0){const m=l.getAttribute("position");if(s===!0&&m!==void 0&&n.isInstancedMesh!==!0)for(let v=0,M=m.count;v<M;v++)n.isMesh===!0?n.getVertexPosition(v,jr):jr.fromBufferAttribute(m,v),jr.applyMatrix4(n.matrixWorld),this.expandByPoint(jr);else n.boundingBox!==void 0?(n.boundingBox===null&&n.computeBoundingBox(),$h.copy(n.boundingBox)):(l.boundingBox===null&&l.computeBoundingBox(),$h.copy(l.boundingBox)),$h.applyMatrix4(n.matrixWorld),this.union($h)}const d=n.children;for(let m=0,v=d.length;m<v;m++)this.expandByObject(d[m],s);return this}containsPoint(n){return n.x>=this.min.x&&n.x<=this.max.x&&n.y>=this.min.y&&n.y<=this.max.y&&n.z>=this.min.z&&n.z<=this.max.z}containsBox(n){return this.min.x<=n.min.x&&n.max.x<=this.max.x&&this.min.y<=n.min.y&&n.max.y<=this.max.y&&this.min.z<=n.min.z&&n.max.z<=this.max.z}getParameter(n,s){return s.set((n.x-this.min.x)/(this.max.x-this.min.x),(n.y-this.min.y)/(this.max.y-this.min.y),(n.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(n){return n.max.x>=this.min.x&&n.min.x<=this.max.x&&n.max.y>=this.min.y&&n.min.y<=this.max.y&&n.max.z>=this.min.z&&n.min.z<=this.max.z}intersectsSphere(n){return this.clampPoint(n.center,jr),jr.distanceToSquared(n.center)<=n.radius*n.radius}intersectsPlane(n){let s,l;return n.normal.x>0?(s=n.normal.x*this.min.x,l=n.normal.x*this.max.x):(s=n.normal.x*this.max.x,l=n.normal.x*this.min.x),n.normal.y>0?(s+=n.normal.y*this.min.y,l+=n.normal.y*this.max.y):(s+=n.normal.y*this.max.y,l+=n.normal.y*this.min.y),n.normal.z>0?(s+=n.normal.z*this.min.z,l+=n.normal.z*this.max.z):(s+=n.normal.z*this.max.z,l+=n.normal.z*this.min.z),s<=-n.constant&&l>=-n.constant}intersectsTriangle(n){if(this.isEmpty())return!1;this.getCenter(al),Kh.subVectors(this.max,al),qo.subVectors(n.a,al),Yo.subVectors(n.b,al),Zo.subVectors(n.c,al),ta.subVectors(Yo,qo),na.subVectors(Zo,Yo),Wa.subVectors(qo,Zo);let s=[0,-ta.z,ta.y,0,-na.z,na.y,0,-Wa.z,Wa.y,ta.z,0,-ta.x,na.z,0,-na.x,Wa.z,0,-Wa.x,-ta.y,ta.x,0,-na.y,na.x,0,-Wa.y,Wa.x,0];return!df(s,qo,Yo,Zo,Kh)||(s=[1,0,0,0,1,0,0,0,1],!df(s,qo,Yo,Zo,Kh))?!1:(Jh.crossVectors(ta,na),s=[Jh.x,Jh.y,Jh.z],df(s,qo,Yo,Zo,Kh))}clampPoint(n,s){return s.copy(n).clamp(this.min,this.max)}distanceToPoint(n){return this.clampPoint(n,jr).distanceTo(n)}getBoundingSphere(n){return this.isEmpty()?n.makeEmpty():(this.getCenter(n.center),n.radius=this.getSize(jr).length()*.5),n}intersect(n){return this.min.max(n.min),this.max.min(n.max),this.isEmpty()&&this.makeEmpty(),this}union(n){return this.min.min(n.min),this.max.max(n.max),this}applyMatrix4(n){return this.isEmpty()?this:(ws[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(n),ws[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(n),ws[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(n),ws[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(n),ws[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(n),ws[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(n),ws[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(n),ws[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(n),this.setFromPoints(ws),this)}translate(n){return this.min.add(n),this.max.add(n),this}equals(n){return n.min.equals(this.min)&&n.max.equals(this.max)}}const ws=[new Se,new Se,new Se,new Se,new Se,new Se,new Se,new Se],jr=new Se,$h=new xl,qo=new Se,Yo=new Se,Zo=new Se,ta=new Se,na=new Se,Wa=new Se,al=new Se,Kh=new Se,Jh=new Se,Xa=new Se;function df(u,n,s,l,d){for(let m=0,v=u.length-3;m<=v;m+=3){Xa.fromArray(u,m);const M=d.x*Math.abs(Xa.x)+d.y*Math.abs(Xa.y)+d.z*Math.abs(Xa.z),T=n.dot(Xa),A=s.dot(Xa),C=l.dot(Xa);if(Math.max(-Math.max(T,A,C),Math.min(T,A,C))>M)return!1}return!0}const nA=new xl,ol=new Se,ff=new Se;class Lp{constructor(n=new Se,s=-1){this.isSphere=!0,this.center=n,this.radius=s}set(n,s){return this.center.copy(n),this.radius=s,this}setFromPoints(n,s){const l=this.center;s!==void 0?l.copy(s):nA.setFromPoints(n).getCenter(l);let d=0;for(let m=0,v=n.length;m<v;m++)d=Math.max(d,l.distanceToSquared(n[m]));return this.radius=Math.sqrt(d),this}copy(n){return this.center.copy(n.center),this.radius=n.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(n){return n.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(n){return n.distanceTo(this.center)-this.radius}intersectsSphere(n){const s=this.radius+n.radius;return n.center.distanceToSquared(this.center)<=s*s}intersectsBox(n){return n.intersectsSphere(this)}intersectsPlane(n){return Math.abs(n.distanceToPoint(this.center))<=this.radius}clampPoint(n,s){const l=this.center.distanceToSquared(n);return s.copy(n),l>this.radius*this.radius&&(s.sub(this.center).normalize(),s.multiplyScalar(this.radius).add(this.center)),s}getBoundingBox(n){return this.isEmpty()?(n.makeEmpty(),n):(n.set(this.center,this.center),n.expandByScalar(this.radius),n)}applyMatrix4(n){return this.center.applyMatrix4(n),this.radius=this.radius*n.getMaxScaleOnAxis(),this}translate(n){return this.center.add(n),this}expandByPoint(n){if(this.isEmpty())return this.center.copy(n),this.radius=0,this;ol.subVectors(n,this.center);const s=ol.lengthSq();if(s>this.radius*this.radius){const l=Math.sqrt(s),d=(l-this.radius)*.5;this.center.addScaledVector(ol,d/l),this.radius+=d}return this}union(n){return n.isEmpty()?this:this.isEmpty()?(this.copy(n),this):(this.center.equals(n.center)===!0?this.radius=Math.max(this.radius,n.radius):(ff.subVectors(n.center,this.center).setLength(n.radius),this.expandByPoint(ol.copy(n.center).add(ff)),this.expandByPoint(ol.copy(n.center).sub(ff))),this)}equals(n){return n.center.equals(this.center)&&n.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Cs=new Se,pf=new Se,jh=new Se,ia=new Se,mf=new Se,Qh=new Se,gf=new Se;class iA{constructor(n=new Se,s=new Se(0,0,-1)){this.origin=n,this.direction=s}set(n,s){return this.origin.copy(n),this.direction.copy(s),this}copy(n){return this.origin.copy(n.origin),this.direction.copy(n.direction),this}at(n,s){return s.copy(this.origin).addScaledVector(this.direction,n)}lookAt(n){return this.direction.copy(n).sub(this.origin).normalize(),this}recast(n){return this.origin.copy(this.at(n,Cs)),this}closestPointToPoint(n,s){s.subVectors(n,this.origin);const l=s.dot(this.direction);return l<0?s.copy(this.origin):s.copy(this.origin).addScaledVector(this.direction,l)}distanceToPoint(n){return Math.sqrt(this.distanceSqToPoint(n))}distanceSqToPoint(n){const s=Cs.subVectors(n,this.origin).dot(this.direction);return s<0?this.origin.distanceToSquared(n):(Cs.copy(this.origin).addScaledVector(this.direction,s),Cs.distanceToSquared(n))}distanceSqToSegment(n,s,l,d){pf.copy(n).add(s).multiplyScalar(.5),jh.copy(s).sub(n).normalize(),ia.copy(this.origin).sub(pf);const m=n.distanceTo(s)*.5,v=-this.direction.dot(jh),M=ia.dot(this.direction),T=-ia.dot(jh),A=ia.lengthSq(),C=Math.abs(1-v*v);let P,I,F,W;if(C>0)if(P=v*T-M,I=v*M-T,W=m*C,P>=0)if(I>=-W)if(I<=W){const Y=1/C;P*=Y,I*=Y,F=P*(P+v*I+2*M)+I*(v*P+I+2*T)+A}else I=m,P=Math.max(0,-(v*I+M)),F=-P*P+I*(I+2*T)+A;else I=-m,P=Math.max(0,-(v*I+M)),F=-P*P+I*(I+2*T)+A;else I<=-W?(P=Math.max(0,-(-v*m+M)),I=P>0?-m:Math.min(Math.max(-m,-T),m),F=-P*P+I*(I+2*T)+A):I<=W?(P=0,I=Math.min(Math.max(-m,-T),m),F=I*(I+2*T)+A):(P=Math.max(0,-(v*m+M)),I=P>0?m:Math.min(Math.max(-m,-T),m),F=-P*P+I*(I+2*T)+A);else I=v>0?-m:m,P=Math.max(0,-(v*I+M)),F=-P*P+I*(I+2*T)+A;return l&&l.copy(this.origin).addScaledVector(this.direction,P),d&&d.copy(pf).addScaledVector(jh,I),F}intersectSphere(n,s){Cs.subVectors(n.center,this.origin);const l=Cs.dot(this.direction),d=Cs.dot(Cs)-l*l,m=n.radius*n.radius;if(d>m)return null;const v=Math.sqrt(m-d),M=l-v,T=l+v;return T<0?null:M<0?this.at(T,s):this.at(M,s)}intersectsSphere(n){return this.distanceSqToPoint(n.center)<=n.radius*n.radius}distanceToPlane(n){const s=n.normal.dot(this.direction);if(s===0)return n.distanceToPoint(this.origin)===0?0:null;const l=-(this.origin.dot(n.normal)+n.constant)/s;return l>=0?l:null}intersectPlane(n,s){const l=this.distanceToPlane(n);return l===null?null:this.at(l,s)}intersectsPlane(n){const s=n.distanceToPoint(this.origin);return s===0||n.normal.dot(this.direction)*s<0}intersectBox(n,s){let l,d,m,v,M,T;const A=1/this.direction.x,C=1/this.direction.y,P=1/this.direction.z,I=this.origin;return A>=0?(l=(n.min.x-I.x)*A,d=(n.max.x-I.x)*A):(l=(n.max.x-I.x)*A,d=(n.min.x-I.x)*A),C>=0?(m=(n.min.y-I.y)*C,v=(n.max.y-I.y)*C):(m=(n.max.y-I.y)*C,v=(n.min.y-I.y)*C),l>v||m>d||((m>l||isNaN(l))&&(l=m),(v<d||isNaN(d))&&(d=v),P>=0?(M=(n.min.z-I.z)*P,T=(n.max.z-I.z)*P):(M=(n.max.z-I.z)*P,T=(n.min.z-I.z)*P),l>T||M>d)||((M>l||l!==l)&&(l=M),(T<d||d!==d)&&(d=T),d<0)?null:this.at(l>=0?l:d,s)}intersectsBox(n){return this.intersectBox(n,Cs)!==null}intersectTriangle(n,s,l,d,m){mf.subVectors(s,n),Qh.subVectors(l,n),gf.crossVectors(mf,Qh);let v=this.direction.dot(gf),M;if(v>0){if(d)return null;M=1}else if(v<0)M=-1,v=-v;else return null;ia.subVectors(this.origin,n);const T=M*this.direction.dot(Qh.crossVectors(ia,Qh));if(T<0)return null;const A=M*this.direction.dot(mf.cross(ia));if(A<0||T+A>v)return null;const C=-M*ia.dot(gf);return C<0?null:this.at(C/v,m)}applyMatrix4(n){return this.origin.applyMatrix4(n),this.direction.transformDirection(n),this}equals(n){return n.origin.equals(this.origin)&&n.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Mi{constructor(n,s,l,d,m,v,M,T,A,C,P,I,F,W,Y,U){Mi.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],n!==void 0&&this.set(n,s,l,d,m,v,M,T,A,C,P,I,F,W,Y,U)}set(n,s,l,d,m,v,M,T,A,C,P,I,F,W,Y,U){const R=this.elements;return R[0]=n,R[4]=s,R[8]=l,R[12]=d,R[1]=m,R[5]=v,R[9]=M,R[13]=T,R[2]=A,R[6]=C,R[10]=P,R[14]=I,R[3]=F,R[7]=W,R[11]=Y,R[15]=U,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Mi().fromArray(this.elements)}copy(n){const s=this.elements,l=n.elements;return s[0]=l[0],s[1]=l[1],s[2]=l[2],s[3]=l[3],s[4]=l[4],s[5]=l[5],s[6]=l[6],s[7]=l[7],s[8]=l[8],s[9]=l[9],s[10]=l[10],s[11]=l[11],s[12]=l[12],s[13]=l[13],s[14]=l[14],s[15]=l[15],this}copyPosition(n){const s=this.elements,l=n.elements;return s[12]=l[12],s[13]=l[13],s[14]=l[14],this}setFromMatrix3(n){const s=n.elements;return this.set(s[0],s[3],s[6],0,s[1],s[4],s[7],0,s[2],s[5],s[8],0,0,0,0,1),this}extractBasis(n,s,l){return n.setFromMatrixColumn(this,0),s.setFromMatrixColumn(this,1),l.setFromMatrixColumn(this,2),this}makeBasis(n,s,l){return this.set(n.x,s.x,l.x,0,n.y,s.y,l.y,0,n.z,s.z,l.z,0,0,0,0,1),this}extractRotation(n){const s=this.elements,l=n.elements,d=1/$o.setFromMatrixColumn(n,0).length(),m=1/$o.setFromMatrixColumn(n,1).length(),v=1/$o.setFromMatrixColumn(n,2).length();return s[0]=l[0]*d,s[1]=l[1]*d,s[2]=l[2]*d,s[3]=0,s[4]=l[4]*m,s[5]=l[5]*m,s[6]=l[6]*m,s[7]=0,s[8]=l[8]*v,s[9]=l[9]*v,s[10]=l[10]*v,s[11]=0,s[12]=0,s[13]=0,s[14]=0,s[15]=1,this}makeRotationFromEuler(n){const s=this.elements,l=n.x,d=n.y,m=n.z,v=Math.cos(l),M=Math.sin(l),T=Math.cos(d),A=Math.sin(d),C=Math.cos(m),P=Math.sin(m);if(n.order==="XYZ"){const I=v*C,F=v*P,W=M*C,Y=M*P;s[0]=T*C,s[4]=-T*P,s[8]=A,s[1]=F+W*A,s[5]=I-Y*A,s[9]=-M*T,s[2]=Y-I*A,s[6]=W+F*A,s[10]=v*T}else if(n.order==="YXZ"){const I=T*C,F=T*P,W=A*C,Y=A*P;s[0]=I+Y*M,s[4]=W*M-F,s[8]=v*A,s[1]=v*P,s[5]=v*C,s[9]=-M,s[2]=F*M-W,s[6]=Y+I*M,s[10]=v*T}else if(n.order==="ZXY"){const I=T*C,F=T*P,W=A*C,Y=A*P;s[0]=I-Y*M,s[4]=-v*P,s[8]=W+F*M,s[1]=F+W*M,s[5]=v*C,s[9]=Y-I*M,s[2]=-v*A,s[6]=M,s[10]=v*T}else if(n.order==="ZYX"){const I=v*C,F=v*P,W=M*C,Y=M*P;s[0]=T*C,s[4]=W*A-F,s[8]=I*A+Y,s[1]=T*P,s[5]=Y*A+I,s[9]=F*A-W,s[2]=-A,s[6]=M*T,s[10]=v*T}else if(n.order==="YZX"){const I=v*T,F=v*A,W=M*T,Y=M*A;s[0]=T*C,s[4]=Y-I*P,s[8]=W*P+F,s[1]=P,s[5]=v*C,s[9]=-M*C,s[2]=-A*C,s[6]=F*P+W,s[10]=I-Y*P}else if(n.order==="XZY"){const I=v*T,F=v*A,W=M*T,Y=M*A;s[0]=T*C,s[4]=-P,s[8]=A*C,s[1]=I*P+Y,s[5]=v*C,s[9]=F*P-W,s[2]=W*P-F,s[6]=M*C,s[10]=Y*P+I}return s[3]=0,s[7]=0,s[11]=0,s[12]=0,s[13]=0,s[14]=0,s[15]=1,this}makeRotationFromQuaternion(n){return this.compose(rA,n,sA)}lookAt(n,s,l){const d=this.elements;return Ar.subVectors(n,s),Ar.lengthSq()===0&&(Ar.z=1),Ar.normalize(),ra.crossVectors(l,Ar),ra.lengthSq()===0&&(Math.abs(l.z)===1?Ar.x+=1e-4:Ar.z+=1e-4,Ar.normalize(),ra.crossVectors(l,Ar)),ra.normalize(),eu.crossVectors(Ar,ra),d[0]=ra.x,d[4]=eu.x,d[8]=Ar.x,d[1]=ra.y,d[5]=eu.y,d[9]=Ar.y,d[2]=ra.z,d[6]=eu.z,d[10]=Ar.z,this}multiply(n){return this.multiplyMatrices(this,n)}premultiply(n){return this.multiplyMatrices(n,this)}multiplyMatrices(n,s){const l=n.elements,d=s.elements,m=this.elements,v=l[0],M=l[4],T=l[8],A=l[12],C=l[1],P=l[5],I=l[9],F=l[13],W=l[2],Y=l[6],U=l[10],R=l[14],oe=l[3],se=l[7],ee=l[11],xe=l[15],de=d[0],le=d[4],ve=d[8],K=d[12],q=d[1],he=d[5],Ne=d[9],Ie=d[13],Je=d[2],Qe=d[6],Ze=d[10],rt=d[14],Oe=d[3],wt=d[7],kt=d[11],an=d[15];return m[0]=v*de+M*q+T*Je+A*Oe,m[4]=v*le+M*he+T*Qe+A*wt,m[8]=v*ve+M*Ne+T*Ze+A*kt,m[12]=v*K+M*Ie+T*rt+A*an,m[1]=C*de+P*q+I*Je+F*Oe,m[5]=C*le+P*he+I*Qe+F*wt,m[9]=C*ve+P*Ne+I*Ze+F*kt,m[13]=C*K+P*Ie+I*rt+F*an,m[2]=W*de+Y*q+U*Je+R*Oe,m[6]=W*le+Y*he+U*Qe+R*wt,m[10]=W*ve+Y*Ne+U*Ze+R*kt,m[14]=W*K+Y*Ie+U*rt+R*an,m[3]=oe*de+se*q+ee*Je+xe*Oe,m[7]=oe*le+se*he+ee*Qe+xe*wt,m[11]=oe*ve+se*Ne+ee*Ze+xe*kt,m[15]=oe*K+se*Ie+ee*rt+xe*an,this}multiplyScalar(n){const s=this.elements;return s[0]*=n,s[4]*=n,s[8]*=n,s[12]*=n,s[1]*=n,s[5]*=n,s[9]*=n,s[13]*=n,s[2]*=n,s[6]*=n,s[10]*=n,s[14]*=n,s[3]*=n,s[7]*=n,s[11]*=n,s[15]*=n,this}determinant(){const n=this.elements,s=n[0],l=n[4],d=n[8],m=n[12],v=n[1],M=n[5],T=n[9],A=n[13],C=n[2],P=n[6],I=n[10],F=n[14],W=n[3],Y=n[7],U=n[11],R=n[15];return W*(+m*T*P-d*A*P-m*M*I+l*A*I+d*M*F-l*T*F)+Y*(+s*T*F-s*A*I+m*v*I-d*v*F+d*A*C-m*T*C)+U*(+s*A*P-s*M*F-m*v*P+l*v*F+m*M*C-l*A*C)+R*(-d*M*C-s*T*P+s*M*I+d*v*P-l*v*I+l*T*C)}transpose(){const n=this.elements;let s;return s=n[1],n[1]=n[4],n[4]=s,s=n[2],n[2]=n[8],n[8]=s,s=n[6],n[6]=n[9],n[9]=s,s=n[3],n[3]=n[12],n[12]=s,s=n[7],n[7]=n[13],n[13]=s,s=n[11],n[11]=n[14],n[14]=s,this}setPosition(n,s,l){const d=this.elements;return n.isVector3?(d[12]=n.x,d[13]=n.y,d[14]=n.z):(d[12]=n,d[13]=s,d[14]=l),this}invert(){const n=this.elements,s=n[0],l=n[1],d=n[2],m=n[3],v=n[4],M=n[5],T=n[6],A=n[7],C=n[8],P=n[9],I=n[10],F=n[11],W=n[12],Y=n[13],U=n[14],R=n[15],oe=P*U*A-Y*I*A+Y*T*F-M*U*F-P*T*R+M*I*R,se=W*I*A-C*U*A-W*T*F+v*U*F+C*T*R-v*I*R,ee=C*Y*A-W*P*A+W*M*F-v*Y*F-C*M*R+v*P*R,xe=W*P*T-C*Y*T-W*M*I+v*Y*I+C*M*U-v*P*U,de=s*oe+l*se+d*ee+m*xe;if(de===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const le=1/de;return n[0]=oe*le,n[1]=(Y*I*m-P*U*m-Y*d*F+l*U*F+P*d*R-l*I*R)*le,n[2]=(M*U*m-Y*T*m+Y*d*A-l*U*A-M*d*R+l*T*R)*le,n[3]=(P*T*m-M*I*m-P*d*A+l*I*A+M*d*F-l*T*F)*le,n[4]=se*le,n[5]=(C*U*m-W*I*m+W*d*F-s*U*F-C*d*R+s*I*R)*le,n[6]=(W*T*m-v*U*m-W*d*A+s*U*A+v*d*R-s*T*R)*le,n[7]=(v*I*m-C*T*m+C*d*A-s*I*A-v*d*F+s*T*F)*le,n[8]=ee*le,n[9]=(W*P*m-C*Y*m-W*l*F+s*Y*F+C*l*R-s*P*R)*le,n[10]=(v*Y*m-W*M*m+W*l*A-s*Y*A-v*l*R+s*M*R)*le,n[11]=(C*M*m-v*P*m-C*l*A+s*P*A+v*l*F-s*M*F)*le,n[12]=xe*le,n[13]=(C*Y*d-W*P*d+W*l*I-s*Y*I-C*l*U+s*P*U)*le,n[14]=(W*M*d-v*Y*d-W*l*T+s*Y*T+v*l*U-s*M*U)*le,n[15]=(v*P*d-C*M*d+C*l*T-s*P*T-v*l*I+s*M*I)*le,this}scale(n){const s=this.elements,l=n.x,d=n.y,m=n.z;return s[0]*=l,s[4]*=d,s[8]*=m,s[1]*=l,s[5]*=d,s[9]*=m,s[2]*=l,s[6]*=d,s[10]*=m,s[3]*=l,s[7]*=d,s[11]*=m,this}getMaxScaleOnAxis(){const n=this.elements,s=n[0]*n[0]+n[1]*n[1]+n[2]*n[2],l=n[4]*n[4]+n[5]*n[5]+n[6]*n[6],d=n[8]*n[8]+n[9]*n[9]+n[10]*n[10];return Math.sqrt(Math.max(s,l,d))}makeTranslation(n,s,l){return n.isVector3?this.set(1,0,0,n.x,0,1,0,n.y,0,0,1,n.z,0,0,0,1):this.set(1,0,0,n,0,1,0,s,0,0,1,l,0,0,0,1),this}makeRotationX(n){const s=Math.cos(n),l=Math.sin(n);return this.set(1,0,0,0,0,s,-l,0,0,l,s,0,0,0,0,1),this}makeRotationY(n){const s=Math.cos(n),l=Math.sin(n);return this.set(s,0,l,0,0,1,0,0,-l,0,s,0,0,0,0,1),this}makeRotationZ(n){const s=Math.cos(n),l=Math.sin(n);return this.set(s,-l,0,0,l,s,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(n,s){const l=Math.cos(s),d=Math.sin(s),m=1-l,v=n.x,M=n.y,T=n.z,A=m*v,C=m*M;return this.set(A*v+l,A*M-d*T,A*T+d*M,0,A*M+d*T,C*M+l,C*T-d*v,0,A*T-d*M,C*T+d*v,m*T*T+l,0,0,0,0,1),this}makeScale(n,s,l){return this.set(n,0,0,0,0,s,0,0,0,0,l,0,0,0,0,1),this}makeShear(n,s,l,d,m,v){return this.set(1,l,m,0,n,1,v,0,s,d,1,0,0,0,0,1),this}compose(n,s,l){const d=this.elements,m=s._x,v=s._y,M=s._z,T=s._w,A=m+m,C=v+v,P=M+M,I=m*A,F=m*C,W=m*P,Y=v*C,U=v*P,R=M*P,oe=T*A,se=T*C,ee=T*P,xe=l.x,de=l.y,le=l.z;return d[0]=(1-(Y+R))*xe,d[1]=(F+ee)*xe,d[2]=(W-se)*xe,d[3]=0,d[4]=(F-ee)*de,d[5]=(1-(I+R))*de,d[6]=(U+oe)*de,d[7]=0,d[8]=(W+se)*le,d[9]=(U-oe)*le,d[10]=(1-(I+Y))*le,d[11]=0,d[12]=n.x,d[13]=n.y,d[14]=n.z,d[15]=1,this}decompose(n,s,l){const d=this.elements;let m=$o.set(d[0],d[1],d[2]).length();const v=$o.set(d[4],d[5],d[6]).length(),M=$o.set(d[8],d[9],d[10]).length();this.determinant()<0&&(m=-m),n.x=d[12],n.y=d[13],n.z=d[14],Qr.copy(this);const A=1/m,C=1/v,P=1/M;return Qr.elements[0]*=A,Qr.elements[1]*=A,Qr.elements[2]*=A,Qr.elements[4]*=C,Qr.elements[5]*=C,Qr.elements[6]*=C,Qr.elements[8]*=P,Qr.elements[9]*=P,Qr.elements[10]*=P,s.setFromRotationMatrix(Qr),l.x=m,l.y=v,l.z=M,this}makePerspective(n,s,l,d,m,v,M=Us){const T=this.elements,A=2*m/(s-n),C=2*m/(l-d),P=(s+n)/(s-n),I=(l+d)/(l-d);let F,W;if(M===Us)F=-(v+m)/(v-m),W=-2*v*m/(v-m);else if(M===Eu)F=-v/(v-m),W=-v*m/(v-m);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+M);return T[0]=A,T[4]=0,T[8]=P,T[12]=0,T[1]=0,T[5]=C,T[9]=I,T[13]=0,T[2]=0,T[6]=0,T[10]=F,T[14]=W,T[3]=0,T[7]=0,T[11]=-1,T[15]=0,this}makeOrthographic(n,s,l,d,m,v,M=Us){const T=this.elements,A=1/(s-n),C=1/(l-d),P=1/(v-m),I=(s+n)*A,F=(l+d)*C;let W,Y;if(M===Us)W=(v+m)*P,Y=-2*P;else if(M===Eu)W=m*P,Y=-1*P;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+M);return T[0]=2*A,T[4]=0,T[8]=0,T[12]=-I,T[1]=0,T[5]=2*C,T[9]=0,T[13]=-F,T[2]=0,T[6]=0,T[10]=Y,T[14]=-W,T[3]=0,T[7]=0,T[11]=0,T[15]=1,this}equals(n){const s=this.elements,l=n.elements;for(let d=0;d<16;d++)if(s[d]!==l[d])return!1;return!0}fromArray(n,s=0){for(let l=0;l<16;l++)this.elements[l]=n[l+s];return this}toArray(n=[],s=0){const l=this.elements;return n[s]=l[0],n[s+1]=l[1],n[s+2]=l[2],n[s+3]=l[3],n[s+4]=l[4],n[s+5]=l[5],n[s+6]=l[6],n[s+7]=l[7],n[s+8]=l[8],n[s+9]=l[9],n[s+10]=l[10],n[s+11]=l[11],n[s+12]=l[12],n[s+13]=l[13],n[s+14]=l[14],n[s+15]=l[15],n}}const $o=new Se,Qr=new Mi,rA=new Se(0,0,0),sA=new Se(1,1,1),ra=new Se,eu=new Se,Ar=new Se,t0=new Mi,n0=new _l;class Bs{constructor(n=0,s=0,l=0,d=Bs.DEFAULT_ORDER){this.isEuler=!0,this._x=n,this._y=s,this._z=l,this._order=d}get x(){return this._x}set x(n){this._x=n,this._onChangeCallback()}get y(){return this._y}set y(n){this._y=n,this._onChangeCallback()}get z(){return this._z}set z(n){this._z=n,this._onChangeCallback()}get order(){return this._order}set order(n){this._order=n,this._onChangeCallback()}set(n,s,l,d=this._order){return this._x=n,this._y=s,this._z=l,this._order=d,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(n){return this._x=n._x,this._y=n._y,this._z=n._z,this._order=n._order,this._onChangeCallback(),this}setFromRotationMatrix(n,s=this._order,l=!0){const d=n.elements,m=d[0],v=d[4],M=d[8],T=d[1],A=d[5],C=d[9],P=d[2],I=d[6],F=d[10];switch(s){case"XYZ":this._y=Math.asin(Gn(M,-1,1)),Math.abs(M)<.9999999?(this._x=Math.atan2(-C,F),this._z=Math.atan2(-v,m)):(this._x=Math.atan2(I,A),this._z=0);break;case"YXZ":this._x=Math.asin(-Gn(C,-1,1)),Math.abs(C)<.9999999?(this._y=Math.atan2(M,F),this._z=Math.atan2(T,A)):(this._y=Math.atan2(-P,m),this._z=0);break;case"ZXY":this._x=Math.asin(Gn(I,-1,1)),Math.abs(I)<.9999999?(this._y=Math.atan2(-P,F),this._z=Math.atan2(-v,A)):(this._y=0,this._z=Math.atan2(T,m));break;case"ZYX":this._y=Math.asin(-Gn(P,-1,1)),Math.abs(P)<.9999999?(this._x=Math.atan2(I,F),this._z=Math.atan2(T,m)):(this._x=0,this._z=Math.atan2(-v,A));break;case"YZX":this._z=Math.asin(Gn(T,-1,1)),Math.abs(T)<.9999999?(this._x=Math.atan2(-C,A),this._y=Math.atan2(-P,m)):(this._x=0,this._y=Math.atan2(M,F));break;case"XZY":this._z=Math.asin(-Gn(v,-1,1)),Math.abs(v)<.9999999?(this._x=Math.atan2(I,A),this._y=Math.atan2(M,m)):(this._x=Math.atan2(-C,F),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+s)}return this._order=s,l===!0&&this._onChangeCallback(),this}setFromQuaternion(n,s,l){return t0.makeRotationFromQuaternion(n),this.setFromRotationMatrix(t0,s,l)}setFromVector3(n,s=this._order){return this.set(n.x,n.y,n.z,s)}reorder(n){return n0.setFromEuler(this),this.setFromQuaternion(n0,n)}equals(n){return n._x===this._x&&n._y===this._y&&n._z===this._z&&n._order===this._order}fromArray(n){return this._x=n[0],this._y=n[1],this._z=n[2],n[3]!==void 0&&(this._order=n[3]),this._onChangeCallback(),this}toArray(n=[],s=0){return n[s]=this._x,n[s+1]=this._y,n[s+2]=this._z,n[s+3]=this._order,n}_onChange(n){return this._onChangeCallback=n,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Bs.DEFAULT_ORDER="XYZ";class fx{constructor(){this.mask=1}set(n){this.mask=(1<<n|0)>>>0}enable(n){this.mask|=1<<n|0}enableAll(){this.mask=-1}toggle(n){this.mask^=1<<n|0}disable(n){this.mask&=~(1<<n|0)}disableAll(){this.mask=0}test(n){return(this.mask&n.mask)!==0}isEnabled(n){return(this.mask&(1<<n|0))!==0}}let aA=0;const i0=new Se,Ko=new _l,Rs=new Mi,tu=new Se,cl=new Se,oA=new Se,cA=new _l,r0=new Se(1,0,0),s0=new Se(0,1,0),a0=new Se(0,0,1),o0={type:"added"},lA={type:"removed"},Jo={type:"childadded",child:null},_f={type:"childremoved",child:null};class yr extends _c{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:aA++}),this.uuid=gl(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=yr.DEFAULT_UP.clone();const n=new Se,s=new Bs,l=new _l,d=new Se(1,1,1);function m(){l.setFromEuler(s,!1)}function v(){s.setFromQuaternion(l,void 0,!1)}s._onChange(m),l._onChange(v),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:n},rotation:{configurable:!0,enumerable:!0,value:s},quaternion:{configurable:!0,enumerable:!0,value:l},scale:{configurable:!0,enumerable:!0,value:d},modelViewMatrix:{value:new Mi},normalMatrix:{value:new Un}}),this.matrix=new Mi,this.matrixWorld=new Mi,this.matrixAutoUpdate=yr.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=yr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new fx,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(n){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(n),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(n){return this.quaternion.premultiply(n),this}setRotationFromAxisAngle(n,s){this.quaternion.setFromAxisAngle(n,s)}setRotationFromEuler(n){this.quaternion.setFromEuler(n,!0)}setRotationFromMatrix(n){this.quaternion.setFromRotationMatrix(n)}setRotationFromQuaternion(n){this.quaternion.copy(n)}rotateOnAxis(n,s){return Ko.setFromAxisAngle(n,s),this.quaternion.multiply(Ko),this}rotateOnWorldAxis(n,s){return Ko.setFromAxisAngle(n,s),this.quaternion.premultiply(Ko),this}rotateX(n){return this.rotateOnAxis(r0,n)}rotateY(n){return this.rotateOnAxis(s0,n)}rotateZ(n){return this.rotateOnAxis(a0,n)}translateOnAxis(n,s){return i0.copy(n).applyQuaternion(this.quaternion),this.position.add(i0.multiplyScalar(s)),this}translateX(n){return this.translateOnAxis(r0,n)}translateY(n){return this.translateOnAxis(s0,n)}translateZ(n){return this.translateOnAxis(a0,n)}localToWorld(n){return this.updateWorldMatrix(!0,!1),n.applyMatrix4(this.matrixWorld)}worldToLocal(n){return this.updateWorldMatrix(!0,!1),n.applyMatrix4(Rs.copy(this.matrixWorld).invert())}lookAt(n,s,l){n.isVector3?tu.copy(n):tu.set(n,s,l);const d=this.parent;this.updateWorldMatrix(!0,!1),cl.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Rs.lookAt(cl,tu,this.up):Rs.lookAt(tu,cl,this.up),this.quaternion.setFromRotationMatrix(Rs),d&&(Rs.extractRotation(d.matrixWorld),Ko.setFromRotationMatrix(Rs),this.quaternion.premultiply(Ko.invert()))}add(n){if(arguments.length>1){for(let s=0;s<arguments.length;s++)this.add(arguments[s]);return this}return n===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",n),this):(n&&n.isObject3D?(n.removeFromParent(),n.parent=this,this.children.push(n),n.dispatchEvent(o0),Jo.child=n,this.dispatchEvent(Jo),Jo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",n),this)}remove(n){if(arguments.length>1){for(let l=0;l<arguments.length;l++)this.remove(arguments[l]);return this}const s=this.children.indexOf(n);return s!==-1&&(n.parent=null,this.children.splice(s,1),n.dispatchEvent(lA),_f.child=n,this.dispatchEvent(_f),_f.child=null),this}removeFromParent(){const n=this.parent;return n!==null&&n.remove(this),this}clear(){return this.remove(...this.children)}attach(n){return this.updateWorldMatrix(!0,!1),Rs.copy(this.matrixWorld).invert(),n.parent!==null&&(n.parent.updateWorldMatrix(!0,!1),Rs.multiply(n.parent.matrixWorld)),n.applyMatrix4(Rs),n.removeFromParent(),n.parent=this,this.children.push(n),n.updateWorldMatrix(!1,!0),n.dispatchEvent(o0),Jo.child=n,this.dispatchEvent(Jo),Jo.child=null,this}getObjectById(n){return this.getObjectByProperty("id",n)}getObjectByName(n){return this.getObjectByProperty("name",n)}getObjectByProperty(n,s){if(this[n]===s)return this;for(let l=0,d=this.children.length;l<d;l++){const v=this.children[l].getObjectByProperty(n,s);if(v!==void 0)return v}}getObjectsByProperty(n,s,l=[]){this[n]===s&&l.push(this);const d=this.children;for(let m=0,v=d.length;m<v;m++)d[m].getObjectsByProperty(n,s,l);return l}getWorldPosition(n){return this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(cl,n,oA),n}getWorldScale(n){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(cl,cA,n),n}getWorldDirection(n){this.updateWorldMatrix(!0,!1);const s=this.matrixWorld.elements;return n.set(s[8],s[9],s[10]).normalize()}raycast(){}traverse(n){n(this);const s=this.children;for(let l=0,d=s.length;l<d;l++)s[l].traverse(n)}traverseVisible(n){if(this.visible===!1)return;n(this);const s=this.children;for(let l=0,d=s.length;l<d;l++)s[l].traverseVisible(n)}traverseAncestors(n){const s=this.parent;s!==null&&(n(s),s.traverseAncestors(n))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(n){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||n)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,n=!0);const s=this.children;for(let l=0,d=s.length;l<d;l++)s[l].updateMatrixWorld(n)}updateWorldMatrix(n,s){const l=this.parent;if(n===!0&&l!==null&&l.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),s===!0){const d=this.children;for(let m=0,v=d.length;m<v;m++)d[m].updateWorldMatrix(!1,!0)}}toJSON(n){const s=n===void 0||typeof n=="string",l={};s&&(n={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},l.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const d={};d.uuid=this.uuid,d.type=this.type,this.name!==""&&(d.name=this.name),this.castShadow===!0&&(d.castShadow=!0),this.receiveShadow===!0&&(d.receiveShadow=!0),this.visible===!1&&(d.visible=!1),this.frustumCulled===!1&&(d.frustumCulled=!1),this.renderOrder!==0&&(d.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(d.userData=this.userData),d.layers=this.layers.mask,d.matrix=this.matrix.toArray(),d.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(d.matrixAutoUpdate=!1),this.isInstancedMesh&&(d.type="InstancedMesh",d.count=this.count,d.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(d.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(d.type="BatchedMesh",d.perObjectFrustumCulled=this.perObjectFrustumCulled,d.sortObjects=this.sortObjects,d.drawRanges=this._drawRanges,d.reservedRanges=this._reservedRanges,d.visibility=this._visibility,d.active=this._active,d.bounds=this._bounds.map(M=>({boxInitialized:M.boxInitialized,boxMin:M.box.min.toArray(),boxMax:M.box.max.toArray(),sphereInitialized:M.sphereInitialized,sphereRadius:M.sphere.radius,sphereCenter:M.sphere.center.toArray()})),d.maxInstanceCount=this._maxInstanceCount,d.maxVertexCount=this._maxVertexCount,d.maxIndexCount=this._maxIndexCount,d.geometryInitialized=this._geometryInitialized,d.geometryCount=this._geometryCount,d.matricesTexture=this._matricesTexture.toJSON(n),this._colorsTexture!==null&&(d.colorsTexture=this._colorsTexture.toJSON(n)),this.boundingSphere!==null&&(d.boundingSphere={center:d.boundingSphere.center.toArray(),radius:d.boundingSphere.radius}),this.boundingBox!==null&&(d.boundingBox={min:d.boundingBox.min.toArray(),max:d.boundingBox.max.toArray()}));function m(M,T){return M[T.uuid]===void 0&&(M[T.uuid]=T.toJSON(n)),T.uuid}if(this.isScene)this.background&&(this.background.isColor?d.background=this.background.toJSON():this.background.isTexture&&(d.background=this.background.toJSON(n).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(d.environment=this.environment.toJSON(n).uuid);else if(this.isMesh||this.isLine||this.isPoints){d.geometry=m(n.geometries,this.geometry);const M=this.geometry.parameters;if(M!==void 0&&M.shapes!==void 0){const T=M.shapes;if(Array.isArray(T))for(let A=0,C=T.length;A<C;A++){const P=T[A];m(n.shapes,P)}else m(n.shapes,T)}}if(this.isSkinnedMesh&&(d.bindMode=this.bindMode,d.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(m(n.skeletons,this.skeleton),d.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const M=[];for(let T=0,A=this.material.length;T<A;T++)M.push(m(n.materials,this.material[T]));d.material=M}else d.material=m(n.materials,this.material);if(this.children.length>0){d.children=[];for(let M=0;M<this.children.length;M++)d.children.push(this.children[M].toJSON(n).object)}if(this.animations.length>0){d.animations=[];for(let M=0;M<this.animations.length;M++){const T=this.animations[M];d.animations.push(m(n.animations,T))}}if(s){const M=v(n.geometries),T=v(n.materials),A=v(n.textures),C=v(n.images),P=v(n.shapes),I=v(n.skeletons),F=v(n.animations),W=v(n.nodes);M.length>0&&(l.geometries=M),T.length>0&&(l.materials=T),A.length>0&&(l.textures=A),C.length>0&&(l.images=C),P.length>0&&(l.shapes=P),I.length>0&&(l.skeletons=I),F.length>0&&(l.animations=F),W.length>0&&(l.nodes=W)}return l.object=d,l;function v(M){const T=[];for(const A in M){const C=M[A];delete C.metadata,T.push(C)}return T}}clone(n){return new this.constructor().copy(this,n)}copy(n,s=!0){if(this.name=n.name,this.up.copy(n.up),this.position.copy(n.position),this.rotation.order=n.rotation.order,this.quaternion.copy(n.quaternion),this.scale.copy(n.scale),this.matrix.copy(n.matrix),this.matrixWorld.copy(n.matrixWorld),this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrixWorldAutoUpdate=n.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=n.matrixWorldNeedsUpdate,this.layers.mask=n.layers.mask,this.visible=n.visible,this.castShadow=n.castShadow,this.receiveShadow=n.receiveShadow,this.frustumCulled=n.frustumCulled,this.renderOrder=n.renderOrder,this.animations=n.animations.slice(),this.userData=JSON.parse(JSON.stringify(n.userData)),s===!0)for(let l=0;l<n.children.length;l++){const d=n.children[l];this.add(d.clone())}return this}}yr.DEFAULT_UP=new Se(0,1,0);yr.DEFAULT_MATRIX_AUTO_UPDATE=!0;yr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const es=new Se,Ps=new Se,xf=new Se,Is=new Se,jo=new Se,Qo=new Se,c0=new Se,vf=new Se,yf=new Se,Mf=new Se,Sf=new di,Ef=new di,bf=new di;class ts{constructor(n=new Se,s=new Se,l=new Se){this.a=n,this.b=s,this.c=l}static getNormal(n,s,l,d){d.subVectors(l,s),es.subVectors(n,s),d.cross(es);const m=d.lengthSq();return m>0?d.multiplyScalar(1/Math.sqrt(m)):d.set(0,0,0)}static getBarycoord(n,s,l,d,m){es.subVectors(d,s),Ps.subVectors(l,s),xf.subVectors(n,s);const v=es.dot(es),M=es.dot(Ps),T=es.dot(xf),A=Ps.dot(Ps),C=Ps.dot(xf),P=v*A-M*M;if(P===0)return m.set(0,0,0),null;const I=1/P,F=(A*T-M*C)*I,W=(v*C-M*T)*I;return m.set(1-F-W,W,F)}static containsPoint(n,s,l,d){return this.getBarycoord(n,s,l,d,Is)===null?!1:Is.x>=0&&Is.y>=0&&Is.x+Is.y<=1}static getInterpolation(n,s,l,d,m,v,M,T){return this.getBarycoord(n,s,l,d,Is)===null?(T.x=0,T.y=0,"z"in T&&(T.z=0),"w"in T&&(T.w=0),null):(T.setScalar(0),T.addScaledVector(m,Is.x),T.addScaledVector(v,Is.y),T.addScaledVector(M,Is.z),T)}static getInterpolatedAttribute(n,s,l,d,m,v){return Sf.setScalar(0),Ef.setScalar(0),bf.setScalar(0),Sf.fromBufferAttribute(n,s),Ef.fromBufferAttribute(n,l),bf.fromBufferAttribute(n,d),v.setScalar(0),v.addScaledVector(Sf,m.x),v.addScaledVector(Ef,m.y),v.addScaledVector(bf,m.z),v}static isFrontFacing(n,s,l,d){return es.subVectors(l,s),Ps.subVectors(n,s),es.cross(Ps).dot(d)<0}set(n,s,l){return this.a.copy(n),this.b.copy(s),this.c.copy(l),this}setFromPointsAndIndices(n,s,l,d){return this.a.copy(n[s]),this.b.copy(n[l]),this.c.copy(n[d]),this}setFromAttributeAndIndices(n,s,l,d){return this.a.fromBufferAttribute(n,s),this.b.fromBufferAttribute(n,l),this.c.fromBufferAttribute(n,d),this}clone(){return new this.constructor().copy(this)}copy(n){return this.a.copy(n.a),this.b.copy(n.b),this.c.copy(n.c),this}getArea(){return es.subVectors(this.c,this.b),Ps.subVectors(this.a,this.b),es.cross(Ps).length()*.5}getMidpoint(n){return n.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(n){return ts.getNormal(this.a,this.b,this.c,n)}getPlane(n){return n.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(n,s){return ts.getBarycoord(n,this.a,this.b,this.c,s)}getInterpolation(n,s,l,d,m){return ts.getInterpolation(n,this.a,this.b,this.c,s,l,d,m)}containsPoint(n){return ts.containsPoint(n,this.a,this.b,this.c)}isFrontFacing(n){return ts.isFrontFacing(this.a,this.b,this.c,n)}intersectsBox(n){return n.intersectsTriangle(this)}closestPointToPoint(n,s){const l=this.a,d=this.b,m=this.c;let v,M;jo.subVectors(d,l),Qo.subVectors(m,l),vf.subVectors(n,l);const T=jo.dot(vf),A=Qo.dot(vf);if(T<=0&&A<=0)return s.copy(l);yf.subVectors(n,d);const C=jo.dot(yf),P=Qo.dot(yf);if(C>=0&&P<=C)return s.copy(d);const I=T*P-C*A;if(I<=0&&T>=0&&C<=0)return v=T/(T-C),s.copy(l).addScaledVector(jo,v);Mf.subVectors(n,m);const F=jo.dot(Mf),W=Qo.dot(Mf);if(W>=0&&F<=W)return s.copy(m);const Y=F*A-T*W;if(Y<=0&&A>=0&&W<=0)return M=A/(A-W),s.copy(l).addScaledVector(Qo,M);const U=C*W-F*P;if(U<=0&&P-C>=0&&F-W>=0)return c0.subVectors(m,d),M=(P-C)/(P-C+(F-W)),s.copy(d).addScaledVector(c0,M);const R=1/(U+Y+I);return v=Y*R,M=I*R,s.copy(l).addScaledVector(jo,v).addScaledVector(Qo,M)}equals(n){return n.a.equals(this.a)&&n.b.equals(this.b)&&n.c.equals(this.c)}}const px={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},sa={h:0,s:0,l:0},nu={h:0,s:0,l:0};function Tf(u,n,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?u+(n-u)*6*s:s<1/2?n:s<2/3?u+(n-u)*6*(2/3-s):u}class Yn{constructor(n,s,l){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(n,s,l)}set(n,s,l){if(s===void 0&&l===void 0){const d=n;d&&d.isColor?this.copy(d):typeof d=="number"?this.setHex(d):typeof d=="string"&&this.setStyle(d)}else this.setRGB(n,s,l);return this}setScalar(n){return this.r=n,this.g=n,this.b=n,this}setHex(n,s=Nr){return n=Math.floor(n),this.r=(n>>16&255)/255,this.g=(n>>8&255)/255,this.b=(n&255)/255,ni.toWorkingColorSpace(this,s),this}setRGB(n,s,l,d=ni.workingColorSpace){return this.r=n,this.g=s,this.b=l,ni.toWorkingColorSpace(this,d),this}setHSL(n,s,l,d=ni.workingColorSpace){if(n=XT(n,1),s=Gn(s,0,1),l=Gn(l,0,1),s===0)this.r=this.g=this.b=l;else{const m=l<=.5?l*(1+s):l+s-l*s,v=2*l-m;this.r=Tf(v,m,n+1/3),this.g=Tf(v,m,n),this.b=Tf(v,m,n-1/3)}return ni.toWorkingColorSpace(this,d),this}setStyle(n,s=Nr){function l(m){m!==void 0&&parseFloat(m)<1&&console.warn("THREE.Color: Alpha component of "+n+" will be ignored.")}let d;if(d=/^(\w+)\(([^\)]*)\)/.exec(n)){let m;const v=d[1],M=d[2];switch(v){case"rgb":case"rgba":if(m=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M))return l(m[4]),this.setRGB(Math.min(255,parseInt(m[1],10))/255,Math.min(255,parseInt(m[2],10))/255,Math.min(255,parseInt(m[3],10))/255,s);if(m=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M))return l(m[4]),this.setRGB(Math.min(100,parseInt(m[1],10))/100,Math.min(100,parseInt(m[2],10))/100,Math.min(100,parseInt(m[3],10))/100,s);break;case"hsl":case"hsla":if(m=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(M))return l(m[4]),this.setHSL(parseFloat(m[1])/360,parseFloat(m[2])/100,parseFloat(m[3])/100,s);break;default:console.warn("THREE.Color: Unknown color model "+n)}}else if(d=/^\#([A-Fa-f\d]+)$/.exec(n)){const m=d[1],v=m.length;if(v===3)return this.setRGB(parseInt(m.charAt(0),16)/15,parseInt(m.charAt(1),16)/15,parseInt(m.charAt(2),16)/15,s);if(v===6)return this.setHex(parseInt(m,16),s);console.warn("THREE.Color: Invalid hex color "+n)}else if(n&&n.length>0)return this.setColorName(n,s);return this}setColorName(n,s=Nr){const l=px[n.toLowerCase()];return l!==void 0?this.setHex(l,s):console.warn("THREE.Color: Unknown color "+n),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(n){return this.r=n.r,this.g=n.g,this.b=n.b,this}copySRGBToLinear(n){return this.r=Ns(n.r),this.g=Ns(n.g),this.b=Ns(n.b),this}copyLinearToSRGB(n){return this.r=cc(n.r),this.g=cc(n.g),this.b=cc(n.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(n=Nr){return ni.fromWorkingColorSpace(tr.copy(this),n),Math.round(Gn(tr.r*255,0,255))*65536+Math.round(Gn(tr.g*255,0,255))*256+Math.round(Gn(tr.b*255,0,255))}getHexString(n=Nr){return("000000"+this.getHex(n).toString(16)).slice(-6)}getHSL(n,s=ni.workingColorSpace){ni.fromWorkingColorSpace(tr.copy(this),s);const l=tr.r,d=tr.g,m=tr.b,v=Math.max(l,d,m),M=Math.min(l,d,m);let T,A;const C=(M+v)/2;if(M===v)T=0,A=0;else{const P=v-M;switch(A=C<=.5?P/(v+M):P/(2-v-M),v){case l:T=(d-m)/P+(d<m?6:0);break;case d:T=(m-l)/P+2;break;case m:T=(l-d)/P+4;break}T/=6}return n.h=T,n.s=A,n.l=C,n}getRGB(n,s=ni.workingColorSpace){return ni.fromWorkingColorSpace(tr.copy(this),s),n.r=tr.r,n.g=tr.g,n.b=tr.b,n}getStyle(n=Nr){ni.fromWorkingColorSpace(tr.copy(this),n);const s=tr.r,l=tr.g,d=tr.b;return n!==Nr?`color(${n} ${s.toFixed(3)} ${l.toFixed(3)} ${d.toFixed(3)})`:`rgb(${Math.round(s*255)},${Math.round(l*255)},${Math.round(d*255)})`}offsetHSL(n,s,l){return this.getHSL(sa),this.setHSL(sa.h+n,sa.s+s,sa.l+l)}add(n){return this.r+=n.r,this.g+=n.g,this.b+=n.b,this}addColors(n,s){return this.r=n.r+s.r,this.g=n.g+s.g,this.b=n.b+s.b,this}addScalar(n){return this.r+=n,this.g+=n,this.b+=n,this}sub(n){return this.r=Math.max(0,this.r-n.r),this.g=Math.max(0,this.g-n.g),this.b=Math.max(0,this.b-n.b),this}multiply(n){return this.r*=n.r,this.g*=n.g,this.b*=n.b,this}multiplyScalar(n){return this.r*=n,this.g*=n,this.b*=n,this}lerp(n,s){return this.r+=(n.r-this.r)*s,this.g+=(n.g-this.g)*s,this.b+=(n.b-this.b)*s,this}lerpColors(n,s,l){return this.r=n.r+(s.r-n.r)*l,this.g=n.g+(s.g-n.g)*l,this.b=n.b+(s.b-n.b)*l,this}lerpHSL(n,s){this.getHSL(sa),n.getHSL(nu);const l=cf(sa.h,nu.h,s),d=cf(sa.s,nu.s,s),m=cf(sa.l,nu.l,s);return this.setHSL(l,d,m),this}setFromVector3(n){return this.r=n.x,this.g=n.y,this.b=n.z,this}applyMatrix3(n){const s=this.r,l=this.g,d=this.b,m=n.elements;return this.r=m[0]*s+m[3]*l+m[6]*d,this.g=m[1]*s+m[4]*l+m[7]*d,this.b=m[2]*s+m[5]*l+m[8]*d,this}equals(n){return n.r===this.r&&n.g===this.g&&n.b===this.b}fromArray(n,s=0){return this.r=n[s],this.g=n[s+1],this.b=n[s+2],this}toArray(n=[],s=0){return n[s]=this.r,n[s+1]=this.g,n[s+2]=this.b,n}fromBufferAttribute(n,s){return this.r=n.getX(s),this.g=n.getY(s),this.b=n.getZ(s),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const tr=new Yn;Yn.NAMES=px;let hA=0;class Au extends _c{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:hA++}),this.uuid=gl(),this.name="",this.type="Material",this.blending=ac,this.side=Fs,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Bf,this.blendDst=zf,this.blendEquation=Qa,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Yn(0,0,0),this.blendAlpha=0,this.depthFunc=lc,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Z_,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Wo,this.stencilZFail=Wo,this.stencilZPass=Wo,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(n){this._alphaTest>0!=n>0&&this.version++,this._alphaTest=n}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(n){if(n!==void 0)for(const s in n){const l=n[s];if(l===void 0){console.warn(`THREE.Material: parameter '${s}' has value of undefined.`);continue}const d=this[s];if(d===void 0){console.warn(`THREE.Material: '${s}' is not a property of THREE.${this.type}.`);continue}d&&d.isColor?d.set(l):d&&d.isVector3&&l&&l.isVector3?d.copy(l):this[s]=l}}toJSON(n){const s=n===void 0||typeof n=="string";s&&(n={textures:{},images:{}});const l={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};l.uuid=this.uuid,l.type=this.type,this.name!==""&&(l.name=this.name),this.color&&this.color.isColor&&(l.color=this.color.getHex()),this.roughness!==void 0&&(l.roughness=this.roughness),this.metalness!==void 0&&(l.metalness=this.metalness),this.sheen!==void 0&&(l.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(l.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(l.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(l.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(l.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(l.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(l.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(l.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(l.shininess=this.shininess),this.clearcoat!==void 0&&(l.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(l.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(l.clearcoatMap=this.clearcoatMap.toJSON(n).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(l.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(n).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(l.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(n).uuid,l.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(l.dispersion=this.dispersion),this.iridescence!==void 0&&(l.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(l.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(l.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(l.iridescenceMap=this.iridescenceMap.toJSON(n).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(l.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(n).uuid),this.anisotropy!==void 0&&(l.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(l.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(l.anisotropyMap=this.anisotropyMap.toJSON(n).uuid),this.map&&this.map.isTexture&&(l.map=this.map.toJSON(n).uuid),this.matcap&&this.matcap.isTexture&&(l.matcap=this.matcap.toJSON(n).uuid),this.alphaMap&&this.alphaMap.isTexture&&(l.alphaMap=this.alphaMap.toJSON(n).uuid),this.lightMap&&this.lightMap.isTexture&&(l.lightMap=this.lightMap.toJSON(n).uuid,l.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(l.aoMap=this.aoMap.toJSON(n).uuid,l.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(l.bumpMap=this.bumpMap.toJSON(n).uuid,l.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(l.normalMap=this.normalMap.toJSON(n).uuid,l.normalMapType=this.normalMapType,l.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(l.displacementMap=this.displacementMap.toJSON(n).uuid,l.displacementScale=this.displacementScale,l.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(l.roughnessMap=this.roughnessMap.toJSON(n).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(l.metalnessMap=this.metalnessMap.toJSON(n).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(l.emissiveMap=this.emissiveMap.toJSON(n).uuid),this.specularMap&&this.specularMap.isTexture&&(l.specularMap=this.specularMap.toJSON(n).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(l.specularIntensityMap=this.specularIntensityMap.toJSON(n).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(l.specularColorMap=this.specularColorMap.toJSON(n).uuid),this.envMap&&this.envMap.isTexture&&(l.envMap=this.envMap.toJSON(n).uuid,this.combine!==void 0&&(l.combine=this.combine)),this.envMapRotation!==void 0&&(l.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(l.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(l.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(l.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(l.gradientMap=this.gradientMap.toJSON(n).uuid),this.transmission!==void 0&&(l.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(l.transmissionMap=this.transmissionMap.toJSON(n).uuid),this.thickness!==void 0&&(l.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(l.thicknessMap=this.thicknessMap.toJSON(n).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(l.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(l.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(l.size=this.size),this.shadowSide!==null&&(l.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(l.sizeAttenuation=this.sizeAttenuation),this.blending!==ac&&(l.blending=this.blending),this.side!==Fs&&(l.side=this.side),this.vertexColors===!0&&(l.vertexColors=!0),this.opacity<1&&(l.opacity=this.opacity),this.transparent===!0&&(l.transparent=!0),this.blendSrc!==Bf&&(l.blendSrc=this.blendSrc),this.blendDst!==zf&&(l.blendDst=this.blendDst),this.blendEquation!==Qa&&(l.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(l.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(l.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(l.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(l.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(l.blendAlpha=this.blendAlpha),this.depthFunc!==lc&&(l.depthFunc=this.depthFunc),this.depthTest===!1&&(l.depthTest=this.depthTest),this.depthWrite===!1&&(l.depthWrite=this.depthWrite),this.colorWrite===!1&&(l.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(l.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Z_&&(l.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(l.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(l.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Wo&&(l.stencilFail=this.stencilFail),this.stencilZFail!==Wo&&(l.stencilZFail=this.stencilZFail),this.stencilZPass!==Wo&&(l.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(l.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(l.rotation=this.rotation),this.polygonOffset===!0&&(l.polygonOffset=!0),this.polygonOffsetFactor!==0&&(l.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(l.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(l.linewidth=this.linewidth),this.dashSize!==void 0&&(l.dashSize=this.dashSize),this.gapSize!==void 0&&(l.gapSize=this.gapSize),this.scale!==void 0&&(l.scale=this.scale),this.dithering===!0&&(l.dithering=!0),this.alphaTest>0&&(l.alphaTest=this.alphaTest),this.alphaHash===!0&&(l.alphaHash=!0),this.alphaToCoverage===!0&&(l.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(l.premultipliedAlpha=!0),this.forceSinglePass===!0&&(l.forceSinglePass=!0),this.wireframe===!0&&(l.wireframe=!0),this.wireframeLinewidth>1&&(l.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(l.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(l.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(l.flatShading=!0),this.visible===!1&&(l.visible=!1),this.toneMapped===!1&&(l.toneMapped=!1),this.fog===!1&&(l.fog=!1),Object.keys(this.userData).length>0&&(l.userData=this.userData);function d(m){const v=[];for(const M in m){const T=m[M];delete T.metadata,v.push(T)}return v}if(s){const m=d(n.textures),v=d(n.images);m.length>0&&(l.textures=m),v.length>0&&(l.images=v)}return l}clone(){return new this.constructor().copy(this)}copy(n){this.name=n.name,this.blending=n.blending,this.side=n.side,this.vertexColors=n.vertexColors,this.opacity=n.opacity,this.transparent=n.transparent,this.blendSrc=n.blendSrc,this.blendDst=n.blendDst,this.blendEquation=n.blendEquation,this.blendSrcAlpha=n.blendSrcAlpha,this.blendDstAlpha=n.blendDstAlpha,this.blendEquationAlpha=n.blendEquationAlpha,this.blendColor.copy(n.blendColor),this.blendAlpha=n.blendAlpha,this.depthFunc=n.depthFunc,this.depthTest=n.depthTest,this.depthWrite=n.depthWrite,this.stencilWriteMask=n.stencilWriteMask,this.stencilFunc=n.stencilFunc,this.stencilRef=n.stencilRef,this.stencilFuncMask=n.stencilFuncMask,this.stencilFail=n.stencilFail,this.stencilZFail=n.stencilZFail,this.stencilZPass=n.stencilZPass,this.stencilWrite=n.stencilWrite;const s=n.clippingPlanes;let l=null;if(s!==null){const d=s.length;l=new Array(d);for(let m=0;m!==d;++m)l[m]=s[m].clone()}return this.clippingPlanes=l,this.clipIntersection=n.clipIntersection,this.clipShadows=n.clipShadows,this.shadowSide=n.shadowSide,this.colorWrite=n.colorWrite,this.precision=n.precision,this.polygonOffset=n.polygonOffset,this.polygonOffsetFactor=n.polygonOffsetFactor,this.polygonOffsetUnits=n.polygonOffsetUnits,this.dithering=n.dithering,this.alphaTest=n.alphaTest,this.alphaHash=n.alphaHash,this.alphaToCoverage=n.alphaToCoverage,this.premultipliedAlpha=n.premultipliedAlpha,this.forceSinglePass=n.forceSinglePass,this.visible=n.visible,this.toneMapped=n.toneMapped,this.userData=JSON.parse(JSON.stringify(n.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(n){n===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class mx extends Au{constructor(n){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Yn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Bs,this.combine=J0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(n)}copy(n){return super.copy(n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapRotation.copy(n.envMapRotation),this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.fog=n.fog,this}}const Di=new Se,iu=new ii;class ds{constructor(n,s,l=!1){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=n,this.itemSize=s,this.count=n!==void 0?n.length/s:0,this.normalized=l,this.usage=$_,this.updateRanges=[],this.gpuType=Ds,this.version=0}onUploadCallback(){}set needsUpdate(n){n===!0&&this.version++}setUsage(n){return this.usage=n,this}addUpdateRange(n,s){this.updateRanges.push({start:n,count:s})}clearUpdateRanges(){this.updateRanges.length=0}copy(n){return this.name=n.name,this.array=new n.array.constructor(n.array),this.itemSize=n.itemSize,this.count=n.count,this.normalized=n.normalized,this.usage=n.usage,this.gpuType=n.gpuType,this}copyAt(n,s,l){n*=this.itemSize,l*=s.itemSize;for(let d=0,m=this.itemSize;d<m;d++)this.array[n+d]=s.array[l+d];return this}copyArray(n){return this.array.set(n),this}applyMatrix3(n){if(this.itemSize===2)for(let s=0,l=this.count;s<l;s++)iu.fromBufferAttribute(this,s),iu.applyMatrix3(n),this.setXY(s,iu.x,iu.y);else if(this.itemSize===3)for(let s=0,l=this.count;s<l;s++)Di.fromBufferAttribute(this,s),Di.applyMatrix3(n),this.setXYZ(s,Di.x,Di.y,Di.z);return this}applyMatrix4(n){for(let s=0,l=this.count;s<l;s++)Di.fromBufferAttribute(this,s),Di.applyMatrix4(n),this.setXYZ(s,Di.x,Di.y,Di.z);return this}applyNormalMatrix(n){for(let s=0,l=this.count;s<l;s++)Di.fromBufferAttribute(this,s),Di.applyNormalMatrix(n),this.setXYZ(s,Di.x,Di.y,Di.z);return this}transformDirection(n){for(let s=0,l=this.count;s<l;s++)Di.fromBufferAttribute(this,s),Di.transformDirection(n),this.setXYZ(s,Di.x,Di.y,Di.z);return this}set(n,s=0){return this.array.set(n,s),this}getComponent(n,s){let l=this.array[n*this.itemSize+s];return this.normalized&&(l=sl(l,this.array)),l}setComponent(n,s,l){return this.normalized&&(l=xr(l,this.array)),this.array[n*this.itemSize+s]=l,this}getX(n){let s=this.array[n*this.itemSize];return this.normalized&&(s=sl(s,this.array)),s}setX(n,s){return this.normalized&&(s=xr(s,this.array)),this.array[n*this.itemSize]=s,this}getY(n){let s=this.array[n*this.itemSize+1];return this.normalized&&(s=sl(s,this.array)),s}setY(n,s){return this.normalized&&(s=xr(s,this.array)),this.array[n*this.itemSize+1]=s,this}getZ(n){let s=this.array[n*this.itemSize+2];return this.normalized&&(s=sl(s,this.array)),s}setZ(n,s){return this.normalized&&(s=xr(s,this.array)),this.array[n*this.itemSize+2]=s,this}getW(n){let s=this.array[n*this.itemSize+3];return this.normalized&&(s=sl(s,this.array)),s}setW(n,s){return this.normalized&&(s=xr(s,this.array)),this.array[n*this.itemSize+3]=s,this}setXY(n,s,l){return n*=this.itemSize,this.normalized&&(s=xr(s,this.array),l=xr(l,this.array)),this.array[n+0]=s,this.array[n+1]=l,this}setXYZ(n,s,l,d){return n*=this.itemSize,this.normalized&&(s=xr(s,this.array),l=xr(l,this.array),d=xr(d,this.array)),this.array[n+0]=s,this.array[n+1]=l,this.array[n+2]=d,this}setXYZW(n,s,l,d,m){return n*=this.itemSize,this.normalized&&(s=xr(s,this.array),l=xr(l,this.array),d=xr(d,this.array),m=xr(m,this.array)),this.array[n+0]=s,this.array[n+1]=l,this.array[n+2]=d,this.array[n+3]=m,this}onUpload(n){return this.onUploadCallback=n,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const n={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(n.name=this.name),this.usage!==$_&&(n.usage=this.usage),n}}class gx extends ds{constructor(n,s,l){super(new Uint16Array(n),s,l)}}class _x extends ds{constructor(n,s,l){super(new Uint32Array(n),s,l)}}class ua extends ds{constructor(n,s,l){super(new Float32Array(n),s,l)}}let uA=0;const Ur=new Mi,Af=new yr,ec=new Se,wr=new xl,ll=new xl,Hi=new Se;class so extends _c{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:uA++}),this.uuid=gl(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(n){return Array.isArray(n)?this.index=new(hx(n)?_x:gx)(n,1):this.index=n,this}setIndirect(n){return this.indirect=n,this}getIndirect(){return this.indirect}getAttribute(n){return this.attributes[n]}setAttribute(n,s){return this.attributes[n]=s,this}deleteAttribute(n){return delete this.attributes[n],this}hasAttribute(n){return this.attributes[n]!==void 0}addGroup(n,s,l=0){this.groups.push({start:n,count:s,materialIndex:l})}clearGroups(){this.groups=[]}setDrawRange(n,s){this.drawRange.start=n,this.drawRange.count=s}applyMatrix4(n){const s=this.attributes.position;s!==void 0&&(s.applyMatrix4(n),s.needsUpdate=!0);const l=this.attributes.normal;if(l!==void 0){const m=new Un().getNormalMatrix(n);l.applyNormalMatrix(m),l.needsUpdate=!0}const d=this.attributes.tangent;return d!==void 0&&(d.transformDirection(n),d.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(n){return Ur.makeRotationFromQuaternion(n),this.applyMatrix4(Ur),this}rotateX(n){return Ur.makeRotationX(n),this.applyMatrix4(Ur),this}rotateY(n){return Ur.makeRotationY(n),this.applyMatrix4(Ur),this}rotateZ(n){return Ur.makeRotationZ(n),this.applyMatrix4(Ur),this}translate(n,s,l){return Ur.makeTranslation(n,s,l),this.applyMatrix4(Ur),this}scale(n,s,l){return Ur.makeScale(n,s,l),this.applyMatrix4(Ur),this}lookAt(n){return Af.lookAt(n),Af.updateMatrix(),this.applyMatrix4(Af.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ec).negate(),this.translate(ec.x,ec.y,ec.z),this}setFromPoints(n){const s=this.getAttribute("position");if(s===void 0){const l=[];for(let d=0,m=n.length;d<m;d++){const v=n[d];l.push(v.x,v.y,v.z||0)}this.setAttribute("position",new ua(l,3))}else{const l=Math.min(n.length,s.count);for(let d=0;d<l;d++){const m=n[d];s.setXYZ(d,m.x,m.y,m.z||0)}n.length>s.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),s.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new xl);const n=this.attributes.position,s=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new Se(-1/0,-1/0,-1/0),new Se(1/0,1/0,1/0));return}if(n!==void 0){if(this.boundingBox.setFromBufferAttribute(n),s)for(let l=0,d=s.length;l<d;l++){const m=s[l];wr.setFromBufferAttribute(m),this.morphTargetsRelative?(Hi.addVectors(this.boundingBox.min,wr.min),this.boundingBox.expandByPoint(Hi),Hi.addVectors(this.boundingBox.max,wr.max),this.boundingBox.expandByPoint(Hi)):(this.boundingBox.expandByPoint(wr.min),this.boundingBox.expandByPoint(wr.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Lp);const n=this.attributes.position,s=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new Se,1/0);return}if(n){const l=this.boundingSphere.center;if(wr.setFromBufferAttribute(n),s)for(let m=0,v=s.length;m<v;m++){const M=s[m];ll.setFromBufferAttribute(M),this.morphTargetsRelative?(Hi.addVectors(wr.min,ll.min),wr.expandByPoint(Hi),Hi.addVectors(wr.max,ll.max),wr.expandByPoint(Hi)):(wr.expandByPoint(ll.min),wr.expandByPoint(ll.max))}wr.getCenter(l);let d=0;for(let m=0,v=n.count;m<v;m++)Hi.fromBufferAttribute(n,m),d=Math.max(d,l.distanceToSquared(Hi));if(s)for(let m=0,v=s.length;m<v;m++){const M=s[m],T=this.morphTargetsRelative;for(let A=0,C=M.count;A<C;A++)Hi.fromBufferAttribute(M,A),T&&(ec.fromBufferAttribute(n,A),Hi.add(ec)),d=Math.max(d,l.distanceToSquared(Hi))}this.boundingSphere.radius=Math.sqrt(d),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const n=this.index,s=this.attributes;if(n===null||s.position===void 0||s.normal===void 0||s.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const l=s.position,d=s.normal,m=s.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ds(new Float32Array(4*l.count),4));const v=this.getAttribute("tangent"),M=[],T=[];for(let ve=0;ve<l.count;ve++)M[ve]=new Se,T[ve]=new Se;const A=new Se,C=new Se,P=new Se,I=new ii,F=new ii,W=new ii,Y=new Se,U=new Se;function R(ve,K,q){A.fromBufferAttribute(l,ve),C.fromBufferAttribute(l,K),P.fromBufferAttribute(l,q),I.fromBufferAttribute(m,ve),F.fromBufferAttribute(m,K),W.fromBufferAttribute(m,q),C.sub(A),P.sub(A),F.sub(I),W.sub(I);const he=1/(F.x*W.y-W.x*F.y);isFinite(he)&&(Y.copy(C).multiplyScalar(W.y).addScaledVector(P,-F.y).multiplyScalar(he),U.copy(P).multiplyScalar(F.x).addScaledVector(C,-W.x).multiplyScalar(he),M[ve].add(Y),M[K].add(Y),M[q].add(Y),T[ve].add(U),T[K].add(U),T[q].add(U))}let oe=this.groups;oe.length===0&&(oe=[{start:0,count:n.count}]);for(let ve=0,K=oe.length;ve<K;++ve){const q=oe[ve],he=q.start,Ne=q.count;for(let Ie=he,Je=he+Ne;Ie<Je;Ie+=3)R(n.getX(Ie+0),n.getX(Ie+1),n.getX(Ie+2))}const se=new Se,ee=new Se,xe=new Se,de=new Se;function le(ve){xe.fromBufferAttribute(d,ve),de.copy(xe);const K=M[ve];se.copy(K),se.sub(xe.multiplyScalar(xe.dot(K))).normalize(),ee.crossVectors(de,K);const he=ee.dot(T[ve])<0?-1:1;v.setXYZW(ve,se.x,se.y,se.z,he)}for(let ve=0,K=oe.length;ve<K;++ve){const q=oe[ve],he=q.start,Ne=q.count;for(let Ie=he,Je=he+Ne;Ie<Je;Ie+=3)le(n.getX(Ie+0)),le(n.getX(Ie+1)),le(n.getX(Ie+2))}}computeVertexNormals(){const n=this.index,s=this.getAttribute("position");if(s!==void 0){let l=this.getAttribute("normal");if(l===void 0)l=new ds(new Float32Array(s.count*3),3),this.setAttribute("normal",l);else for(let I=0,F=l.count;I<F;I++)l.setXYZ(I,0,0,0);const d=new Se,m=new Se,v=new Se,M=new Se,T=new Se,A=new Se,C=new Se,P=new Se;if(n)for(let I=0,F=n.count;I<F;I+=3){const W=n.getX(I+0),Y=n.getX(I+1),U=n.getX(I+2);d.fromBufferAttribute(s,W),m.fromBufferAttribute(s,Y),v.fromBufferAttribute(s,U),C.subVectors(v,m),P.subVectors(d,m),C.cross(P),M.fromBufferAttribute(l,W),T.fromBufferAttribute(l,Y),A.fromBufferAttribute(l,U),M.add(C),T.add(C),A.add(C),l.setXYZ(W,M.x,M.y,M.z),l.setXYZ(Y,T.x,T.y,T.z),l.setXYZ(U,A.x,A.y,A.z)}else for(let I=0,F=s.count;I<F;I+=3)d.fromBufferAttribute(s,I+0),m.fromBufferAttribute(s,I+1),v.fromBufferAttribute(s,I+2),C.subVectors(v,m),P.subVectors(d,m),C.cross(P),l.setXYZ(I+0,C.x,C.y,C.z),l.setXYZ(I+1,C.x,C.y,C.z),l.setXYZ(I+2,C.x,C.y,C.z);this.normalizeNormals(),l.needsUpdate=!0}}normalizeNormals(){const n=this.attributes.normal;for(let s=0,l=n.count;s<l;s++)Hi.fromBufferAttribute(n,s),Hi.normalize(),n.setXYZ(s,Hi.x,Hi.y,Hi.z)}toNonIndexed(){function n(M,T){const A=M.array,C=M.itemSize,P=M.normalized,I=new A.constructor(T.length*C);let F=0,W=0;for(let Y=0,U=T.length;Y<U;Y++){M.isInterleavedBufferAttribute?F=T[Y]*M.data.stride+M.offset:F=T[Y]*C;for(let R=0;R<C;R++)I[W++]=A[F++]}return new ds(I,C,P)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const s=new so,l=this.index.array,d=this.attributes;for(const M in d){const T=d[M],A=n(T,l);s.setAttribute(M,A)}const m=this.morphAttributes;for(const M in m){const T=[],A=m[M];for(let C=0,P=A.length;C<P;C++){const I=A[C],F=n(I,l);T.push(F)}s.morphAttributes[M]=T}s.morphTargetsRelative=this.morphTargetsRelative;const v=this.groups;for(let M=0,T=v.length;M<T;M++){const A=v[M];s.addGroup(A.start,A.count,A.materialIndex)}return s}toJSON(){const n={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),Object.keys(this.userData).length>0&&(n.userData=this.userData),this.parameters!==void 0){const T=this.parameters;for(const A in T)T[A]!==void 0&&(n[A]=T[A]);return n}n.data={attributes:{}};const s=this.index;s!==null&&(n.data.index={type:s.array.constructor.name,array:Array.prototype.slice.call(s.array)});const l=this.attributes;for(const T in l){const A=l[T];n.data.attributes[T]=A.toJSON(n.data)}const d={};let m=!1;for(const T in this.morphAttributes){const A=this.morphAttributes[T],C=[];for(let P=0,I=A.length;P<I;P++){const F=A[P];C.push(F.toJSON(n.data))}C.length>0&&(d[T]=C,m=!0)}m&&(n.data.morphAttributes=d,n.data.morphTargetsRelative=this.morphTargetsRelative);const v=this.groups;v.length>0&&(n.data.groups=JSON.parse(JSON.stringify(v)));const M=this.boundingSphere;return M!==null&&(n.data.boundingSphere={center:M.center.toArray(),radius:M.radius}),n}clone(){return new this.constructor().copy(this)}copy(n){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const s={};this.name=n.name;const l=n.index;l!==null&&this.setIndex(l.clone(s));const d=n.attributes;for(const A in d){const C=d[A];this.setAttribute(A,C.clone(s))}const m=n.morphAttributes;for(const A in m){const C=[],P=m[A];for(let I=0,F=P.length;I<F;I++)C.push(P[I].clone(s));this.morphAttributes[A]=C}this.morphTargetsRelative=n.morphTargetsRelative;const v=n.groups;for(let A=0,C=v.length;A<C;A++){const P=v[A];this.addGroup(P.start,P.count,P.materialIndex)}const M=n.boundingBox;M!==null&&(this.boundingBox=M.clone());const T=n.boundingSphere;return T!==null&&(this.boundingSphere=T.clone()),this.drawRange.start=n.drawRange.start,this.drawRange.count=n.drawRange.count,this.userData=n.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const l0=new Mi,qa=new iA,ru=new Lp,h0=new Se,su=new Se,au=new Se,ou=new Se,wf=new Se,cu=new Se,u0=new Se,lu=new Se;class Rr extends yr{constructor(n=new so,s=new mx){super(),this.isMesh=!0,this.type="Mesh",this.geometry=n,this.material=s,this.updateMorphTargets()}copy(n,s){return super.copy(n,s),n.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=n.morphTargetInfluences.slice()),n.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},n.morphTargetDictionary)),this.material=Array.isArray(n.material)?n.material.slice():n.material,this.geometry=n.geometry,this}updateMorphTargets(){const s=this.geometry.morphAttributes,l=Object.keys(s);if(l.length>0){const d=s[l[0]];if(d!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let m=0,v=d.length;m<v;m++){const M=d[m].name||String(m);this.morphTargetInfluences.push(0),this.morphTargetDictionary[M]=m}}}}getVertexPosition(n,s){const l=this.geometry,d=l.attributes.position,m=l.morphAttributes.position,v=l.morphTargetsRelative;s.fromBufferAttribute(d,n);const M=this.morphTargetInfluences;if(m&&M){cu.set(0,0,0);for(let T=0,A=m.length;T<A;T++){const C=M[T],P=m[T];C!==0&&(wf.fromBufferAttribute(P,n),v?cu.addScaledVector(wf,C):cu.addScaledVector(wf.sub(s),C))}s.add(cu)}return s}raycast(n,s){const l=this.geometry,d=this.material,m=this.matrixWorld;d!==void 0&&(l.boundingSphere===null&&l.computeBoundingSphere(),ru.copy(l.boundingSphere),ru.applyMatrix4(m),qa.copy(n.ray).recast(n.near),!(ru.containsPoint(qa.origin)===!1&&(qa.intersectSphere(ru,h0)===null||qa.origin.distanceToSquared(h0)>(n.far-n.near)**2))&&(l0.copy(m).invert(),qa.copy(n.ray).applyMatrix4(l0),!(l.boundingBox!==null&&qa.intersectsBox(l.boundingBox)===!1)&&this._computeIntersections(n,s,qa)))}_computeIntersections(n,s,l){let d;const m=this.geometry,v=this.material,M=m.index,T=m.attributes.position,A=m.attributes.uv,C=m.attributes.uv1,P=m.attributes.normal,I=m.groups,F=m.drawRange;if(M!==null)if(Array.isArray(v))for(let W=0,Y=I.length;W<Y;W++){const U=I[W],R=v[U.materialIndex],oe=Math.max(U.start,F.start),se=Math.min(M.count,Math.min(U.start+U.count,F.start+F.count));for(let ee=oe,xe=se;ee<xe;ee+=3){const de=M.getX(ee),le=M.getX(ee+1),ve=M.getX(ee+2);d=hu(this,R,n,l,A,C,P,de,le,ve),d&&(d.faceIndex=Math.floor(ee/3),d.face.materialIndex=U.materialIndex,s.push(d))}}else{const W=Math.max(0,F.start),Y=Math.min(M.count,F.start+F.count);for(let U=W,R=Y;U<R;U+=3){const oe=M.getX(U),se=M.getX(U+1),ee=M.getX(U+2);d=hu(this,v,n,l,A,C,P,oe,se,ee),d&&(d.faceIndex=Math.floor(U/3),s.push(d))}}else if(T!==void 0)if(Array.isArray(v))for(let W=0,Y=I.length;W<Y;W++){const U=I[W],R=v[U.materialIndex],oe=Math.max(U.start,F.start),se=Math.min(T.count,Math.min(U.start+U.count,F.start+F.count));for(let ee=oe,xe=se;ee<xe;ee+=3){const de=ee,le=ee+1,ve=ee+2;d=hu(this,R,n,l,A,C,P,de,le,ve),d&&(d.faceIndex=Math.floor(ee/3),d.face.materialIndex=U.materialIndex,s.push(d))}}else{const W=Math.max(0,F.start),Y=Math.min(T.count,F.start+F.count);for(let U=W,R=Y;U<R;U+=3){const oe=U,se=U+1,ee=U+2;d=hu(this,v,n,l,A,C,P,oe,se,ee),d&&(d.faceIndex=Math.floor(U/3),s.push(d))}}}}function dA(u,n,s,l,d,m,v,M){let T;if(n.side===vr?T=l.intersectTriangle(v,m,d,!0,M):T=l.intersectTriangle(d,m,v,n.side===Fs,M),T===null)return null;lu.copy(M),lu.applyMatrix4(u.matrixWorld);const A=s.ray.origin.distanceTo(lu);return A<s.near||A>s.far?null:{distance:A,point:lu.clone(),object:u}}function hu(u,n,s,l,d,m,v,M,T,A){u.getVertexPosition(M,su),u.getVertexPosition(T,au),u.getVertexPosition(A,ou);const C=dA(u,n,s,l,su,au,ou,u0);if(C){const P=new Se;ts.getBarycoord(u0,su,au,ou,P),d&&(C.uv=ts.getInterpolatedAttribute(d,M,T,A,P,new ii)),m&&(C.uv1=ts.getInterpolatedAttribute(m,M,T,A,P,new ii)),v&&(C.normal=ts.getInterpolatedAttribute(v,M,T,A,P,new Se),C.normal.dot(l.direction)>0&&C.normal.multiplyScalar(-1));const I={a:M,b:T,c:A,normal:new Se,materialIndex:0};ts.getNormal(su,au,ou,I.normal),C.face=I,C.barycoord=P}return C}class vl extends so{constructor(n=1,s=1,l=1,d=1,m=1,v=1){super(),this.type="BoxGeometry",this.parameters={width:n,height:s,depth:l,widthSegments:d,heightSegments:m,depthSegments:v};const M=this;d=Math.floor(d),m=Math.floor(m),v=Math.floor(v);const T=[],A=[],C=[],P=[];let I=0,F=0;W("z","y","x",-1,-1,l,s,n,v,m,0),W("z","y","x",1,-1,l,s,-n,v,m,1),W("x","z","y",1,1,n,l,s,d,v,2),W("x","z","y",1,-1,n,l,-s,d,v,3),W("x","y","z",1,-1,n,s,l,d,m,4),W("x","y","z",-1,-1,n,s,-l,d,m,5),this.setIndex(T),this.setAttribute("position",new ua(A,3)),this.setAttribute("normal",new ua(C,3)),this.setAttribute("uv",new ua(P,2));function W(Y,U,R,oe,se,ee,xe,de,le,ve,K){const q=ee/le,he=xe/ve,Ne=ee/2,Ie=xe/2,Je=de/2,Qe=le+1,Ze=ve+1;let rt=0,Oe=0;const wt=new Se;for(let kt=0;kt<Ze;kt++){const an=kt*he-Ie;for(let Cn=0;Cn<Qe;Cn++){const ei=Cn*q-Ne;wt[Y]=ei*oe,wt[U]=an*se,wt[R]=Je,A.push(wt.x,wt.y,wt.z),wt[Y]=0,wt[U]=0,wt[R]=de>0?1:-1,C.push(wt.x,wt.y,wt.z),P.push(Cn/le),P.push(1-kt/ve),rt+=1}}for(let kt=0;kt<ve;kt++)for(let an=0;an<le;an++){const Cn=I+an+Qe*kt,ei=I+an+Qe*(kt+1),Ge=I+(an+1)+Qe*(kt+1),pt=I+(an+1)+Qe*kt;T.push(Cn,ei,pt),T.push(ei,Ge,pt),Oe+=6}M.addGroup(F,Oe,K),F+=Oe,I+=rt}}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new vl(n.width,n.height,n.depth,n.widthSegments,n.heightSegments,n.depthSegments)}}function mc(u){const n={};for(const s in u){n[s]={};for(const l in u[s]){const d=u[s][l];d&&(d.isColor||d.isMatrix3||d.isMatrix4||d.isVector2||d.isVector3||d.isVector4||d.isTexture||d.isQuaternion)?d.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),n[s][l]=null):n[s][l]=d.clone():Array.isArray(d)?n[s][l]=d.slice():n[s][l]=d}}return n}function hr(u){const n={};for(let s=0;s<u.length;s++){const l=mc(u[s]);for(const d in l)n[d]=l[d]}return n}function fA(u){const n=[];for(let s=0;s<u.length;s++)n.push(u[s].clone());return n}function xx(u){const n=u.getRenderTarget();return n===null?u.outputColorSpace:n.isXRRenderTarget===!0?n.texture.colorSpace:ni.workingColorSpace}const pA={clone:mc,merge:hr};var mA=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,gA=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Br extends Au{constructor(n){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=mA,this.fragmentShader=gA,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,n!==void 0&&this.setValues(n)}copy(n){return super.copy(n),this.fragmentShader=n.fragmentShader,this.vertexShader=n.vertexShader,this.uniforms=mc(n.uniforms),this.uniformsGroups=fA(n.uniformsGroups),this.defines=Object.assign({},n.defines),this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.fog=n.fog,this.lights=n.lights,this.clipping=n.clipping,this.extensions=Object.assign({},n.extensions),this.glslVersion=n.glslVersion,this}toJSON(n){const s=super.toJSON(n);s.glslVersion=this.glslVersion,s.uniforms={};for(const d in this.uniforms){const v=this.uniforms[d].value;v&&v.isTexture?s.uniforms[d]={type:"t",value:v.toJSON(n).uuid}:v&&v.isColor?s.uniforms[d]={type:"c",value:v.getHex()}:v&&v.isVector2?s.uniforms[d]={type:"v2",value:v.toArray()}:v&&v.isVector3?s.uniforms[d]={type:"v3",value:v.toArray()}:v&&v.isVector4?s.uniforms[d]={type:"v4",value:v.toArray()}:v&&v.isMatrix3?s.uniforms[d]={type:"m3",value:v.toArray()}:v&&v.isMatrix4?s.uniforms[d]={type:"m4",value:v.toArray()}:s.uniforms[d]={value:v}}Object.keys(this.defines).length>0&&(s.defines=this.defines),s.vertexShader=this.vertexShader,s.fragmentShader=this.fragmentShader,s.lights=this.lights,s.clipping=this.clipping;const l={};for(const d in this.extensions)this.extensions[d]===!0&&(l[d]=!0);return Object.keys(l).length>0&&(s.extensions=l),s}}class vx extends yr{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Mi,this.projectionMatrix=new Mi,this.projectionMatrixInverse=new Mi,this.coordinateSystem=Us}copy(n,s){return super.copy(n,s),this.matrixWorldInverse.copy(n.matrixWorldInverse),this.projectionMatrix.copy(n.projectionMatrix),this.projectionMatrixInverse.copy(n.projectionMatrixInverse),this.coordinateSystem=n.coordinateSystem,this}getWorldDirection(n){return super.getWorldDirection(n).negate()}updateMatrixWorld(n){super.updateMatrixWorld(n),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(n,s){super.updateWorldMatrix(n,s),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const aa=new Se,d0=new ii,f0=new ii;class Cr extends vx{constructor(n=50,s=1,l=.1,d=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=n,this.zoom=1,this.near=l,this.far=d,this.focus=10,this.aspect=s,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(n,s){return super.copy(n,s),this.fov=n.fov,this.zoom=n.zoom,this.near=n.near,this.far=n.far,this.focus=n.focus,this.aspect=n.aspect,this.view=n.view===null?null:Object.assign({},n.view),this.filmGauge=n.filmGauge,this.filmOffset=n.filmOffset,this}setFocalLength(n){const s=.5*this.getFilmHeight()/n;this.fov=Ep*2*Math.atan(s),this.updateProjectionMatrix()}getFocalLength(){const n=Math.tan(of*.5*this.fov);return .5*this.getFilmHeight()/n}getEffectiveFOV(){return Ep*2*Math.atan(Math.tan(of*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(n,s,l){aa.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),s.set(aa.x,aa.y).multiplyScalar(-n/aa.z),aa.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),l.set(aa.x,aa.y).multiplyScalar(-n/aa.z)}getViewSize(n,s){return this.getViewBounds(n,d0,f0),s.subVectors(f0,d0)}setViewOffset(n,s,l,d,m,v){this.aspect=n/s,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=s,this.view.offsetX=l,this.view.offsetY=d,this.view.width=m,this.view.height=v,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=this.near;let s=n*Math.tan(of*.5*this.fov)/this.zoom,l=2*s,d=this.aspect*l,m=-.5*d;const v=this.view;if(this.view!==null&&this.view.enabled){const T=v.fullWidth,A=v.fullHeight;m+=v.offsetX*d/T,s-=v.offsetY*l/A,d*=v.width/T,l*=v.height/A}const M=this.filmOffset;M!==0&&(m+=n*M/this.getFilmWidth()),this.projectionMatrix.makePerspective(m,m+d,s,s-l,n,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const s=super.toJSON(n);return s.object.fov=this.fov,s.object.zoom=this.zoom,s.object.near=this.near,s.object.far=this.far,s.object.focus=this.focus,s.object.aspect=this.aspect,this.view!==null&&(s.object.view=Object.assign({},this.view)),s.object.filmGauge=this.filmGauge,s.object.filmOffset=this.filmOffset,s}}const tc=-90,nc=1;class _A extends yr{constructor(n,s,l){super(),this.type="CubeCamera",this.renderTarget=l,this.coordinateSystem=null,this.activeMipmapLevel=0;const d=new Cr(tc,nc,n,s);d.layers=this.layers,this.add(d);const m=new Cr(tc,nc,n,s);m.layers=this.layers,this.add(m);const v=new Cr(tc,nc,n,s);v.layers=this.layers,this.add(v);const M=new Cr(tc,nc,n,s);M.layers=this.layers,this.add(M);const T=new Cr(tc,nc,n,s);T.layers=this.layers,this.add(T);const A=new Cr(tc,nc,n,s);A.layers=this.layers,this.add(A)}updateCoordinateSystem(){const n=this.coordinateSystem,s=this.children.concat(),[l,d,m,v,M,T]=s;for(const A of s)this.remove(A);if(n===Us)l.up.set(0,1,0),l.lookAt(1,0,0),d.up.set(0,1,0),d.lookAt(-1,0,0),m.up.set(0,0,-1),m.lookAt(0,1,0),v.up.set(0,0,1),v.lookAt(0,-1,0),M.up.set(0,1,0),M.lookAt(0,0,1),T.up.set(0,1,0),T.lookAt(0,0,-1);else if(n===Eu)l.up.set(0,-1,0),l.lookAt(-1,0,0),d.up.set(0,-1,0),d.lookAt(1,0,0),m.up.set(0,0,1),m.lookAt(0,1,0),v.up.set(0,0,-1),v.lookAt(0,-1,0),M.up.set(0,-1,0),M.lookAt(0,0,1),T.up.set(0,-1,0),T.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+n);for(const A of s)this.add(A),A.updateMatrixWorld()}update(n,s){this.parent===null&&this.updateMatrixWorld();const{renderTarget:l,activeMipmapLevel:d}=this;this.coordinateSystem!==n.coordinateSystem&&(this.coordinateSystem=n.coordinateSystem,this.updateCoordinateSystem());const[m,v,M,T,A,C]=this.children,P=n.getRenderTarget(),I=n.getActiveCubeFace(),F=n.getActiveMipmapLevel(),W=n.xr.enabled;n.xr.enabled=!1;const Y=l.texture.generateMipmaps;l.texture.generateMipmaps=!1,n.setRenderTarget(l,0,d),n.render(s,m),n.setRenderTarget(l,1,d),n.render(s,v),n.setRenderTarget(l,2,d),n.render(s,M),n.setRenderTarget(l,3,d),n.render(s,T),n.setRenderTarget(l,4,d),n.render(s,A),l.texture.generateMipmaps=Y,n.setRenderTarget(l,5,d),n.render(s,C),n.setRenderTarget(P,I,F),n.xr.enabled=W,l.texture.needsPMREMUpdate=!0}}class yx extends ir{constructor(n,s,l,d,m,v,M,T,A,C){n=n!==void 0?n:[],s=s!==void 0?s:hc,super(n,s,l,d,m,v,M,T,A,C),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(n){this.image=n}}class xA extends ro{constructor(n=1,s={}){super(n,n,s),this.isWebGLCubeRenderTarget=!0;const l={width:n,height:n,depth:1},d=[l,l,l,l,l,l];this.texture=new yx(d,s.mapping,s.wrapS,s.wrapT,s.magFilter,s.minFilter,s.format,s.type,s.anisotropy,s.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=s.generateMipmaps!==void 0?s.generateMipmaps:!1,this.texture.minFilter=s.minFilter!==void 0?s.minFilter:Or}fromEquirectangularTexture(n,s){this.texture.type=s.type,this.texture.colorSpace=s.colorSpace,this.texture.generateMipmaps=s.generateMipmaps,this.texture.minFilter=s.minFilter,this.texture.magFilter=s.magFilter;const l={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},d=new vl(5,5,5),m=new Br({name:"CubemapFromEquirect",uniforms:mc(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,side:vr,blending:la});m.uniforms.tEquirect.value=s;const v=new Rr(d,m),M=s.minFilter;return s.minFilter===no&&(s.minFilter=Or),new _A(1,10,this).update(n,v),s.minFilter=M,v.geometry.dispose(),v.material.dispose(),this}clear(n,s,l,d){const m=n.getRenderTarget();for(let v=0;v<6;v++)n.setRenderTarget(this,v),n.clear(s,l,d);n.setRenderTarget(m)}}class p0 extends yr{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Bs,this.environmentIntensity=1,this.environmentRotation=new Bs,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(n,s){return super.copy(n,s),n.background!==null&&(this.background=n.background.clone()),n.environment!==null&&(this.environment=n.environment.clone()),n.fog!==null&&(this.fog=n.fog.clone()),this.backgroundBlurriness=n.backgroundBlurriness,this.backgroundIntensity=n.backgroundIntensity,this.backgroundRotation.copy(n.backgroundRotation),this.environmentIntensity=n.environmentIntensity,this.environmentRotation.copy(n.environmentRotation),n.overrideMaterial!==null&&(this.overrideMaterial=n.overrideMaterial.clone()),this.matrixAutoUpdate=n.matrixAutoUpdate,this}toJSON(n){const s=super.toJSON(n);return this.fog!==null&&(s.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(s.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(s.object.backgroundIntensity=this.backgroundIntensity),s.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(s.object.environmentIntensity=this.environmentIntensity),s.object.environmentRotation=this.environmentRotation.toArray(),s}}const Cf=new Se,vA=new Se,yA=new Un;class Ja{constructor(n=new Se(1,0,0),s=0){this.isPlane=!0,this.normal=n,this.constant=s}set(n,s){return this.normal.copy(n),this.constant=s,this}setComponents(n,s,l,d){return this.normal.set(n,s,l),this.constant=d,this}setFromNormalAndCoplanarPoint(n,s){return this.normal.copy(n),this.constant=-s.dot(this.normal),this}setFromCoplanarPoints(n,s,l){const d=Cf.subVectors(l,s).cross(vA.subVectors(n,s)).normalize();return this.setFromNormalAndCoplanarPoint(d,n),this}copy(n){return this.normal.copy(n.normal),this.constant=n.constant,this}normalize(){const n=1/this.normal.length();return this.normal.multiplyScalar(n),this.constant*=n,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(n){return this.normal.dot(n)+this.constant}distanceToSphere(n){return this.distanceToPoint(n.center)-n.radius}projectPoint(n,s){return s.copy(n).addScaledVector(this.normal,-this.distanceToPoint(n))}intersectLine(n,s){const l=n.delta(Cf),d=this.normal.dot(l);if(d===0)return this.distanceToPoint(n.start)===0?s.copy(n.start):null;const m=-(n.start.dot(this.normal)+this.constant)/d;return m<0||m>1?null:s.copy(n.start).addScaledVector(l,m)}intersectsLine(n){const s=this.distanceToPoint(n.start),l=this.distanceToPoint(n.end);return s<0&&l>0||l<0&&s>0}intersectsBox(n){return n.intersectsPlane(this)}intersectsSphere(n){return n.intersectsPlane(this)}coplanarPoint(n){return n.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(n,s){const l=s||yA.getNormalMatrix(n),d=this.coplanarPoint(Cf).applyMatrix4(n),m=this.normal.applyMatrix3(l).normalize();return this.constant=-d.dot(m),this}translate(n){return this.constant-=n.dot(this.normal),this}equals(n){return n.normal.equals(this.normal)&&n.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Ya=new Lp,uu=new Se;class Dp{constructor(n=new Ja,s=new Ja,l=new Ja,d=new Ja,m=new Ja,v=new Ja){this.planes=[n,s,l,d,m,v]}set(n,s,l,d,m,v){const M=this.planes;return M[0].copy(n),M[1].copy(s),M[2].copy(l),M[3].copy(d),M[4].copy(m),M[5].copy(v),this}copy(n){const s=this.planes;for(let l=0;l<6;l++)s[l].copy(n.planes[l]);return this}setFromProjectionMatrix(n,s=Us){const l=this.planes,d=n.elements,m=d[0],v=d[1],M=d[2],T=d[3],A=d[4],C=d[5],P=d[6],I=d[7],F=d[8],W=d[9],Y=d[10],U=d[11],R=d[12],oe=d[13],se=d[14],ee=d[15];if(l[0].setComponents(T-m,I-A,U-F,ee-R).normalize(),l[1].setComponents(T+m,I+A,U+F,ee+R).normalize(),l[2].setComponents(T+v,I+C,U+W,ee+oe).normalize(),l[3].setComponents(T-v,I-C,U-W,ee-oe).normalize(),l[4].setComponents(T-M,I-P,U-Y,ee-se).normalize(),s===Us)l[5].setComponents(T+M,I+P,U+Y,ee+se).normalize();else if(s===Eu)l[5].setComponents(M,P,Y,se).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+s);return this}intersectsObject(n){if(n.boundingSphere!==void 0)n.boundingSphere===null&&n.computeBoundingSphere(),Ya.copy(n.boundingSphere).applyMatrix4(n.matrixWorld);else{const s=n.geometry;s.boundingSphere===null&&s.computeBoundingSphere(),Ya.copy(s.boundingSphere).applyMatrix4(n.matrixWorld)}return this.intersectsSphere(Ya)}intersectsSprite(n){return Ya.center.set(0,0,0),Ya.radius=.7071067811865476,Ya.applyMatrix4(n.matrixWorld),this.intersectsSphere(Ya)}intersectsSphere(n){const s=this.planes,l=n.center,d=-n.radius;for(let m=0;m<6;m++)if(s[m].distanceToPoint(l)<d)return!1;return!0}intersectsBox(n){const s=this.planes;for(let l=0;l<6;l++){const d=s[l];if(uu.x=d.normal.x>0?n.max.x:n.min.x,uu.y=d.normal.y>0?n.max.y:n.min.y,uu.z=d.normal.z>0?n.max.z:n.min.z,d.distanceToPoint(uu)<0)return!1}return!0}containsPoint(n){const s=this.planes;for(let l=0;l<6;l++)if(s[l].distanceToPoint(n)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class ca extends yr{constructor(){super(),this.isGroup=!0,this.type="Group"}}class MA extends ir{constructor(n,s,l,d,m,v,M,T,A){super(n,s,l,d,m,v,M,T,A),this.isVideoTexture=!0,this.minFilter=v!==void 0?v:Or,this.magFilter=m!==void 0?m:Or,this.generateMipmaps=!1;const C=this;function P(){C.needsUpdate=!0,n.requestVideoFrameCallback(P)}"requestVideoFrameCallback"in n&&n.requestVideoFrameCallback(P)}clone(){return new this.constructor(this.image).copy(this)}update(){const n=this.image;"requestVideoFrameCallback"in n===!1&&n.readyState>=n.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class Mx extends ir{constructor(n,s,l,d,m,v,M,T,A,C=oc){if(C!==oc&&C!==fc)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");l===void 0&&C===oc&&(l=io),l===void 0&&C===fc&&(l=dc),super(null,d,m,v,M,T,C,l,A),this.isDepthTexture=!0,this.image={width:n,height:s},this.magFilter=M!==void 0?M:is,this.minFilter=T!==void 0?T:is,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(n){return super.copy(n),this.compareFunction=n.compareFunction,this}toJSON(n){const s=super.toJSON(n);return this.compareFunction!==null&&(s.compareFunction=this.compareFunction),s}}class gc extends so{constructor(n=1,s=1,l=1,d=1){super(),this.type="PlaneGeometry",this.parameters={width:n,height:s,widthSegments:l,heightSegments:d};const m=n/2,v=s/2,M=Math.floor(l),T=Math.floor(d),A=M+1,C=T+1,P=n/M,I=s/T,F=[],W=[],Y=[],U=[];for(let R=0;R<C;R++){const oe=R*I-v;for(let se=0;se<A;se++){const ee=se*P-m;W.push(ee,-oe,0),Y.push(0,0,1),U.push(se/M),U.push(1-R/T)}}for(let R=0;R<T;R++)for(let oe=0;oe<M;oe++){const se=oe+A*R,ee=oe+A*(R+1),xe=oe+1+A*(R+1),de=oe+1+A*R;F.push(se,ee,de),F.push(ee,xe,de)}this.setIndex(F),this.setAttribute("position",new ua(W,3)),this.setAttribute("normal",new ua(Y,3)),this.setAttribute("uv",new ua(U,2))}copy(n){return super.copy(n),this.parameters=Object.assign({},n.parameters),this}static fromJSON(n){return new gc(n.width,n.height,n.widthSegments,n.heightSegments)}}class SA extends Au{constructor(n){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=UT,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(n)}copy(n){return super.copy(n),this.depthPacking=n.depthPacking,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this}}class EA extends Au{constructor(n){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(n)}copy(n){return super.copy(n),this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this}}const m0={enabled:!1,files:{},add:function(u,n){this.enabled!==!1&&(this.files[u]=n)},get:function(u){if(this.enabled!==!1)return this.files[u]},remove:function(u){delete this.files[u]},clear:function(){this.files={}}};class bA{constructor(n,s,l){const d=this;let m=!1,v=0,M=0,T;const A=[];this.onStart=void 0,this.onLoad=n,this.onProgress=s,this.onError=l,this.itemStart=function(C){M++,m===!1&&d.onStart!==void 0&&d.onStart(C,v,M),m=!0},this.itemEnd=function(C){v++,d.onProgress!==void 0&&d.onProgress(C,v,M),v===M&&(m=!1,d.onLoad!==void 0&&d.onLoad())},this.itemError=function(C){d.onError!==void 0&&d.onError(C)},this.resolveURL=function(C){return T?T(C):C},this.setURLModifier=function(C){return T=C,this},this.addHandler=function(C,P){return A.push(C,P),this},this.removeHandler=function(C){const P=A.indexOf(C);return P!==-1&&A.splice(P,2),this},this.getHandler=function(C){for(let P=0,I=A.length;P<I;P+=2){const F=A[P],W=A[P+1];if(F.global&&(F.lastIndex=0),F.test(C))return W}return null}}}const TA=new bA;class Up{constructor(n){this.manager=n!==void 0?n:TA,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(n,s){const l=this;return new Promise(function(d,m){l.load(n,d,s,m)})}parse(){}setCrossOrigin(n){return this.crossOrigin=n,this}setWithCredentials(n){return this.withCredentials=n,this}setPath(n){return this.path=n,this}setResourcePath(n){return this.resourcePath=n,this}setRequestHeader(n){return this.requestHeader=n,this}}Up.DEFAULT_MATERIAL_NAME="__DEFAULT";class AA extends Up{constructor(n){super(n)}load(n,s,l,d){this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const m=this,v=m0.get(n);if(v!==void 0)return m.manager.itemStart(n),setTimeout(function(){s&&s(v),m.manager.itemEnd(n)},0),v;const M=pl("img");function T(){C(),m0.add(n,this),s&&s(this),m.manager.itemEnd(n)}function A(P){C(),d&&d(P),m.manager.itemError(n),m.manager.itemEnd(n)}function C(){M.removeEventListener("load",T,!1),M.removeEventListener("error",A,!1)}return M.addEventListener("load",T,!1),M.addEventListener("error",A,!1),n.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(M.crossOrigin=this.crossOrigin),m.manager.itemStart(n),M.src=n,M}}class du extends Up{constructor(n){super(n)}load(n,s,l,d){const m=new ir,v=new AA(this.manager);return v.setCrossOrigin(this.crossOrigin),v.setPath(this.path),v.load(n,function(M){m.image=M,m.needsUpdate=!0,s!==void 0&&s(m)},l,d),m}}class Sx extends yr{constructor(n,s=1){super(),this.isLight=!0,this.type="Light",this.color=new Yn(n),this.intensity=s}dispose(){}copy(n,s){return super.copy(n,s),this.color.copy(n.color),this.intensity=n.intensity,this}toJSON(n){const s=super.toJSON(n);return s.object.color=this.color.getHex(),s.object.intensity=this.intensity,this.groundColor!==void 0&&(s.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(s.object.distance=this.distance),this.angle!==void 0&&(s.object.angle=this.angle),this.decay!==void 0&&(s.object.decay=this.decay),this.penumbra!==void 0&&(s.object.penumbra=this.penumbra),this.shadow!==void 0&&(s.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(s.object.target=this.target.uuid),s}}const Rf=new Mi,g0=new Se,_0=new Se;class wA{constructor(n){this.camera=n,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ii(512,512),this.map=null,this.mapPass=null,this.matrix=new Mi,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Dp,this._frameExtents=new ii(1,1),this._viewportCount=1,this._viewports=[new di(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(n){const s=this.camera,l=this.matrix;g0.setFromMatrixPosition(n.matrixWorld),s.position.copy(g0),_0.setFromMatrixPosition(n.target.matrixWorld),s.lookAt(_0),s.updateMatrixWorld(),Rf.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Rf),l.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),l.multiply(Rf)}getViewport(n){return this._viewports[n]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(n){return this.camera=n.camera.clone(),this.intensity=n.intensity,this.bias=n.bias,this.radius=n.radius,this.mapSize.copy(n.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const n={};return this.intensity!==1&&(n.intensity=this.intensity),this.bias!==0&&(n.bias=this.bias),this.normalBias!==0&&(n.normalBias=this.normalBias),this.radius!==1&&(n.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(n.mapSize=this.mapSize.toArray()),n.camera=this.camera.toJSON(!1).object,delete n.camera.matrix,n}}const x0=new Mi,hl=new Se,Pf=new Se;class CA extends wA{constructor(){super(new Cr(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new ii(4,2),this._viewportCount=6,this._viewports=[new di(2,1,1,1),new di(0,1,1,1),new di(3,1,1,1),new di(1,1,1,1),new di(3,0,1,1),new di(1,0,1,1)],this._cubeDirections=[new Se(1,0,0),new Se(-1,0,0),new Se(0,0,1),new Se(0,0,-1),new Se(0,1,0),new Se(0,-1,0)],this._cubeUps=[new Se(0,1,0),new Se(0,1,0),new Se(0,1,0),new Se(0,1,0),new Se(0,0,1),new Se(0,0,-1)]}updateMatrices(n,s=0){const l=this.camera,d=this.matrix,m=n.distance||l.far;m!==l.far&&(l.far=m,l.updateProjectionMatrix()),hl.setFromMatrixPosition(n.matrixWorld),l.position.copy(hl),Pf.copy(l.position),Pf.add(this._cubeDirections[s]),l.up.copy(this._cubeUps[s]),l.lookAt(Pf),l.updateMatrixWorld(),d.makeTranslation(-hl.x,-hl.y,-hl.z),x0.multiplyMatrices(l.projectionMatrix,l.matrixWorldInverse),this._frustum.setFromProjectionMatrix(x0)}}class RA extends Sx{constructor(n,s,l=0,d=2){super(n,s),this.isPointLight=!0,this.type="PointLight",this.distance=l,this.decay=d,this.shadow=new CA}get power(){return this.intensity*4*Math.PI}set power(n){this.intensity=n/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(n,s){return super.copy(n,s),this.distance=n.distance,this.decay=n.decay,this.shadow=n.shadow.clone(),this}}class PA extends vx{constructor(n=-1,s=1,l=1,d=-1,m=.1,v=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=n,this.right=s,this.top=l,this.bottom=d,this.near=m,this.far=v,this.updateProjectionMatrix()}copy(n,s){return super.copy(n,s),this.left=n.left,this.right=n.right,this.top=n.top,this.bottom=n.bottom,this.near=n.near,this.far=n.far,this.zoom=n.zoom,this.view=n.view===null?null:Object.assign({},n.view),this}setViewOffset(n,s,l,d,m,v){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=s,this.view.offsetX=l,this.view.offsetY=d,this.view.width=m,this.view.height=v,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),s=(this.top-this.bottom)/(2*this.zoom),l=(this.right+this.left)/2,d=(this.top+this.bottom)/2;let m=l-n,v=l+n,M=d+s,T=d-s;if(this.view!==null&&this.view.enabled){const A=(this.right-this.left)/this.view.fullWidth/this.zoom,C=(this.top-this.bottom)/this.view.fullHeight/this.zoom;m+=A*this.view.offsetX,v=m+A*this.view.width,M-=C*this.view.offsetY,T=M-C*this.view.height}this.projectionMatrix.makeOrthographic(m,v,M,T,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(n){const s=super.toJSON(n);return s.object.zoom=this.zoom,s.object.left=this.left,s.object.right=this.right,s.object.top=this.top,s.object.bottom=this.bottom,s.object.near=this.near,s.object.far=this.far,this.view!==null&&(s.object.view=Object.assign({},this.view)),s}}class IA extends Sx{constructor(n,s){super(n,s),this.isAmbientLight=!0,this.type="AmbientLight"}}class LA extends Cr{constructor(n=[]){super(),this.isArrayCamera=!0,this.cameras=n}}function v0(u,n,s,l){const d=DA(l);switch(s){case nx:return u*n;case rx:return u*n;case sx:return u*n*2;case ax:return u*n/d.components*d.byteLength;case Rp:return u*n/d.components*d.byteLength;case ox:return u*n*2/d.components*d.byteLength;case Pp:return u*n*2/d.components*d.byteLength;case ix:return u*n*3/d.components*d.byteLength;case ns:return u*n*4/d.components*d.byteLength;case Ip:return u*n*4/d.components*d.byteLength;case gu:case _u:return Math.floor((u+3)/4)*Math.floor((n+3)/4)*8;case xu:case vu:return Math.floor((u+3)/4)*Math.floor((n+3)/4)*16;case jf:case ep:return Math.max(u,16)*Math.max(n,8)/4;case Jf:case Qf:return Math.max(u,8)*Math.max(n,8)/2;case tp:case np:return Math.floor((u+3)/4)*Math.floor((n+3)/4)*8;case ip:return Math.floor((u+3)/4)*Math.floor((n+3)/4)*16;case rp:return Math.floor((u+3)/4)*Math.floor((n+3)/4)*16;case sp:return Math.floor((u+4)/5)*Math.floor((n+3)/4)*16;case ap:return Math.floor((u+4)/5)*Math.floor((n+4)/5)*16;case op:return Math.floor((u+5)/6)*Math.floor((n+4)/5)*16;case cp:return Math.floor((u+5)/6)*Math.floor((n+5)/6)*16;case lp:return Math.floor((u+7)/8)*Math.floor((n+4)/5)*16;case hp:return Math.floor((u+7)/8)*Math.floor((n+5)/6)*16;case up:return Math.floor((u+7)/8)*Math.floor((n+7)/8)*16;case dp:return Math.floor((u+9)/10)*Math.floor((n+4)/5)*16;case fp:return Math.floor((u+9)/10)*Math.floor((n+5)/6)*16;case pp:return Math.floor((u+9)/10)*Math.floor((n+7)/8)*16;case mp:return Math.floor((u+9)/10)*Math.floor((n+9)/10)*16;case gp:return Math.floor((u+11)/12)*Math.floor((n+9)/10)*16;case _p:return Math.floor((u+11)/12)*Math.floor((n+11)/12)*16;case yu:case xp:case vp:return Math.ceil(u/4)*Math.ceil(n/4)*16;case cx:case yp:return Math.ceil(u/4)*Math.ceil(n/4)*8;case Mp:case Sp:return Math.ceil(u/4)*Math.ceil(n/4)*16}throw new Error(`Unable to determine texture byte length for ${s} format.`)}function DA(u){switch(u){case Os:case Q0:return{byteLength:1,components:1};case fl:case ex:case ml:return{byteLength:2,components:1};case wp:case Cp:return{byteLength:2,components:4};case io:case Ap:case Ds:return{byteLength:4,components:1};case tx:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${u}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Tp}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Tp);/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function Ex(){let u=null,n=!1,s=null,l=null;function d(m,v){s(m,v),l=u.requestAnimationFrame(d)}return{start:function(){n!==!0&&s!==null&&(l=u.requestAnimationFrame(d),n=!0)},stop:function(){u.cancelAnimationFrame(l),n=!1},setAnimationLoop:function(m){s=m},setContext:function(m){u=m}}}function UA(u){const n=new WeakMap;function s(M,T){const A=M.array,C=M.usage,P=A.byteLength,I=u.createBuffer();u.bindBuffer(T,I),u.bufferData(T,A,C),M.onUploadCallback();let F;if(A instanceof Float32Array)F=u.FLOAT;else if(A instanceof Uint16Array)M.isFloat16BufferAttribute?F=u.HALF_FLOAT:F=u.UNSIGNED_SHORT;else if(A instanceof Int16Array)F=u.SHORT;else if(A instanceof Uint32Array)F=u.UNSIGNED_INT;else if(A instanceof Int32Array)F=u.INT;else if(A instanceof Int8Array)F=u.BYTE;else if(A instanceof Uint8Array)F=u.UNSIGNED_BYTE;else if(A instanceof Uint8ClampedArray)F=u.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+A);return{buffer:I,type:F,bytesPerElement:A.BYTES_PER_ELEMENT,version:M.version,size:P}}function l(M,T,A){const C=T.array,P=T.updateRanges;if(u.bindBuffer(A,M),P.length===0)u.bufferSubData(A,0,C);else{P.sort((F,W)=>F.start-W.start);let I=0;for(let F=1;F<P.length;F++){const W=P[I],Y=P[F];Y.start<=W.start+W.count+1?W.count=Math.max(W.count,Y.start+Y.count-W.start):(++I,P[I]=Y)}P.length=I+1;for(let F=0,W=P.length;F<W;F++){const Y=P[F];u.bufferSubData(A,Y.start*C.BYTES_PER_ELEMENT,C,Y.start,Y.count)}T.clearUpdateRanges()}T.onUploadCallback()}function d(M){return M.isInterleavedBufferAttribute&&(M=M.data),n.get(M)}function m(M){M.isInterleavedBufferAttribute&&(M=M.data);const T=n.get(M);T&&(u.deleteBuffer(T.buffer),n.delete(M))}function v(M,T){if(M.isInterleavedBufferAttribute&&(M=M.data),M.isGLBufferAttribute){const C=n.get(M);(!C||C.version<M.version)&&n.set(M,{buffer:M.buffer,type:M.type,bytesPerElement:M.elementSize,version:M.version});return}const A=n.get(M);if(A===void 0)n.set(M,s(M,T));else if(A.version<M.version){if(A.size!==M.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");l(A.buffer,M,T),A.version=M.version}}return{get:d,remove:m,update:v}}var NA=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,FA=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,OA=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,BA=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,zA=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,VA=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,kA=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,HA=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,GA=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,WA=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,XA=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,qA=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,YA=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,ZA=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,$A=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,KA=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,JA=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,jA=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,QA=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,ew=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,tw=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,nw=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,iw=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,rw=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,sw=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,aw=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,ow=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,cw=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,lw=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,hw=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,uw="gl_FragColor = linearToOutputTexel( gl_FragColor );",dw=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,fw=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,pw=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,mw=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,gw=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,_w=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,xw=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,vw=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,yw=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Mw=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Sw=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ew=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,bw=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Tw=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,Aw=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,ww=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,Cw=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Rw=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Pw=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Iw=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Lw=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,Dw=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Uw=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Nw=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Fw=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Ow=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Bw=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,zw=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Vw=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,kw=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Hw=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Gw=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Ww=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Xw=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,qw=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,Yw=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,Zw=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,$w=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Kw=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,Jw=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,jw=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,Qw=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,eC=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,tC=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,nC=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,iC=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,rC=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,sC=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,aC=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,oC=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,cC=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,lC=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,hC=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,uC=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,dC=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,fC=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,pC=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,mC=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,gC=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,_C=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,xC=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,vC=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,yC=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,MC=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,SC=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,EC=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,bC=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,TC=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,AC=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,wC=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,CC=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,RC=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,PC=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,IC=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,LC=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,DC=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const UC=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,NC=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,FC=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,OC=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,BC=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,zC=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,VC=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,kC=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,HC=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,GC=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,WC=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,XC=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,qC=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,YC=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,ZC=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,$C=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,KC=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,JC=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,jC=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,QC=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,eR=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,tR=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,nR=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,iR=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,rR=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,sR=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,aR=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,oR=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cR=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,lR=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,hR=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,uR=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,dR=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,fR=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Fn={alphahash_fragment:NA,alphahash_pars_fragment:FA,alphamap_fragment:OA,alphamap_pars_fragment:BA,alphatest_fragment:zA,alphatest_pars_fragment:VA,aomap_fragment:kA,aomap_pars_fragment:HA,batching_pars_vertex:GA,batching_vertex:WA,begin_vertex:XA,beginnormal_vertex:qA,bsdfs:YA,iridescence_fragment:ZA,bumpmap_pars_fragment:$A,clipping_planes_fragment:KA,clipping_planes_pars_fragment:JA,clipping_planes_pars_vertex:jA,clipping_planes_vertex:QA,color_fragment:ew,color_pars_fragment:tw,color_pars_vertex:nw,color_vertex:iw,common:rw,cube_uv_reflection_fragment:sw,defaultnormal_vertex:aw,displacementmap_pars_vertex:ow,displacementmap_vertex:cw,emissivemap_fragment:lw,emissivemap_pars_fragment:hw,colorspace_fragment:uw,colorspace_pars_fragment:dw,envmap_fragment:fw,envmap_common_pars_fragment:pw,envmap_pars_fragment:mw,envmap_pars_vertex:gw,envmap_physical_pars_fragment:ww,envmap_vertex:_w,fog_vertex:xw,fog_pars_vertex:vw,fog_fragment:yw,fog_pars_fragment:Mw,gradientmap_pars_fragment:Sw,lightmap_pars_fragment:Ew,lights_lambert_fragment:bw,lights_lambert_pars_fragment:Tw,lights_pars_begin:Aw,lights_toon_fragment:Cw,lights_toon_pars_fragment:Rw,lights_phong_fragment:Pw,lights_phong_pars_fragment:Iw,lights_physical_fragment:Lw,lights_physical_pars_fragment:Dw,lights_fragment_begin:Uw,lights_fragment_maps:Nw,lights_fragment_end:Fw,logdepthbuf_fragment:Ow,logdepthbuf_pars_fragment:Bw,logdepthbuf_pars_vertex:zw,logdepthbuf_vertex:Vw,map_fragment:kw,map_pars_fragment:Hw,map_particle_fragment:Gw,map_particle_pars_fragment:Ww,metalnessmap_fragment:Xw,metalnessmap_pars_fragment:qw,morphinstance_vertex:Yw,morphcolor_vertex:Zw,morphnormal_vertex:$w,morphtarget_pars_vertex:Kw,morphtarget_vertex:Jw,normal_fragment_begin:jw,normal_fragment_maps:Qw,normal_pars_fragment:eC,normal_pars_vertex:tC,normal_vertex:nC,normalmap_pars_fragment:iC,clearcoat_normal_fragment_begin:rC,clearcoat_normal_fragment_maps:sC,clearcoat_pars_fragment:aC,iridescence_pars_fragment:oC,opaque_fragment:cC,packing:lC,premultiplied_alpha_fragment:hC,project_vertex:uC,dithering_fragment:dC,dithering_pars_fragment:fC,roughnessmap_fragment:pC,roughnessmap_pars_fragment:mC,shadowmap_pars_fragment:gC,shadowmap_pars_vertex:_C,shadowmap_vertex:xC,shadowmask_pars_fragment:vC,skinbase_vertex:yC,skinning_pars_vertex:MC,skinning_vertex:SC,skinnormal_vertex:EC,specularmap_fragment:bC,specularmap_pars_fragment:TC,tonemapping_fragment:AC,tonemapping_pars_fragment:wC,transmission_fragment:CC,transmission_pars_fragment:RC,uv_pars_fragment:PC,uv_pars_vertex:IC,uv_vertex:LC,worldpos_vertex:DC,background_vert:UC,background_frag:NC,backgroundCube_vert:FC,backgroundCube_frag:OC,cube_vert:BC,cube_frag:zC,depth_vert:VC,depth_frag:kC,distanceRGBA_vert:HC,distanceRGBA_frag:GC,equirect_vert:WC,equirect_frag:XC,linedashed_vert:qC,linedashed_frag:YC,meshbasic_vert:ZC,meshbasic_frag:$C,meshlambert_vert:KC,meshlambert_frag:JC,meshmatcap_vert:jC,meshmatcap_frag:QC,meshnormal_vert:eR,meshnormal_frag:tR,meshphong_vert:nR,meshphong_frag:iR,meshphysical_vert:rR,meshphysical_frag:sR,meshtoon_vert:aR,meshtoon_frag:oR,points_vert:cR,points_frag:lR,shadow_vert:hR,shadow_frag:uR,sprite_vert:dR,sprite_frag:fR},Lt={common:{diffuse:{value:new Yn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Un},alphaMap:{value:null},alphaMapTransform:{value:new Un},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Un}},envmap:{envMap:{value:null},envMapRotation:{value:new Un},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Un}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Un}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Un},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Un},normalScale:{value:new ii(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Un},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Un}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Un}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Un}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Yn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Yn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Un},alphaTest:{value:0},uvTransform:{value:new Un}},sprite:{diffuse:{value:new Yn(16777215)},opacity:{value:1},center:{value:new ii(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Un},alphaMap:{value:null},alphaMapTransform:{value:new Un},alphaTest:{value:0}}},us={basic:{uniforms:hr([Lt.common,Lt.specularmap,Lt.envmap,Lt.aomap,Lt.lightmap,Lt.fog]),vertexShader:Fn.meshbasic_vert,fragmentShader:Fn.meshbasic_frag},lambert:{uniforms:hr([Lt.common,Lt.specularmap,Lt.envmap,Lt.aomap,Lt.lightmap,Lt.emissivemap,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,Lt.fog,Lt.lights,{emissive:{value:new Yn(0)}}]),vertexShader:Fn.meshlambert_vert,fragmentShader:Fn.meshlambert_frag},phong:{uniforms:hr([Lt.common,Lt.specularmap,Lt.envmap,Lt.aomap,Lt.lightmap,Lt.emissivemap,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,Lt.fog,Lt.lights,{emissive:{value:new Yn(0)},specular:{value:new Yn(1118481)},shininess:{value:30}}]),vertexShader:Fn.meshphong_vert,fragmentShader:Fn.meshphong_frag},standard:{uniforms:hr([Lt.common,Lt.envmap,Lt.aomap,Lt.lightmap,Lt.emissivemap,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,Lt.roughnessmap,Lt.metalnessmap,Lt.fog,Lt.lights,{emissive:{value:new Yn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Fn.meshphysical_vert,fragmentShader:Fn.meshphysical_frag},toon:{uniforms:hr([Lt.common,Lt.aomap,Lt.lightmap,Lt.emissivemap,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,Lt.gradientmap,Lt.fog,Lt.lights,{emissive:{value:new Yn(0)}}]),vertexShader:Fn.meshtoon_vert,fragmentShader:Fn.meshtoon_frag},matcap:{uniforms:hr([Lt.common,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,Lt.fog,{matcap:{value:null}}]),vertexShader:Fn.meshmatcap_vert,fragmentShader:Fn.meshmatcap_frag},points:{uniforms:hr([Lt.points,Lt.fog]),vertexShader:Fn.points_vert,fragmentShader:Fn.points_frag},dashed:{uniforms:hr([Lt.common,Lt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Fn.linedashed_vert,fragmentShader:Fn.linedashed_frag},depth:{uniforms:hr([Lt.common,Lt.displacementmap]),vertexShader:Fn.depth_vert,fragmentShader:Fn.depth_frag},normal:{uniforms:hr([Lt.common,Lt.bumpmap,Lt.normalmap,Lt.displacementmap,{opacity:{value:1}}]),vertexShader:Fn.meshnormal_vert,fragmentShader:Fn.meshnormal_frag},sprite:{uniforms:hr([Lt.sprite,Lt.fog]),vertexShader:Fn.sprite_vert,fragmentShader:Fn.sprite_frag},background:{uniforms:{uvTransform:{value:new Un},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Fn.background_vert,fragmentShader:Fn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Un}},vertexShader:Fn.backgroundCube_vert,fragmentShader:Fn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Fn.cube_vert,fragmentShader:Fn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Fn.equirect_vert,fragmentShader:Fn.equirect_frag},distanceRGBA:{uniforms:hr([Lt.common,Lt.displacementmap,{referencePosition:{value:new Se},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Fn.distanceRGBA_vert,fragmentShader:Fn.distanceRGBA_frag},shadow:{uniforms:hr([Lt.lights,Lt.fog,{color:{value:new Yn(0)},opacity:{value:1}}]),vertexShader:Fn.shadow_vert,fragmentShader:Fn.shadow_frag}};us.physical={uniforms:hr([us.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Un},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Un},clearcoatNormalScale:{value:new ii(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Un},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Un},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Un},sheen:{value:0},sheenColor:{value:new Yn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Un},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Un},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Un},transmissionSamplerSize:{value:new ii},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Un},attenuationDistance:{value:0},attenuationColor:{value:new Yn(0)},specularColor:{value:new Yn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Un},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Un},anisotropyVector:{value:new ii},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Un}}]),vertexShader:Fn.meshphysical_vert,fragmentShader:Fn.meshphysical_frag};const fu={r:0,b:0,g:0},Za=new Bs,pR=new Mi;function mR(u,n,s,l,d,m,v){const M=new Yn(0);let T=m===!0?0:1,A,C,P=null,I=0,F=null;function W(se){let ee=se.isScene===!0?se.background:null;return ee&&ee.isTexture&&(ee=(se.backgroundBlurriness>0?s:n).get(ee)),ee}function Y(se){let ee=!1;const xe=W(se);xe===null?R(M,T):xe&&xe.isColor&&(R(xe,1),ee=!0);const de=u.xr.getEnvironmentBlendMode();de==="additive"?l.buffers.color.setClear(0,0,0,1,v):de==="alpha-blend"&&l.buffers.color.setClear(0,0,0,0,v),(u.autoClear||ee)&&(l.buffers.depth.setTest(!0),l.buffers.depth.setMask(!0),l.buffers.color.setMask(!0),u.clear(u.autoClearColor,u.autoClearDepth,u.autoClearStencil))}function U(se,ee){const xe=W(ee);xe&&(xe.isCubeTexture||xe.mapping===Tu)?(C===void 0&&(C=new Rr(new vl(1,1,1),new Br({name:"BackgroundCubeMaterial",uniforms:mc(us.backgroundCube.uniforms),vertexShader:us.backgroundCube.vertexShader,fragmentShader:us.backgroundCube.fragmentShader,side:vr,depthTest:!1,depthWrite:!1,fog:!1})),C.geometry.deleteAttribute("normal"),C.geometry.deleteAttribute("uv"),C.onBeforeRender=function(de,le,ve){this.matrixWorld.copyPosition(ve.matrixWorld)},Object.defineProperty(C.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),d.update(C)),Za.copy(ee.backgroundRotation),Za.x*=-1,Za.y*=-1,Za.z*=-1,xe.isCubeTexture&&xe.isRenderTargetTexture===!1&&(Za.y*=-1,Za.z*=-1),C.material.uniforms.envMap.value=xe,C.material.uniforms.flipEnvMap.value=xe.isCubeTexture&&xe.isRenderTargetTexture===!1?-1:1,C.material.uniforms.backgroundBlurriness.value=ee.backgroundBlurriness,C.material.uniforms.backgroundIntensity.value=ee.backgroundIntensity,C.material.uniforms.backgroundRotation.value.setFromMatrix4(pR.makeRotationFromEuler(Za)),C.material.toneMapped=ni.getTransfer(xe.colorSpace)!==ui,(P!==xe||I!==xe.version||F!==u.toneMapping)&&(C.material.needsUpdate=!0,P=xe,I=xe.version,F=u.toneMapping),C.layers.enableAll(),se.unshift(C,C.geometry,C.material,0,0,null)):xe&&xe.isTexture&&(A===void 0&&(A=new Rr(new gc(2,2),new Br({name:"BackgroundMaterial",uniforms:mc(us.background.uniforms),vertexShader:us.background.vertexShader,fragmentShader:us.background.fragmentShader,side:Fs,depthTest:!1,depthWrite:!1,fog:!1})),A.geometry.deleteAttribute("normal"),Object.defineProperty(A.material,"map",{get:function(){return this.uniforms.t2D.value}}),d.update(A)),A.material.uniforms.t2D.value=xe,A.material.uniforms.backgroundIntensity.value=ee.backgroundIntensity,A.material.toneMapped=ni.getTransfer(xe.colorSpace)!==ui,xe.matrixAutoUpdate===!0&&xe.updateMatrix(),A.material.uniforms.uvTransform.value.copy(xe.matrix),(P!==xe||I!==xe.version||F!==u.toneMapping)&&(A.material.needsUpdate=!0,P=xe,I=xe.version,F=u.toneMapping),A.layers.enableAll(),se.unshift(A,A.geometry,A.material,0,0,null))}function R(se,ee){se.getRGB(fu,xx(u)),l.buffers.color.setClear(fu.r,fu.g,fu.b,ee,v)}function oe(){C!==void 0&&(C.geometry.dispose(),C.material.dispose()),A!==void 0&&(A.geometry.dispose(),A.material.dispose())}return{getClearColor:function(){return M},setClearColor:function(se,ee=1){M.set(se),T=ee,R(M,T)},getClearAlpha:function(){return T},setClearAlpha:function(se){T=se,R(M,T)},render:Y,addToRenderList:U,dispose:oe}}function gR(u,n){const s=u.getParameter(u.MAX_VERTEX_ATTRIBS),l={},d=I(null);let m=d,v=!1;function M(q,he,Ne,Ie,Je){let Qe=!1;const Ze=P(Ie,Ne,he);m!==Ze&&(m=Ze,A(m.object)),Qe=F(q,Ie,Ne,Je),Qe&&W(q,Ie,Ne,Je),Je!==null&&n.update(Je,u.ELEMENT_ARRAY_BUFFER),(Qe||v)&&(v=!1,ee(q,he,Ne,Ie),Je!==null&&u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,n.get(Je).buffer))}function T(){return u.createVertexArray()}function A(q){return u.bindVertexArray(q)}function C(q){return u.deleteVertexArray(q)}function P(q,he,Ne){const Ie=Ne.wireframe===!0;let Je=l[q.id];Je===void 0&&(Je={},l[q.id]=Je);let Qe=Je[he.id];Qe===void 0&&(Qe={},Je[he.id]=Qe);let Ze=Qe[Ie];return Ze===void 0&&(Ze=I(T()),Qe[Ie]=Ze),Ze}function I(q){const he=[],Ne=[],Ie=[];for(let Je=0;Je<s;Je++)he[Je]=0,Ne[Je]=0,Ie[Je]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:he,enabledAttributes:Ne,attributeDivisors:Ie,object:q,attributes:{},index:null}}function F(q,he,Ne,Ie){const Je=m.attributes,Qe=he.attributes;let Ze=0;const rt=Ne.getAttributes();for(const Oe in rt)if(rt[Oe].location>=0){const kt=Je[Oe];let an=Qe[Oe];if(an===void 0&&(Oe==="instanceMatrix"&&q.instanceMatrix&&(an=q.instanceMatrix),Oe==="instanceColor"&&q.instanceColor&&(an=q.instanceColor)),kt===void 0||kt.attribute!==an||an&&kt.data!==an.data)return!0;Ze++}return m.attributesNum!==Ze||m.index!==Ie}function W(q,he,Ne,Ie){const Je={},Qe=he.attributes;let Ze=0;const rt=Ne.getAttributes();for(const Oe in rt)if(rt[Oe].location>=0){let kt=Qe[Oe];kt===void 0&&(Oe==="instanceMatrix"&&q.instanceMatrix&&(kt=q.instanceMatrix),Oe==="instanceColor"&&q.instanceColor&&(kt=q.instanceColor));const an={};an.attribute=kt,kt&&kt.data&&(an.data=kt.data),Je[Oe]=an,Ze++}m.attributes=Je,m.attributesNum=Ze,m.index=Ie}function Y(){const q=m.newAttributes;for(let he=0,Ne=q.length;he<Ne;he++)q[he]=0}function U(q){R(q,0)}function R(q,he){const Ne=m.newAttributes,Ie=m.enabledAttributes,Je=m.attributeDivisors;Ne[q]=1,Ie[q]===0&&(u.enableVertexAttribArray(q),Ie[q]=1),Je[q]!==he&&(u.vertexAttribDivisor(q,he),Je[q]=he)}function oe(){const q=m.newAttributes,he=m.enabledAttributes;for(let Ne=0,Ie=he.length;Ne<Ie;Ne++)he[Ne]!==q[Ne]&&(u.disableVertexAttribArray(Ne),he[Ne]=0)}function se(q,he,Ne,Ie,Je,Qe,Ze){Ze===!0?u.vertexAttribIPointer(q,he,Ne,Je,Qe):u.vertexAttribPointer(q,he,Ne,Ie,Je,Qe)}function ee(q,he,Ne,Ie){Y();const Je=Ie.attributes,Qe=Ne.getAttributes(),Ze=he.defaultAttributeValues;for(const rt in Qe){const Oe=Qe[rt];if(Oe.location>=0){let wt=Je[rt];if(wt===void 0&&(rt==="instanceMatrix"&&q.instanceMatrix&&(wt=q.instanceMatrix),rt==="instanceColor"&&q.instanceColor&&(wt=q.instanceColor)),wt!==void 0){const kt=wt.normalized,an=wt.itemSize,Cn=n.get(wt);if(Cn===void 0)continue;const ei=Cn.buffer,Ge=Cn.type,pt=Cn.bytesPerElement,Kt=Ge===u.INT||Ge===u.UNSIGNED_INT||wt.gpuType===Ap;if(wt.isInterleavedBufferAttribute){const ce=wt.data,ye=ce.stride,Ee=wt.offset;if(ce.isInstancedInterleavedBuffer){for(let Ue=0;Ue<Oe.locationSize;Ue++)R(Oe.location+Ue,ce.meshPerAttribute);q.isInstancedMesh!==!0&&Ie._maxInstanceCount===void 0&&(Ie._maxInstanceCount=ce.meshPerAttribute*ce.count)}else for(let Ue=0;Ue<Oe.locationSize;Ue++)U(Oe.location+Ue);u.bindBuffer(u.ARRAY_BUFFER,ei);for(let Ue=0;Ue<Oe.locationSize;Ue++)se(Oe.location+Ue,an/Oe.locationSize,Ge,kt,ye*pt,(Ee+an/Oe.locationSize*Ue)*pt,Kt)}else{if(wt.isInstancedBufferAttribute){for(let ce=0;ce<Oe.locationSize;ce++)R(Oe.location+ce,wt.meshPerAttribute);q.isInstancedMesh!==!0&&Ie._maxInstanceCount===void 0&&(Ie._maxInstanceCount=wt.meshPerAttribute*wt.count)}else for(let ce=0;ce<Oe.locationSize;ce++)U(Oe.location+ce);u.bindBuffer(u.ARRAY_BUFFER,ei);for(let ce=0;ce<Oe.locationSize;ce++)se(Oe.location+ce,an/Oe.locationSize,Ge,kt,an*pt,an/Oe.locationSize*ce*pt,Kt)}}else if(Ze!==void 0){const kt=Ze[rt];if(kt!==void 0)switch(kt.length){case 2:u.vertexAttrib2fv(Oe.location,kt);break;case 3:u.vertexAttrib3fv(Oe.location,kt);break;case 4:u.vertexAttrib4fv(Oe.location,kt);break;default:u.vertexAttrib1fv(Oe.location,kt)}}}}oe()}function xe(){ve();for(const q in l){const he=l[q];for(const Ne in he){const Ie=he[Ne];for(const Je in Ie)C(Ie[Je].object),delete Ie[Je];delete he[Ne]}delete l[q]}}function de(q){if(l[q.id]===void 0)return;const he=l[q.id];for(const Ne in he){const Ie=he[Ne];for(const Je in Ie)C(Ie[Je].object),delete Ie[Je];delete he[Ne]}delete l[q.id]}function le(q){for(const he in l){const Ne=l[he];if(Ne[q.id]===void 0)continue;const Ie=Ne[q.id];for(const Je in Ie)C(Ie[Je].object),delete Ie[Je];delete Ne[q.id]}}function ve(){K(),v=!0,m!==d&&(m=d,A(m.object))}function K(){d.geometry=null,d.program=null,d.wireframe=!1}return{setup:M,reset:ve,resetDefaultState:K,dispose:xe,releaseStatesOfGeometry:de,releaseStatesOfProgram:le,initAttributes:Y,enableAttribute:U,disableUnusedAttributes:oe}}function _R(u,n,s){let l;function d(A){l=A}function m(A,C){u.drawArrays(l,A,C),s.update(C,l,1)}function v(A,C,P){P!==0&&(u.drawArraysInstanced(l,A,C,P),s.update(C,l,P))}function M(A,C,P){if(P===0)return;n.get("WEBGL_multi_draw").multiDrawArraysWEBGL(l,A,0,C,0,P);let F=0;for(let W=0;W<P;W++)F+=C[W];s.update(F,l,1)}function T(A,C,P,I){if(P===0)return;const F=n.get("WEBGL_multi_draw");if(F===null)for(let W=0;W<A.length;W++)v(A[W],C[W],I[W]);else{F.multiDrawArraysInstancedWEBGL(l,A,0,C,0,I,0,P);let W=0;for(let Y=0;Y<P;Y++)W+=C[Y]*I[Y];s.update(W,l,1)}}this.setMode=d,this.render=m,this.renderInstances=v,this.renderMultiDraw=M,this.renderMultiDrawInstances=T}function xR(u,n,s,l){let d;function m(){if(d!==void 0)return d;if(n.has("EXT_texture_filter_anisotropic")===!0){const le=n.get("EXT_texture_filter_anisotropic");d=u.getParameter(le.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else d=0;return d}function v(le){return!(le!==ns&&l.convert(le)!==u.getParameter(u.IMPLEMENTATION_COLOR_READ_FORMAT))}function M(le){const ve=le===ml&&(n.has("EXT_color_buffer_half_float")||n.has("EXT_color_buffer_float"));return!(le!==Os&&l.convert(le)!==u.getParameter(u.IMPLEMENTATION_COLOR_READ_TYPE)&&le!==Ds&&!ve)}function T(le){if(le==="highp"){if(u.getShaderPrecisionFormat(u.VERTEX_SHADER,u.HIGH_FLOAT).precision>0&&u.getShaderPrecisionFormat(u.FRAGMENT_SHADER,u.HIGH_FLOAT).precision>0)return"highp";le="mediump"}return le==="mediump"&&u.getShaderPrecisionFormat(u.VERTEX_SHADER,u.MEDIUM_FLOAT).precision>0&&u.getShaderPrecisionFormat(u.FRAGMENT_SHADER,u.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let A=s.precision!==void 0?s.precision:"highp";const C=T(A);C!==A&&(console.warn("THREE.WebGLRenderer:",A,"not supported, using",C,"instead."),A=C);const P=s.logarithmicDepthBuffer===!0,I=s.reverseDepthBuffer===!0&&n.has("EXT_clip_control"),F=u.getParameter(u.MAX_TEXTURE_IMAGE_UNITS),W=u.getParameter(u.MAX_VERTEX_TEXTURE_IMAGE_UNITS),Y=u.getParameter(u.MAX_TEXTURE_SIZE),U=u.getParameter(u.MAX_CUBE_MAP_TEXTURE_SIZE),R=u.getParameter(u.MAX_VERTEX_ATTRIBS),oe=u.getParameter(u.MAX_VERTEX_UNIFORM_VECTORS),se=u.getParameter(u.MAX_VARYING_VECTORS),ee=u.getParameter(u.MAX_FRAGMENT_UNIFORM_VECTORS),xe=W>0,de=u.getParameter(u.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:m,getMaxPrecision:T,textureFormatReadable:v,textureTypeReadable:M,precision:A,logarithmicDepthBuffer:P,reverseDepthBuffer:I,maxTextures:F,maxVertexTextures:W,maxTextureSize:Y,maxCubemapSize:U,maxAttributes:R,maxVertexUniforms:oe,maxVaryings:se,maxFragmentUniforms:ee,vertexTextures:xe,maxSamples:de}}function vR(u){const n=this;let s=null,l=0,d=!1,m=!1;const v=new Ja,M=new Un,T={value:null,needsUpdate:!1};this.uniform=T,this.numPlanes=0,this.numIntersection=0,this.init=function(P,I){const F=P.length!==0||I||l!==0||d;return d=I,l=P.length,F},this.beginShadows=function(){m=!0,C(null)},this.endShadows=function(){m=!1},this.setGlobalState=function(P,I){s=C(P,I,0)},this.setState=function(P,I,F){const W=P.clippingPlanes,Y=P.clipIntersection,U=P.clipShadows,R=u.get(P);if(!d||W===null||W.length===0||m&&!U)m?C(null):A();else{const oe=m?0:l,se=oe*4;let ee=R.clippingState||null;T.value=ee,ee=C(W,I,se,F);for(let xe=0;xe!==se;++xe)ee[xe]=s[xe];R.clippingState=ee,this.numIntersection=Y?this.numPlanes:0,this.numPlanes+=oe}};function A(){T.value!==s&&(T.value=s,T.needsUpdate=l>0),n.numPlanes=l,n.numIntersection=0}function C(P,I,F,W){const Y=P!==null?P.length:0;let U=null;if(Y!==0){if(U=T.value,W!==!0||U===null){const R=F+Y*4,oe=I.matrixWorldInverse;M.getNormalMatrix(oe),(U===null||U.length<R)&&(U=new Float32Array(R));for(let se=0,ee=F;se!==Y;++se,ee+=4)v.copy(P[se]).applyMatrix4(oe,M),v.normal.toArray(U,ee),U[ee+3]=v.constant}T.value=U,T.needsUpdate=!0}return n.numPlanes=Y,n.numIntersection=0,U}}function yR(u){let n=new WeakMap;function s(v,M){return M===Yf?v.mapping=hc:M===Zf&&(v.mapping=uc),v}function l(v){if(v&&v.isTexture){const M=v.mapping;if(M===Yf||M===Zf)if(n.has(v)){const T=n.get(v).texture;return s(T,v.mapping)}else{const T=v.image;if(T&&T.height>0){const A=new xA(T.height);return A.fromEquirectangularTexture(u,v),n.set(v,A),v.addEventListener("dispose",d),s(A.texture,v.mapping)}else return null}}return v}function d(v){const M=v.target;M.removeEventListener("dispose",d);const T=n.get(M);T!==void 0&&(n.delete(M),T.dispose())}function m(){n=new WeakMap}return{get:l,dispose:m}}const sc=4,y0=[.125,.215,.35,.446,.526,.582],eo=20,If=new PA,M0=new Yn;let Lf=null,Df=0,Uf=0,Nf=!1;const ja=(1+Math.sqrt(5))/2,ic=1/ja,S0=[new Se(-ja,ic,0),new Se(ja,ic,0),new Se(-ic,0,ja),new Se(ic,0,ja),new Se(0,ja,-ic),new Se(0,ja,ic),new Se(-1,1,-1),new Se(1,1,-1),new Se(-1,1,1),new Se(1,1,1)];class E0{constructor(n){this._renderer=n,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(n,s=0,l=.1,d=100){Lf=this._renderer.getRenderTarget(),Df=this._renderer.getActiveCubeFace(),Uf=this._renderer.getActiveMipmapLevel(),Nf=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const m=this._allocateTargets();return m.depthBuffer=!0,this._sceneToCubeUV(n,l,d,m),s>0&&this._blur(m,0,0,s),this._applyPMREM(m),this._cleanup(m),m}fromEquirectangular(n,s=null){return this._fromTexture(n,s)}fromCubemap(n,s=null){return this._fromTexture(n,s)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=A0(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=T0(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(n){this._lodMax=Math.floor(Math.log2(n)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let n=0;n<this._lodPlanes.length;n++)this._lodPlanes[n].dispose()}_cleanup(n){this._renderer.setRenderTarget(Lf,Df,Uf),this._renderer.xr.enabled=Nf,n.scissorTest=!1,pu(n,0,0,n.width,n.height)}_fromTexture(n,s){n.mapping===hc||n.mapping===uc?this._setSize(n.image.length===0?16:n.image[0].width||n.image[0].image.width):this._setSize(n.image.width/4),Lf=this._renderer.getRenderTarget(),Df=this._renderer.getActiveCubeFace(),Uf=this._renderer.getActiveMipmapLevel(),Nf=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const l=s||this._allocateTargets();return this._textureToCubeUV(n,l),this._applyPMREM(l),this._cleanup(l),l}_allocateTargets(){const n=3*Math.max(this._cubeSize,112),s=4*this._cubeSize,l={magFilter:Or,minFilter:Or,generateMipmaps:!1,type:ml,format:ns,colorSpace:pc,depthBuffer:!1},d=b0(n,s,l);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==n||this._pingPongRenderTarget.height!==s){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=b0(n,s,l);const{_lodMax:m}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=MR(m)),this._blurMaterial=SR(m,n,s)}return d}_compileMaterial(n){const s=new Rr(this._lodPlanes[0],n);this._renderer.compile(s,If)}_sceneToCubeUV(n,s,l,d){const M=new Cr(90,1,s,l),T=[1,-1,1,1,1,1],A=[1,1,1,-1,-1,-1],C=this._renderer,P=C.autoClear,I=C.toneMapping;C.getClearColor(M0),C.toneMapping=ha,C.autoClear=!1;const F=new mx({name:"PMREM.Background",side:vr,depthWrite:!1,depthTest:!1}),W=new Rr(new vl,F);let Y=!1;const U=n.background;U?U.isColor&&(F.color.copy(U),n.background=null,Y=!0):(F.color.copy(M0),Y=!0);for(let R=0;R<6;R++){const oe=R%3;oe===0?(M.up.set(0,T[R],0),M.lookAt(A[R],0,0)):oe===1?(M.up.set(0,0,T[R]),M.lookAt(0,A[R],0)):(M.up.set(0,T[R],0),M.lookAt(0,0,A[R]));const se=this._cubeSize;pu(d,oe*se,R>2?se:0,se,se),C.setRenderTarget(d),Y&&C.render(W,M),C.render(n,M)}W.geometry.dispose(),W.material.dispose(),C.toneMapping=I,C.autoClear=P,n.background=U}_textureToCubeUV(n,s){const l=this._renderer,d=n.mapping===hc||n.mapping===uc;d?(this._cubemapMaterial===null&&(this._cubemapMaterial=A0()),this._cubemapMaterial.uniforms.flipEnvMap.value=n.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=T0());const m=d?this._cubemapMaterial:this._equirectMaterial,v=new Rr(this._lodPlanes[0],m),M=m.uniforms;M.envMap.value=n;const T=this._cubeSize;pu(s,0,0,3*T,2*T),l.setRenderTarget(s),l.render(v,If)}_applyPMREM(n){const s=this._renderer,l=s.autoClear;s.autoClear=!1;const d=this._lodPlanes.length;for(let m=1;m<d;m++){const v=Math.sqrt(this._sigmas[m]*this._sigmas[m]-this._sigmas[m-1]*this._sigmas[m-1]),M=S0[(d-m-1)%S0.length];this._blur(n,m-1,m,v,M)}s.autoClear=l}_blur(n,s,l,d,m){const v=this._pingPongRenderTarget;this._halfBlur(n,v,s,l,d,"latitudinal",m),this._halfBlur(v,n,l,l,d,"longitudinal",m)}_halfBlur(n,s,l,d,m,v,M){const T=this._renderer,A=this._blurMaterial;v!=="latitudinal"&&v!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const C=3,P=new Rr(this._lodPlanes[d],A),I=A.uniforms,F=this._sizeLods[l]-1,W=isFinite(m)?Math.PI/(2*F):2*Math.PI/(2*eo-1),Y=m/W,U=isFinite(m)?1+Math.floor(C*Y):eo;U>eo&&console.warn(`sigmaRadians, ${m}, is too large and will clip, as it requested ${U} samples when the maximum is set to ${eo}`);const R=[];let oe=0;for(let le=0;le<eo;++le){const ve=le/Y,K=Math.exp(-ve*ve/2);R.push(K),le===0?oe+=K:le<U&&(oe+=2*K)}for(let le=0;le<R.length;le++)R[le]=R[le]/oe;I.envMap.value=n.texture,I.samples.value=U,I.weights.value=R,I.latitudinal.value=v==="latitudinal",M&&(I.poleAxis.value=M);const{_lodMax:se}=this;I.dTheta.value=W,I.mipInt.value=se-l;const ee=this._sizeLods[d],xe=3*ee*(d>se-sc?d-se+sc:0),de=4*(this._cubeSize-ee);pu(s,xe,de,3*ee,2*ee),T.setRenderTarget(s),T.render(P,If)}}function MR(u){const n=[],s=[],l=[];let d=u;const m=u-sc+1+y0.length;for(let v=0;v<m;v++){const M=Math.pow(2,d);s.push(M);let T=1/M;v>u-sc?T=y0[v-u+sc-1]:v===0&&(T=0),l.push(T);const A=1/(M-2),C=-A,P=1+A,I=[C,C,P,C,P,P,C,C,P,P,C,P],F=6,W=6,Y=3,U=2,R=1,oe=new Float32Array(Y*W*F),se=new Float32Array(U*W*F),ee=new Float32Array(R*W*F);for(let de=0;de<F;de++){const le=de%3*2/3-1,ve=de>2?0:-1,K=[le,ve,0,le+2/3,ve,0,le+2/3,ve+1,0,le,ve,0,le+2/3,ve+1,0,le,ve+1,0];oe.set(K,Y*W*de),se.set(I,U*W*de);const q=[de,de,de,de,de,de];ee.set(q,R*W*de)}const xe=new so;xe.setAttribute("position",new ds(oe,Y)),xe.setAttribute("uv",new ds(se,U)),xe.setAttribute("faceIndex",new ds(ee,R)),n.push(xe),d>sc&&d--}return{lodPlanes:n,sizeLods:s,sigmas:l}}function b0(u,n,s){const l=new ro(u,n,s);return l.texture.mapping=Tu,l.texture.name="PMREM.cubeUv",l.scissorTest=!0,l}function pu(u,n,s,l,d){u.viewport.set(n,s,l,d),u.scissor.set(n,s,l,d)}function SR(u,n,s){const l=new Float32Array(eo),d=new Se(0,1,0);return new Br({name:"SphericalGaussianBlur",defines:{n:eo,CUBEUV_TEXEL_WIDTH:1/n,CUBEUV_TEXEL_HEIGHT:1/s,CUBEUV_MAX_MIP:`${u}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:l},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:d}},vertexShader:Np(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:la,depthTest:!1,depthWrite:!1})}function T0(){return new Br({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Np(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:la,depthTest:!1,depthWrite:!1})}function A0(){return new Br({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Np(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:la,depthTest:!1,depthWrite:!1})}function Np(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function ER(u){let n=new WeakMap,s=null;function l(M){if(M&&M.isTexture){const T=M.mapping,A=T===Yf||T===Zf,C=T===hc||T===uc;if(A||C){let P=n.get(M);const I=P!==void 0?P.texture.pmremVersion:0;if(M.isRenderTargetTexture&&M.pmremVersion!==I)return s===null&&(s=new E0(u)),P=A?s.fromEquirectangular(M,P):s.fromCubemap(M,P),P.texture.pmremVersion=M.pmremVersion,n.set(M,P),P.texture;if(P!==void 0)return P.texture;{const F=M.image;return A&&F&&F.height>0||C&&F&&d(F)?(s===null&&(s=new E0(u)),P=A?s.fromEquirectangular(M):s.fromCubemap(M),P.texture.pmremVersion=M.pmremVersion,n.set(M,P),M.addEventListener("dispose",m),P.texture):null}}}return M}function d(M){let T=0;const A=6;for(let C=0;C<A;C++)M[C]!==void 0&&T++;return T===A}function m(M){const T=M.target;T.removeEventListener("dispose",m);const A=n.get(T);A!==void 0&&(n.delete(T),A.dispose())}function v(){n=new WeakMap,s!==null&&(s.dispose(),s=null)}return{get:l,dispose:v}}function bR(u){const n={};function s(l){if(n[l]!==void 0)return n[l];let d;switch(l){case"WEBGL_depth_texture":d=u.getExtension("WEBGL_depth_texture")||u.getExtension("MOZ_WEBGL_depth_texture")||u.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":d=u.getExtension("EXT_texture_filter_anisotropic")||u.getExtension("MOZ_EXT_texture_filter_anisotropic")||u.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":d=u.getExtension("WEBGL_compressed_texture_s3tc")||u.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||u.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":d=u.getExtension("WEBGL_compressed_texture_pvrtc")||u.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:d=u.getExtension(l)}return n[l]=d,d}return{has:function(l){return s(l)!==null},init:function(){s("EXT_color_buffer_float"),s("WEBGL_clip_cull_distance"),s("OES_texture_float_linear"),s("EXT_color_buffer_half_float"),s("WEBGL_multisampled_render_to_texture"),s("WEBGL_render_shared_exponent")},get:function(l){const d=s(l);return d===null&&rc("THREE.WebGLRenderer: "+l+" extension not supported."),d}}}function TR(u,n,s,l){const d={},m=new WeakMap;function v(P){const I=P.target;I.index!==null&&n.remove(I.index);for(const W in I.attributes)n.remove(I.attributes[W]);I.removeEventListener("dispose",v),delete d[I.id];const F=m.get(I);F&&(n.remove(F),m.delete(I)),l.releaseStatesOfGeometry(I),I.isInstancedBufferGeometry===!0&&delete I._maxInstanceCount,s.memory.geometries--}function M(P,I){return d[I.id]===!0||(I.addEventListener("dispose",v),d[I.id]=!0,s.memory.geometries++),I}function T(P){const I=P.attributes;for(const F in I)n.update(I[F],u.ARRAY_BUFFER)}function A(P){const I=[],F=P.index,W=P.attributes.position;let Y=0;if(F!==null){const oe=F.array;Y=F.version;for(let se=0,ee=oe.length;se<ee;se+=3){const xe=oe[se+0],de=oe[se+1],le=oe[se+2];I.push(xe,de,de,le,le,xe)}}else if(W!==void 0){const oe=W.array;Y=W.version;for(let se=0,ee=oe.length/3-1;se<ee;se+=3){const xe=se+0,de=se+1,le=se+2;I.push(xe,de,de,le,le,xe)}}else return;const U=new(hx(I)?_x:gx)(I,1);U.version=Y;const R=m.get(P);R&&n.remove(R),m.set(P,U)}function C(P){const I=m.get(P);if(I){const F=P.index;F!==null&&I.version<F.version&&A(P)}else A(P);return m.get(P)}return{get:M,update:T,getWireframeAttribute:C}}function AR(u,n,s){let l;function d(I){l=I}let m,v;function M(I){m=I.type,v=I.bytesPerElement}function T(I,F){u.drawElements(l,F,m,I*v),s.update(F,l,1)}function A(I,F,W){W!==0&&(u.drawElementsInstanced(l,F,m,I*v,W),s.update(F,l,W))}function C(I,F,W){if(W===0)return;n.get("WEBGL_multi_draw").multiDrawElementsWEBGL(l,F,0,m,I,0,W);let U=0;for(let R=0;R<W;R++)U+=F[R];s.update(U,l,1)}function P(I,F,W,Y){if(W===0)return;const U=n.get("WEBGL_multi_draw");if(U===null)for(let R=0;R<I.length;R++)A(I[R]/v,F[R],Y[R]);else{U.multiDrawElementsInstancedWEBGL(l,F,0,m,I,0,Y,0,W);let R=0;for(let oe=0;oe<W;oe++)R+=F[oe]*Y[oe];s.update(R,l,1)}}this.setMode=d,this.setIndex=M,this.render=T,this.renderInstances=A,this.renderMultiDraw=C,this.renderMultiDrawInstances=P}function wR(u){const n={geometries:0,textures:0},s={frame:0,calls:0,triangles:0,points:0,lines:0};function l(m,v,M){switch(s.calls++,v){case u.TRIANGLES:s.triangles+=M*(m/3);break;case u.LINES:s.lines+=M*(m/2);break;case u.LINE_STRIP:s.lines+=M*(m-1);break;case u.LINE_LOOP:s.lines+=M*m;break;case u.POINTS:s.points+=M*m;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",v);break}}function d(){s.calls=0,s.triangles=0,s.points=0,s.lines=0}return{memory:n,render:s,programs:null,autoReset:!0,reset:d,update:l}}function CR(u,n,s){const l=new WeakMap,d=new di;function m(v,M,T){const A=v.morphTargetInfluences,C=M.morphAttributes.position||M.morphAttributes.normal||M.morphAttributes.color,P=C!==void 0?C.length:0;let I=l.get(M);if(I===void 0||I.count!==P){let q=function(){ve.dispose(),l.delete(M),M.removeEventListener("dispose",q)};var F=q;I!==void 0&&I.texture.dispose();const W=M.morphAttributes.position!==void 0,Y=M.morphAttributes.normal!==void 0,U=M.morphAttributes.color!==void 0,R=M.morphAttributes.position||[],oe=M.morphAttributes.normal||[],se=M.morphAttributes.color||[];let ee=0;W===!0&&(ee=1),Y===!0&&(ee=2),U===!0&&(ee=3);let xe=M.attributes.position.count*ee,de=1;xe>n.maxTextureSize&&(de=Math.ceil(xe/n.maxTextureSize),xe=n.maxTextureSize);const le=new Float32Array(xe*de*4*P),ve=new dx(le,xe,de,P);ve.type=Ds,ve.needsUpdate=!0;const K=ee*4;for(let he=0;he<P;he++){const Ne=R[he],Ie=oe[he],Je=se[he],Qe=xe*de*4*he;for(let Ze=0;Ze<Ne.count;Ze++){const rt=Ze*K;W===!0&&(d.fromBufferAttribute(Ne,Ze),le[Qe+rt+0]=d.x,le[Qe+rt+1]=d.y,le[Qe+rt+2]=d.z,le[Qe+rt+3]=0),Y===!0&&(d.fromBufferAttribute(Ie,Ze),le[Qe+rt+4]=d.x,le[Qe+rt+5]=d.y,le[Qe+rt+6]=d.z,le[Qe+rt+7]=0),U===!0&&(d.fromBufferAttribute(Je,Ze),le[Qe+rt+8]=d.x,le[Qe+rt+9]=d.y,le[Qe+rt+10]=d.z,le[Qe+rt+11]=Je.itemSize===4?d.w:1)}}I={count:P,texture:ve,size:new ii(xe,de)},l.set(M,I),M.addEventListener("dispose",q)}if(v.isInstancedMesh===!0&&v.morphTexture!==null)T.getUniforms().setValue(u,"morphTexture",v.morphTexture,s);else{let W=0;for(let U=0;U<A.length;U++)W+=A[U];const Y=M.morphTargetsRelative?1:1-W;T.getUniforms().setValue(u,"morphTargetBaseInfluence",Y),T.getUniforms().setValue(u,"morphTargetInfluences",A)}T.getUniforms().setValue(u,"morphTargetsTexture",I.texture,s),T.getUniforms().setValue(u,"morphTargetsTextureSize",I.size)}return{update:m}}function RR(u,n,s,l){let d=new WeakMap;function m(T){const A=l.render.frame,C=T.geometry,P=n.get(T,C);if(d.get(P)!==A&&(n.update(P),d.set(P,A)),T.isInstancedMesh&&(T.hasEventListener("dispose",M)===!1&&T.addEventListener("dispose",M),d.get(T)!==A&&(s.update(T.instanceMatrix,u.ARRAY_BUFFER),T.instanceColor!==null&&s.update(T.instanceColor,u.ARRAY_BUFFER),d.set(T,A))),T.isSkinnedMesh){const I=T.skeleton;d.get(I)!==A&&(I.update(),d.set(I,A))}return P}function v(){d=new WeakMap}function M(T){const A=T.target;A.removeEventListener("dispose",M),s.remove(A.instanceMatrix),A.instanceColor!==null&&s.remove(A.instanceColor)}return{update:m,dispose:v}}const bx=new ir,w0=new Mx(1,1),Tx=new dx,Ax=new tA,wx=new yx,C0=[],R0=[],P0=new Float32Array(16),I0=new Float32Array(9),L0=new Float32Array(4);function xc(u,n,s){const l=u[0];if(l<=0||l>0)return u;const d=n*s;let m=C0[d];if(m===void 0&&(m=new Float32Array(d),C0[d]=m),n!==0){l.toArray(m,0);for(let v=1,M=0;v!==n;++v)M+=s,u[v].toArray(m,M)}return m}function Oi(u,n){if(u.length!==n.length)return!1;for(let s=0,l=u.length;s<l;s++)if(u[s]!==n[s])return!1;return!0}function Bi(u,n){for(let s=0,l=n.length;s<l;s++)u[s]=n[s]}function wu(u,n){let s=R0[n];s===void 0&&(s=new Int32Array(n),R0[n]=s);for(let l=0;l!==n;++l)s[l]=u.allocateTextureUnit();return s}function PR(u,n){const s=this.cache;s[0]!==n&&(u.uniform1f(this.addr,n),s[0]=n)}function IR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y)&&(u.uniform2f(this.addr,n.x,n.y),s[0]=n.x,s[1]=n.y);else{if(Oi(s,n))return;u.uniform2fv(this.addr,n),Bi(s,n)}}function LR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z)&&(u.uniform3f(this.addr,n.x,n.y,n.z),s[0]=n.x,s[1]=n.y,s[2]=n.z);else if(n.r!==void 0)(s[0]!==n.r||s[1]!==n.g||s[2]!==n.b)&&(u.uniform3f(this.addr,n.r,n.g,n.b),s[0]=n.r,s[1]=n.g,s[2]=n.b);else{if(Oi(s,n))return;u.uniform3fv(this.addr,n),Bi(s,n)}}function DR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z||s[3]!==n.w)&&(u.uniform4f(this.addr,n.x,n.y,n.z,n.w),s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=n.w);else{if(Oi(s,n))return;u.uniform4fv(this.addr,n),Bi(s,n)}}function UR(u,n){const s=this.cache,l=n.elements;if(l===void 0){if(Oi(s,n))return;u.uniformMatrix2fv(this.addr,!1,n),Bi(s,n)}else{if(Oi(s,l))return;L0.set(l),u.uniformMatrix2fv(this.addr,!1,L0),Bi(s,l)}}function NR(u,n){const s=this.cache,l=n.elements;if(l===void 0){if(Oi(s,n))return;u.uniformMatrix3fv(this.addr,!1,n),Bi(s,n)}else{if(Oi(s,l))return;I0.set(l),u.uniformMatrix3fv(this.addr,!1,I0),Bi(s,l)}}function FR(u,n){const s=this.cache,l=n.elements;if(l===void 0){if(Oi(s,n))return;u.uniformMatrix4fv(this.addr,!1,n),Bi(s,n)}else{if(Oi(s,l))return;P0.set(l),u.uniformMatrix4fv(this.addr,!1,P0),Bi(s,l)}}function OR(u,n){const s=this.cache;s[0]!==n&&(u.uniform1i(this.addr,n),s[0]=n)}function BR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y)&&(u.uniform2i(this.addr,n.x,n.y),s[0]=n.x,s[1]=n.y);else{if(Oi(s,n))return;u.uniform2iv(this.addr,n),Bi(s,n)}}function zR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z)&&(u.uniform3i(this.addr,n.x,n.y,n.z),s[0]=n.x,s[1]=n.y,s[2]=n.z);else{if(Oi(s,n))return;u.uniform3iv(this.addr,n),Bi(s,n)}}function VR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z||s[3]!==n.w)&&(u.uniform4i(this.addr,n.x,n.y,n.z,n.w),s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=n.w);else{if(Oi(s,n))return;u.uniform4iv(this.addr,n),Bi(s,n)}}function kR(u,n){const s=this.cache;s[0]!==n&&(u.uniform1ui(this.addr,n),s[0]=n)}function HR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y)&&(u.uniform2ui(this.addr,n.x,n.y),s[0]=n.x,s[1]=n.y);else{if(Oi(s,n))return;u.uniform2uiv(this.addr,n),Bi(s,n)}}function GR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z)&&(u.uniform3ui(this.addr,n.x,n.y,n.z),s[0]=n.x,s[1]=n.y,s[2]=n.z);else{if(Oi(s,n))return;u.uniform3uiv(this.addr,n),Bi(s,n)}}function WR(u,n){const s=this.cache;if(n.x!==void 0)(s[0]!==n.x||s[1]!==n.y||s[2]!==n.z||s[3]!==n.w)&&(u.uniform4ui(this.addr,n.x,n.y,n.z,n.w),s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=n.w);else{if(Oi(s,n))return;u.uniform4uiv(this.addr,n),Bi(s,n)}}function XR(u,n,s){const l=this.cache,d=s.allocateTextureUnit();l[0]!==d&&(u.uniform1i(this.addr,d),l[0]=d);let m;this.type===u.SAMPLER_2D_SHADOW?(w0.compareFunction=lx,m=w0):m=bx,s.setTexture2D(n||m,d)}function qR(u,n,s){const l=this.cache,d=s.allocateTextureUnit();l[0]!==d&&(u.uniform1i(this.addr,d),l[0]=d),s.setTexture3D(n||Ax,d)}function YR(u,n,s){const l=this.cache,d=s.allocateTextureUnit();l[0]!==d&&(u.uniform1i(this.addr,d),l[0]=d),s.setTextureCube(n||wx,d)}function ZR(u,n,s){const l=this.cache,d=s.allocateTextureUnit();l[0]!==d&&(u.uniform1i(this.addr,d),l[0]=d),s.setTexture2DArray(n||Tx,d)}function $R(u){switch(u){case 5126:return PR;case 35664:return IR;case 35665:return LR;case 35666:return DR;case 35674:return UR;case 35675:return NR;case 35676:return FR;case 5124:case 35670:return OR;case 35667:case 35671:return BR;case 35668:case 35672:return zR;case 35669:case 35673:return VR;case 5125:return kR;case 36294:return HR;case 36295:return GR;case 36296:return WR;case 35678:case 36198:case 36298:case 36306:case 35682:return XR;case 35679:case 36299:case 36307:return qR;case 35680:case 36300:case 36308:case 36293:return YR;case 36289:case 36303:case 36311:case 36292:return ZR}}function KR(u,n){u.uniform1fv(this.addr,n)}function JR(u,n){const s=xc(n,this.size,2);u.uniform2fv(this.addr,s)}function jR(u,n){const s=xc(n,this.size,3);u.uniform3fv(this.addr,s)}function QR(u,n){const s=xc(n,this.size,4);u.uniform4fv(this.addr,s)}function e2(u,n){const s=xc(n,this.size,4);u.uniformMatrix2fv(this.addr,!1,s)}function t2(u,n){const s=xc(n,this.size,9);u.uniformMatrix3fv(this.addr,!1,s)}function n2(u,n){const s=xc(n,this.size,16);u.uniformMatrix4fv(this.addr,!1,s)}function i2(u,n){u.uniform1iv(this.addr,n)}function r2(u,n){u.uniform2iv(this.addr,n)}function s2(u,n){u.uniform3iv(this.addr,n)}function a2(u,n){u.uniform4iv(this.addr,n)}function o2(u,n){u.uniform1uiv(this.addr,n)}function c2(u,n){u.uniform2uiv(this.addr,n)}function l2(u,n){u.uniform3uiv(this.addr,n)}function h2(u,n){u.uniform4uiv(this.addr,n)}function u2(u,n,s){const l=this.cache,d=n.length,m=wu(s,d);Oi(l,m)||(u.uniform1iv(this.addr,m),Bi(l,m));for(let v=0;v!==d;++v)s.setTexture2D(n[v]||bx,m[v])}function d2(u,n,s){const l=this.cache,d=n.length,m=wu(s,d);Oi(l,m)||(u.uniform1iv(this.addr,m),Bi(l,m));for(let v=0;v!==d;++v)s.setTexture3D(n[v]||Ax,m[v])}function f2(u,n,s){const l=this.cache,d=n.length,m=wu(s,d);Oi(l,m)||(u.uniform1iv(this.addr,m),Bi(l,m));for(let v=0;v!==d;++v)s.setTextureCube(n[v]||wx,m[v])}function p2(u,n,s){const l=this.cache,d=n.length,m=wu(s,d);Oi(l,m)||(u.uniform1iv(this.addr,m),Bi(l,m));for(let v=0;v!==d;++v)s.setTexture2DArray(n[v]||Tx,m[v])}function m2(u){switch(u){case 5126:return KR;case 35664:return JR;case 35665:return jR;case 35666:return QR;case 35674:return e2;case 35675:return t2;case 35676:return n2;case 5124:case 35670:return i2;case 35667:case 35671:return r2;case 35668:case 35672:return s2;case 35669:case 35673:return a2;case 5125:return o2;case 36294:return c2;case 36295:return l2;case 36296:return h2;case 35678:case 36198:case 36298:case 36306:case 35682:return u2;case 35679:case 36299:case 36307:return d2;case 35680:case 36300:case 36308:case 36293:return f2;case 36289:case 36303:case 36311:case 36292:return p2}}class g2{constructor(n,s,l){this.id=n,this.addr=l,this.cache=[],this.type=s.type,this.setValue=$R(s.type)}}class _2{constructor(n,s,l){this.id=n,this.addr=l,this.cache=[],this.type=s.type,this.size=s.size,this.setValue=m2(s.type)}}class x2{constructor(n){this.id=n,this.seq=[],this.map={}}setValue(n,s,l){const d=this.seq;for(let m=0,v=d.length;m!==v;++m){const M=d[m];M.setValue(n,s[M.id],l)}}}const Ff=/(\w+)(\])?(\[|\.)?/g;function D0(u,n){u.seq.push(n),u.map[n.id]=n}function v2(u,n,s){const l=u.name,d=l.length;for(Ff.lastIndex=0;;){const m=Ff.exec(l),v=Ff.lastIndex;let M=m[1];const T=m[2]==="]",A=m[3];if(T&&(M=M|0),A===void 0||A==="["&&v+2===d){D0(s,A===void 0?new g2(M,u,n):new _2(M,u,n));break}else{let P=s.map[M];P===void 0&&(P=new x2(M),D0(s,P)),s=P}}}class Mu{constructor(n,s){this.seq=[],this.map={};const l=n.getProgramParameter(s,n.ACTIVE_UNIFORMS);for(let d=0;d<l;++d){const m=n.getActiveUniform(s,d),v=n.getUniformLocation(s,m.name);v2(m,v,this)}}setValue(n,s,l,d){const m=this.map[s];m!==void 0&&m.setValue(n,l,d)}setOptional(n,s,l){const d=s[l];d!==void 0&&this.setValue(n,l,d)}static upload(n,s,l,d){for(let m=0,v=s.length;m!==v;++m){const M=s[m],T=l[M.id];T.needsUpdate!==!1&&M.setValue(n,T.value,d)}}static seqWithValue(n,s){const l=[];for(let d=0,m=n.length;d!==m;++d){const v=n[d];v.id in s&&l.push(v)}return l}}function U0(u,n,s){const l=u.createShader(n);return u.shaderSource(l,s),u.compileShader(l),l}const y2=37297;let M2=0;function S2(u,n){const s=u.split(`
`),l=[],d=Math.max(n-6,0),m=Math.min(n+6,s.length);for(let v=d;v<m;v++){const M=v+1;l.push(`${M===n?">":" "} ${M}: ${s[v]}`)}return l.join(`
`)}const N0=new Un;function E2(u){ni._getMatrix(N0,ni.workingColorSpace,u);const n=`mat3( ${N0.elements.map(s=>s.toFixed(4))} )`;switch(ni.getTransfer(u)){case Su:return[n,"LinearTransferOETF"];case ui:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",u),[n,"LinearTransferOETF"]}}function F0(u,n,s){const l=u.getShaderParameter(n,u.COMPILE_STATUS),d=u.getShaderInfoLog(n).trim();if(l&&d==="")return"";const m=/ERROR: 0:(\d+)/.exec(d);if(m){const v=parseInt(m[1]);return s.toUpperCase()+`

`+d+`

`+S2(u.getShaderSource(n),v)}else return d}function b2(u,n){const s=E2(n);return[`vec4 ${u}( vec4 value ) {`,`	return ${s[1]}( vec4( value.rgb * ${s[0]}, value.a ) );`,"}"].join(`
`)}function T2(u,n){let s;switch(n){case AT:s="Linear";break;case wT:s="Reinhard";break;case CT:s="Cineon";break;case RT:s="ACESFilmic";break;case IT:s="AgX";break;case LT:s="Neutral";break;case PT:s="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",n),s="Linear"}return"vec3 "+u+"( vec3 color ) { return "+s+"ToneMapping( color ); }"}const mu=new Se;function A2(){ni.getLuminanceCoefficients(mu);const u=mu.x.toFixed(4),n=mu.y.toFixed(4),s=mu.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${u}, ${n}, ${s} );`,"	return dot( weights, rgb );","}"].join(`
`)}function w2(u){return[u.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",u.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ul).join(`
`)}function C2(u){const n=[];for(const s in u){const l=u[s];l!==!1&&n.push("#define "+s+" "+l)}return n.join(`
`)}function R2(u,n){const s={},l=u.getProgramParameter(n,u.ACTIVE_ATTRIBUTES);for(let d=0;d<l;d++){const m=u.getActiveAttrib(n,d),v=m.name;let M=1;m.type===u.FLOAT_MAT2&&(M=2),m.type===u.FLOAT_MAT3&&(M=3),m.type===u.FLOAT_MAT4&&(M=4),s[v]={type:m.type,location:u.getAttribLocation(n,v),locationSize:M}}return s}function ul(u){return u!==""}function O0(u,n){const s=n.numSpotLightShadows+n.numSpotLightMaps-n.numSpotLightShadowsWithMaps;return u.replace(/NUM_DIR_LIGHTS/g,n.numDirLights).replace(/NUM_SPOT_LIGHTS/g,n.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,n.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,s).replace(/NUM_RECT_AREA_LIGHTS/g,n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,n.numPointLights).replace(/NUM_HEMI_LIGHTS/g,n.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,n.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,n.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,n.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,n.numPointLightShadows)}function B0(u,n){return u.replace(/NUM_CLIPPING_PLANES/g,n.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,n.numClippingPlanes-n.numClipIntersection)}const P2=/^[ \t]*#include +<([\w\d./]+)>/gm;function bp(u){return u.replace(P2,L2)}const I2=new Map;function L2(u,n){let s=Fn[n];if(s===void 0){const l=I2.get(n);if(l!==void 0)s=Fn[l],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',n,l);else throw new Error("Can not resolve #include <"+n+">")}return bp(s)}const D2=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function z0(u){return u.replace(D2,U2)}function U2(u,n,s,l){let d="";for(let m=parseInt(n);m<parseInt(s);m++)d+=l.replace(/\[\s*i\s*\]/g,"[ "+m+" ]").replace(/UNROLLED_LOOP_INDEX/g,m);return d}function V0(u){let n=`precision ${u.precision} float;
	precision ${u.precision} int;
	precision ${u.precision} sampler2D;
	precision ${u.precision} samplerCube;
	precision ${u.precision} sampler3D;
	precision ${u.precision} sampler2DArray;
	precision ${u.precision} sampler2DShadow;
	precision ${u.precision} samplerCubeShadow;
	precision ${u.precision} sampler2DArrayShadow;
	precision ${u.precision} isampler2D;
	precision ${u.precision} isampler3D;
	precision ${u.precision} isamplerCube;
	precision ${u.precision} isampler2DArray;
	precision ${u.precision} usampler2D;
	precision ${u.precision} usampler3D;
	precision ${u.precision} usamplerCube;
	precision ${u.precision} usampler2DArray;
	`;return u.precision==="highp"?n+=`
#define HIGH_PRECISION`:u.precision==="mediump"?n+=`
#define MEDIUM_PRECISION`:u.precision==="lowp"&&(n+=`
#define LOW_PRECISION`),n}function N2(u){let n="SHADOWMAP_TYPE_BASIC";return u.shadowMapType===K0?n="SHADOWMAP_TYPE_PCF":u.shadowMapType===sT?n="SHADOWMAP_TYPE_PCF_SOFT":u.shadowMapType===Ls&&(n="SHADOWMAP_TYPE_VSM"),n}function F2(u){let n="ENVMAP_TYPE_CUBE";if(u.envMap)switch(u.envMapMode){case hc:case uc:n="ENVMAP_TYPE_CUBE";break;case Tu:n="ENVMAP_TYPE_CUBE_UV";break}return n}function O2(u){let n="ENVMAP_MODE_REFLECTION";if(u.envMap)switch(u.envMapMode){case uc:n="ENVMAP_MODE_REFRACTION";break}return n}function B2(u){let n="ENVMAP_BLENDING_NONE";if(u.envMap)switch(u.combine){case J0:n="ENVMAP_BLENDING_MULTIPLY";break;case bT:n="ENVMAP_BLENDING_MIX";break;case TT:n="ENVMAP_BLENDING_ADD";break}return n}function z2(u){const n=u.envMapCubeUVHeight;if(n===null)return null;const s=Math.log2(n)-2,l=1/n;return{texelWidth:1/(3*Math.max(Math.pow(2,s),7*16)),texelHeight:l,maxMip:s}}function V2(u,n,s,l){const d=u.getContext(),m=s.defines;let v=s.vertexShader,M=s.fragmentShader;const T=N2(s),A=F2(s),C=O2(s),P=B2(s),I=z2(s),F=w2(s),W=C2(m),Y=d.createProgram();let U,R,oe=s.glslVersion?"#version "+s.glslVersion+`
`:"";s.isRawShaderMaterial?(U=["#define SHADER_TYPE "+s.shaderType,"#define SHADER_NAME "+s.shaderName,W].filter(ul).join(`
`),U.length>0&&(U+=`
`),R=["#define SHADER_TYPE "+s.shaderType,"#define SHADER_NAME "+s.shaderName,W].filter(ul).join(`
`),R.length>0&&(R+=`
`)):(U=[V0(s),"#define SHADER_TYPE "+s.shaderType,"#define SHADER_NAME "+s.shaderName,W,s.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",s.batching?"#define USE_BATCHING":"",s.batchingColor?"#define USE_BATCHING_COLOR":"",s.instancing?"#define USE_INSTANCING":"",s.instancingColor?"#define USE_INSTANCING_COLOR":"",s.instancingMorph?"#define USE_INSTANCING_MORPH":"",s.useFog&&s.fog?"#define USE_FOG":"",s.useFog&&s.fogExp2?"#define FOG_EXP2":"",s.map?"#define USE_MAP":"",s.envMap?"#define USE_ENVMAP":"",s.envMap?"#define "+C:"",s.lightMap?"#define USE_LIGHTMAP":"",s.aoMap?"#define USE_AOMAP":"",s.bumpMap?"#define USE_BUMPMAP":"",s.normalMap?"#define USE_NORMALMAP":"",s.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",s.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",s.displacementMap?"#define USE_DISPLACEMENTMAP":"",s.emissiveMap?"#define USE_EMISSIVEMAP":"",s.anisotropy?"#define USE_ANISOTROPY":"",s.anisotropyMap?"#define USE_ANISOTROPYMAP":"",s.clearcoatMap?"#define USE_CLEARCOATMAP":"",s.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",s.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",s.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",s.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",s.specularMap?"#define USE_SPECULARMAP":"",s.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",s.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",s.roughnessMap?"#define USE_ROUGHNESSMAP":"",s.metalnessMap?"#define USE_METALNESSMAP":"",s.alphaMap?"#define USE_ALPHAMAP":"",s.alphaHash?"#define USE_ALPHAHASH":"",s.transmission?"#define USE_TRANSMISSION":"",s.transmissionMap?"#define USE_TRANSMISSIONMAP":"",s.thicknessMap?"#define USE_THICKNESSMAP":"",s.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",s.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",s.mapUv?"#define MAP_UV "+s.mapUv:"",s.alphaMapUv?"#define ALPHAMAP_UV "+s.alphaMapUv:"",s.lightMapUv?"#define LIGHTMAP_UV "+s.lightMapUv:"",s.aoMapUv?"#define AOMAP_UV "+s.aoMapUv:"",s.emissiveMapUv?"#define EMISSIVEMAP_UV "+s.emissiveMapUv:"",s.bumpMapUv?"#define BUMPMAP_UV "+s.bumpMapUv:"",s.normalMapUv?"#define NORMALMAP_UV "+s.normalMapUv:"",s.displacementMapUv?"#define DISPLACEMENTMAP_UV "+s.displacementMapUv:"",s.metalnessMapUv?"#define METALNESSMAP_UV "+s.metalnessMapUv:"",s.roughnessMapUv?"#define ROUGHNESSMAP_UV "+s.roughnessMapUv:"",s.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+s.anisotropyMapUv:"",s.clearcoatMapUv?"#define CLEARCOATMAP_UV "+s.clearcoatMapUv:"",s.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+s.clearcoatNormalMapUv:"",s.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+s.clearcoatRoughnessMapUv:"",s.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+s.iridescenceMapUv:"",s.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+s.iridescenceThicknessMapUv:"",s.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+s.sheenColorMapUv:"",s.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+s.sheenRoughnessMapUv:"",s.specularMapUv?"#define SPECULARMAP_UV "+s.specularMapUv:"",s.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+s.specularColorMapUv:"",s.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+s.specularIntensityMapUv:"",s.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+s.transmissionMapUv:"",s.thicknessMapUv?"#define THICKNESSMAP_UV "+s.thicknessMapUv:"",s.vertexTangents&&s.flatShading===!1?"#define USE_TANGENT":"",s.vertexColors?"#define USE_COLOR":"",s.vertexAlphas?"#define USE_COLOR_ALPHA":"",s.vertexUv1s?"#define USE_UV1":"",s.vertexUv2s?"#define USE_UV2":"",s.vertexUv3s?"#define USE_UV3":"",s.pointsUvs?"#define USE_POINTS_UV":"",s.flatShading?"#define FLAT_SHADED":"",s.skinning?"#define USE_SKINNING":"",s.morphTargets?"#define USE_MORPHTARGETS":"",s.morphNormals&&s.flatShading===!1?"#define USE_MORPHNORMALS":"",s.morphColors?"#define USE_MORPHCOLORS":"",s.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+s.morphTextureStride:"",s.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+s.morphTargetsCount:"",s.doubleSided?"#define DOUBLE_SIDED":"",s.flipSided?"#define FLIP_SIDED":"",s.shadowMapEnabled?"#define USE_SHADOWMAP":"",s.shadowMapEnabled?"#define "+T:"",s.sizeAttenuation?"#define USE_SIZEATTENUATION":"",s.numLightProbes>0?"#define USE_LIGHT_PROBES":"",s.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",s.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ul).join(`
`),R=[V0(s),"#define SHADER_TYPE "+s.shaderType,"#define SHADER_NAME "+s.shaderName,W,s.useFog&&s.fog?"#define USE_FOG":"",s.useFog&&s.fogExp2?"#define FOG_EXP2":"",s.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",s.map?"#define USE_MAP":"",s.matcap?"#define USE_MATCAP":"",s.envMap?"#define USE_ENVMAP":"",s.envMap?"#define "+A:"",s.envMap?"#define "+C:"",s.envMap?"#define "+P:"",I?"#define CUBEUV_TEXEL_WIDTH "+I.texelWidth:"",I?"#define CUBEUV_TEXEL_HEIGHT "+I.texelHeight:"",I?"#define CUBEUV_MAX_MIP "+I.maxMip+".0":"",s.lightMap?"#define USE_LIGHTMAP":"",s.aoMap?"#define USE_AOMAP":"",s.bumpMap?"#define USE_BUMPMAP":"",s.normalMap?"#define USE_NORMALMAP":"",s.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",s.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",s.emissiveMap?"#define USE_EMISSIVEMAP":"",s.anisotropy?"#define USE_ANISOTROPY":"",s.anisotropyMap?"#define USE_ANISOTROPYMAP":"",s.clearcoat?"#define USE_CLEARCOAT":"",s.clearcoatMap?"#define USE_CLEARCOATMAP":"",s.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",s.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",s.dispersion?"#define USE_DISPERSION":"",s.iridescence?"#define USE_IRIDESCENCE":"",s.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",s.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",s.specularMap?"#define USE_SPECULARMAP":"",s.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",s.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",s.roughnessMap?"#define USE_ROUGHNESSMAP":"",s.metalnessMap?"#define USE_METALNESSMAP":"",s.alphaMap?"#define USE_ALPHAMAP":"",s.alphaTest?"#define USE_ALPHATEST":"",s.alphaHash?"#define USE_ALPHAHASH":"",s.sheen?"#define USE_SHEEN":"",s.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",s.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",s.transmission?"#define USE_TRANSMISSION":"",s.transmissionMap?"#define USE_TRANSMISSIONMAP":"",s.thicknessMap?"#define USE_THICKNESSMAP":"",s.vertexTangents&&s.flatShading===!1?"#define USE_TANGENT":"",s.vertexColors||s.instancingColor||s.batchingColor?"#define USE_COLOR":"",s.vertexAlphas?"#define USE_COLOR_ALPHA":"",s.vertexUv1s?"#define USE_UV1":"",s.vertexUv2s?"#define USE_UV2":"",s.vertexUv3s?"#define USE_UV3":"",s.pointsUvs?"#define USE_POINTS_UV":"",s.gradientMap?"#define USE_GRADIENTMAP":"",s.flatShading?"#define FLAT_SHADED":"",s.doubleSided?"#define DOUBLE_SIDED":"",s.flipSided?"#define FLIP_SIDED":"",s.shadowMapEnabled?"#define USE_SHADOWMAP":"",s.shadowMapEnabled?"#define "+T:"",s.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",s.numLightProbes>0?"#define USE_LIGHT_PROBES":"",s.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",s.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",s.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",s.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",s.toneMapping!==ha?"#define TONE_MAPPING":"",s.toneMapping!==ha?Fn.tonemapping_pars_fragment:"",s.toneMapping!==ha?T2("toneMapping",s.toneMapping):"",s.dithering?"#define DITHERING":"",s.opaque?"#define OPAQUE":"",Fn.colorspace_pars_fragment,b2("linearToOutputTexel",s.outputColorSpace),A2(),s.useDepthPacking?"#define DEPTH_PACKING "+s.depthPacking:"",`
`].filter(ul).join(`
`)),v=bp(v),v=O0(v,s),v=B0(v,s),M=bp(M),M=O0(M,s),M=B0(M,s),v=z0(v),M=z0(M),s.isRawShaderMaterial!==!0&&(oe=`#version 300 es
`,U=[F,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+U,R=["#define varying in",s.glslVersion===K_?"":"layout(location = 0) out highp vec4 pc_fragColor;",s.glslVersion===K_?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+R);const se=oe+U+v,ee=oe+R+M,xe=U0(d,d.VERTEX_SHADER,se),de=U0(d,d.FRAGMENT_SHADER,ee);d.attachShader(Y,xe),d.attachShader(Y,de),s.index0AttributeName!==void 0?d.bindAttribLocation(Y,0,s.index0AttributeName):s.morphTargets===!0&&d.bindAttribLocation(Y,0,"position"),d.linkProgram(Y);function le(he){if(u.debug.checkShaderErrors){const Ne=d.getProgramInfoLog(Y).trim(),Ie=d.getShaderInfoLog(xe).trim(),Je=d.getShaderInfoLog(de).trim();let Qe=!0,Ze=!0;if(d.getProgramParameter(Y,d.LINK_STATUS)===!1)if(Qe=!1,typeof u.debug.onShaderError=="function")u.debug.onShaderError(d,Y,xe,de);else{const rt=F0(d,xe,"vertex"),Oe=F0(d,de,"fragment");console.error("THREE.WebGLProgram: Shader Error "+d.getError()+" - VALIDATE_STATUS "+d.getProgramParameter(Y,d.VALIDATE_STATUS)+`

Material Name: `+he.name+`
Material Type: `+he.type+`

Program Info Log: `+Ne+`
`+rt+`
`+Oe)}else Ne!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Ne):(Ie===""||Je==="")&&(Ze=!1);Ze&&(he.diagnostics={runnable:Qe,programLog:Ne,vertexShader:{log:Ie,prefix:U},fragmentShader:{log:Je,prefix:R}})}d.deleteShader(xe),d.deleteShader(de),ve=new Mu(d,Y),K=R2(d,Y)}let ve;this.getUniforms=function(){return ve===void 0&&le(this),ve};let K;this.getAttributes=function(){return K===void 0&&le(this),K};let q=s.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return q===!1&&(q=d.getProgramParameter(Y,y2)),q},this.destroy=function(){l.releaseStatesOfProgram(this),d.deleteProgram(Y),this.program=void 0},this.type=s.shaderType,this.name=s.shaderName,this.id=M2++,this.cacheKey=n,this.usedTimes=1,this.program=Y,this.vertexShader=xe,this.fragmentShader=de,this}let k2=0;class H2{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(n){const s=n.vertexShader,l=n.fragmentShader,d=this._getShaderStage(s),m=this._getShaderStage(l),v=this._getShaderCacheForMaterial(n);return v.has(d)===!1&&(v.add(d),d.usedTimes++),v.has(m)===!1&&(v.add(m),m.usedTimes++),this}remove(n){const s=this.materialCache.get(n);for(const l of s)l.usedTimes--,l.usedTimes===0&&this.shaderCache.delete(l.code);return this.materialCache.delete(n),this}getVertexShaderID(n){return this._getShaderStage(n.vertexShader).id}getFragmentShaderID(n){return this._getShaderStage(n.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(n){const s=this.materialCache;let l=s.get(n);return l===void 0&&(l=new Set,s.set(n,l)),l}_getShaderStage(n){const s=this.shaderCache;let l=s.get(n);return l===void 0&&(l=new G2(n),s.set(n,l)),l}}class G2{constructor(n){this.id=k2++,this.code=n,this.usedTimes=0}}function W2(u,n,s,l,d,m,v){const M=new fx,T=new H2,A=new Set,C=[],P=d.logarithmicDepthBuffer,I=d.vertexTextures;let F=d.precision;const W={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function Y(K){return A.add(K),K===0?"uv":`uv${K}`}function U(K,q,he,Ne,Ie){const Je=Ne.fog,Qe=Ie.geometry,Ze=K.isMeshStandardMaterial?Ne.environment:null,rt=(K.isMeshStandardMaterial?s:n).get(K.envMap||Ze),Oe=rt&&rt.mapping===Tu?rt.image.height:null,wt=W[K.type];K.precision!==null&&(F=d.getMaxPrecision(K.precision),F!==K.precision&&console.warn("THREE.WebGLProgram.getParameters:",K.precision,"not supported, using",F,"instead."));const kt=Qe.morphAttributes.position||Qe.morphAttributes.normal||Qe.morphAttributes.color,an=kt!==void 0?kt.length:0;let Cn=0;Qe.morphAttributes.position!==void 0&&(Cn=1),Qe.morphAttributes.normal!==void 0&&(Cn=2),Qe.morphAttributes.color!==void 0&&(Cn=3);let ei,Ge,pt,Kt;if(wt){const Wn=us[wt];ei=Wn.vertexShader,Ge=Wn.fragmentShader}else ei=K.vertexShader,Ge=K.fragmentShader,T.update(K),pt=T.getVertexShaderID(K),Kt=T.getFragmentShaderID(K);const ce=u.getRenderTarget(),ye=u.state.buffers.depth.getReversed(),Ee=Ie.isInstancedMesh===!0,Ue=Ie.isBatchedMesh===!0,ot=!!K.map,ht=!!K.matcap,Qt=!!rt,ie=!!K.aoMap,Dt=!!K.lightMap,bt=!!K.bumpMap,Tt=!!K.normalMap,gt=!!K.displacementMap,ln=!!K.emissiveMap,ut=!!K.metalnessMap,X=!!K.roughnessMap,B=K.anisotropy>0,ue=K.clearcoat>0,Le=K.dispersion>0,we=K.iridescence>0,Pe=K.sheen>0,yt=K.transmission>0,We=B&&!!K.anisotropyMap,ct=ue&&!!K.clearcoatMap,je=ue&&!!K.clearcoatNormalMap,ze=ue&&!!K.clearcoatRoughnessMap,it=we&&!!K.iridescenceMap,Ct=we&&!!K.iridescenceThicknessMap,Nt=Pe&&!!K.sheenColorMap,Rt=Pe&&!!K.sheenRoughnessMap,On=!!K.specularMap,pn=!!K.specularColorMap,Zn=!!K.specularIntensityMap,ae=yt&&!!K.transmissionMap,_t=yt&&!!K.thicknessMap,Fe=!!K.gradientMap,Xe=!!K.alphaMap,Bt=K.alphaTest>0,St=!!K.alphaHash,Mn=!!K.extensions;let pi=ha;K.toneMapped&&(ce===null||ce.isXRRenderTarget===!0)&&(pi=u.toneMapping);const vi={shaderID:wt,shaderType:K.type,shaderName:K.name,vertexShader:ei,fragmentShader:Ge,defines:K.defines,customVertexShaderID:pt,customFragmentShaderID:Kt,isRawShaderMaterial:K.isRawShaderMaterial===!0,glslVersion:K.glslVersion,precision:F,batching:Ue,batchingColor:Ue&&Ie._colorsTexture!==null,instancing:Ee,instancingColor:Ee&&Ie.instanceColor!==null,instancingMorph:Ee&&Ie.morphTexture!==null,supportsVertexTextures:I,outputColorSpace:ce===null?u.outputColorSpace:ce.isXRRenderTarget===!0?ce.texture.colorSpace:pc,alphaToCoverage:!!K.alphaToCoverage,map:ot,matcap:ht,envMap:Qt,envMapMode:Qt&&rt.mapping,envMapCubeUVHeight:Oe,aoMap:ie,lightMap:Dt,bumpMap:bt,normalMap:Tt,displacementMap:I&&gt,emissiveMap:ln,normalMapObjectSpace:Tt&&K.normalMapType===OT,normalMapTangentSpace:Tt&&K.normalMapType===FT,metalnessMap:ut,roughnessMap:X,anisotropy:B,anisotropyMap:We,clearcoat:ue,clearcoatMap:ct,clearcoatNormalMap:je,clearcoatRoughnessMap:ze,dispersion:Le,iridescence:we,iridescenceMap:it,iridescenceThicknessMap:Ct,sheen:Pe,sheenColorMap:Nt,sheenRoughnessMap:Rt,specularMap:On,specularColorMap:pn,specularIntensityMap:Zn,transmission:yt,transmissionMap:ae,thicknessMap:_t,gradientMap:Fe,opaque:K.transparent===!1&&K.blending===ac&&K.alphaToCoverage===!1,alphaMap:Xe,alphaTest:Bt,alphaHash:St,combine:K.combine,mapUv:ot&&Y(K.map.channel),aoMapUv:ie&&Y(K.aoMap.channel),lightMapUv:Dt&&Y(K.lightMap.channel),bumpMapUv:bt&&Y(K.bumpMap.channel),normalMapUv:Tt&&Y(K.normalMap.channel),displacementMapUv:gt&&Y(K.displacementMap.channel),emissiveMapUv:ln&&Y(K.emissiveMap.channel),metalnessMapUv:ut&&Y(K.metalnessMap.channel),roughnessMapUv:X&&Y(K.roughnessMap.channel),anisotropyMapUv:We&&Y(K.anisotropyMap.channel),clearcoatMapUv:ct&&Y(K.clearcoatMap.channel),clearcoatNormalMapUv:je&&Y(K.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ze&&Y(K.clearcoatRoughnessMap.channel),iridescenceMapUv:it&&Y(K.iridescenceMap.channel),iridescenceThicknessMapUv:Ct&&Y(K.iridescenceThicknessMap.channel),sheenColorMapUv:Nt&&Y(K.sheenColorMap.channel),sheenRoughnessMapUv:Rt&&Y(K.sheenRoughnessMap.channel),specularMapUv:On&&Y(K.specularMap.channel),specularColorMapUv:pn&&Y(K.specularColorMap.channel),specularIntensityMapUv:Zn&&Y(K.specularIntensityMap.channel),transmissionMapUv:ae&&Y(K.transmissionMap.channel),thicknessMapUv:_t&&Y(K.thicknessMap.channel),alphaMapUv:Xe&&Y(K.alphaMap.channel),vertexTangents:!!Qe.attributes.tangent&&(Tt||B),vertexColors:K.vertexColors,vertexAlphas:K.vertexColors===!0&&!!Qe.attributes.color&&Qe.attributes.color.itemSize===4,pointsUvs:Ie.isPoints===!0&&!!Qe.attributes.uv&&(ot||Xe),fog:!!Je,useFog:K.fog===!0,fogExp2:!!Je&&Je.isFogExp2,flatShading:K.flatShading===!0,sizeAttenuation:K.sizeAttenuation===!0,logarithmicDepthBuffer:P,reverseDepthBuffer:ye,skinning:Ie.isSkinnedMesh===!0,morphTargets:Qe.morphAttributes.position!==void 0,morphNormals:Qe.morphAttributes.normal!==void 0,morphColors:Qe.morphAttributes.color!==void 0,morphTargetsCount:an,morphTextureStride:Cn,numDirLights:q.directional.length,numPointLights:q.point.length,numSpotLights:q.spot.length,numSpotLightMaps:q.spotLightMap.length,numRectAreaLights:q.rectArea.length,numHemiLights:q.hemi.length,numDirLightShadows:q.directionalShadowMap.length,numPointLightShadows:q.pointShadowMap.length,numSpotLightShadows:q.spotShadowMap.length,numSpotLightShadowsWithMaps:q.numSpotLightShadowsWithMaps,numLightProbes:q.numLightProbes,numClippingPlanes:v.numPlanes,numClipIntersection:v.numIntersection,dithering:K.dithering,shadowMapEnabled:u.shadowMap.enabled&&he.length>0,shadowMapType:u.shadowMap.type,toneMapping:pi,decodeVideoTexture:ot&&K.map.isVideoTexture===!0&&ni.getTransfer(K.map.colorSpace)===ui,decodeVideoTextureEmissive:ln&&K.emissiveMap.isVideoTexture===!0&&ni.getTransfer(K.emissiveMap.colorSpace)===ui,premultipliedAlpha:K.premultipliedAlpha,doubleSided:K.side===Fr,flipSided:K.side===vr,useDepthPacking:K.depthPacking>=0,depthPacking:K.depthPacking||0,index0AttributeName:K.index0AttributeName,extensionClipCullDistance:Mn&&K.extensions.clipCullDistance===!0&&l.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Mn&&K.extensions.multiDraw===!0||Ue)&&l.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:l.has("KHR_parallel_shader_compile"),customProgramCacheKey:K.customProgramCacheKey()};return vi.vertexUv1s=A.has(1),vi.vertexUv2s=A.has(2),vi.vertexUv3s=A.has(3),A.clear(),vi}function R(K){const q=[];if(K.shaderID?q.push(K.shaderID):(q.push(K.customVertexShaderID),q.push(K.customFragmentShaderID)),K.defines!==void 0)for(const he in K.defines)q.push(he),q.push(K.defines[he]);return K.isRawShaderMaterial===!1&&(oe(q,K),se(q,K),q.push(u.outputColorSpace)),q.push(K.customProgramCacheKey),q.join()}function oe(K,q){K.push(q.precision),K.push(q.outputColorSpace),K.push(q.envMapMode),K.push(q.envMapCubeUVHeight),K.push(q.mapUv),K.push(q.alphaMapUv),K.push(q.lightMapUv),K.push(q.aoMapUv),K.push(q.bumpMapUv),K.push(q.normalMapUv),K.push(q.displacementMapUv),K.push(q.emissiveMapUv),K.push(q.metalnessMapUv),K.push(q.roughnessMapUv),K.push(q.anisotropyMapUv),K.push(q.clearcoatMapUv),K.push(q.clearcoatNormalMapUv),K.push(q.clearcoatRoughnessMapUv),K.push(q.iridescenceMapUv),K.push(q.iridescenceThicknessMapUv),K.push(q.sheenColorMapUv),K.push(q.sheenRoughnessMapUv),K.push(q.specularMapUv),K.push(q.specularColorMapUv),K.push(q.specularIntensityMapUv),K.push(q.transmissionMapUv),K.push(q.thicknessMapUv),K.push(q.combine),K.push(q.fogExp2),K.push(q.sizeAttenuation),K.push(q.morphTargetsCount),K.push(q.morphAttributeCount),K.push(q.numDirLights),K.push(q.numPointLights),K.push(q.numSpotLights),K.push(q.numSpotLightMaps),K.push(q.numHemiLights),K.push(q.numRectAreaLights),K.push(q.numDirLightShadows),K.push(q.numPointLightShadows),K.push(q.numSpotLightShadows),K.push(q.numSpotLightShadowsWithMaps),K.push(q.numLightProbes),K.push(q.shadowMapType),K.push(q.toneMapping),K.push(q.numClippingPlanes),K.push(q.numClipIntersection),K.push(q.depthPacking)}function se(K,q){M.disableAll(),q.supportsVertexTextures&&M.enable(0),q.instancing&&M.enable(1),q.instancingColor&&M.enable(2),q.instancingMorph&&M.enable(3),q.matcap&&M.enable(4),q.envMap&&M.enable(5),q.normalMapObjectSpace&&M.enable(6),q.normalMapTangentSpace&&M.enable(7),q.clearcoat&&M.enable(8),q.iridescence&&M.enable(9),q.alphaTest&&M.enable(10),q.vertexColors&&M.enable(11),q.vertexAlphas&&M.enable(12),q.vertexUv1s&&M.enable(13),q.vertexUv2s&&M.enable(14),q.vertexUv3s&&M.enable(15),q.vertexTangents&&M.enable(16),q.anisotropy&&M.enable(17),q.alphaHash&&M.enable(18),q.batching&&M.enable(19),q.dispersion&&M.enable(20),q.batchingColor&&M.enable(21),K.push(M.mask),M.disableAll(),q.fog&&M.enable(0),q.useFog&&M.enable(1),q.flatShading&&M.enable(2),q.logarithmicDepthBuffer&&M.enable(3),q.reverseDepthBuffer&&M.enable(4),q.skinning&&M.enable(5),q.morphTargets&&M.enable(6),q.morphNormals&&M.enable(7),q.morphColors&&M.enable(8),q.premultipliedAlpha&&M.enable(9),q.shadowMapEnabled&&M.enable(10),q.doubleSided&&M.enable(11),q.flipSided&&M.enable(12),q.useDepthPacking&&M.enable(13),q.dithering&&M.enable(14),q.transmission&&M.enable(15),q.sheen&&M.enable(16),q.opaque&&M.enable(17),q.pointsUvs&&M.enable(18),q.decodeVideoTexture&&M.enable(19),q.decodeVideoTextureEmissive&&M.enable(20),q.alphaToCoverage&&M.enable(21),K.push(M.mask)}function ee(K){const q=W[K.type];let he;if(q){const Ne=us[q];he=pA.clone(Ne.uniforms)}else he=K.uniforms;return he}function xe(K,q){let he;for(let Ne=0,Ie=C.length;Ne<Ie;Ne++){const Je=C[Ne];if(Je.cacheKey===q){he=Je,++he.usedTimes;break}}return he===void 0&&(he=new V2(u,q,K,m),C.push(he)),he}function de(K){if(--K.usedTimes===0){const q=C.indexOf(K);C[q]=C[C.length-1],C.pop(),K.destroy()}}function le(K){T.remove(K)}function ve(){T.dispose()}return{getParameters:U,getProgramCacheKey:R,getUniforms:ee,acquireProgram:xe,releaseProgram:de,releaseShaderCache:le,programs:C,dispose:ve}}function X2(){let u=new WeakMap;function n(v){return u.has(v)}function s(v){let M=u.get(v);return M===void 0&&(M={},u.set(v,M)),M}function l(v){u.delete(v)}function d(v,M,T){u.get(v)[M]=T}function m(){u=new WeakMap}return{has:n,get:s,remove:l,update:d,dispose:m}}function q2(u,n){return u.groupOrder!==n.groupOrder?u.groupOrder-n.groupOrder:u.renderOrder!==n.renderOrder?u.renderOrder-n.renderOrder:u.material.id!==n.material.id?u.material.id-n.material.id:u.z!==n.z?u.z-n.z:u.id-n.id}function k0(u,n){return u.groupOrder!==n.groupOrder?u.groupOrder-n.groupOrder:u.renderOrder!==n.renderOrder?u.renderOrder-n.renderOrder:u.z!==n.z?n.z-u.z:u.id-n.id}function H0(){const u=[];let n=0;const s=[],l=[],d=[];function m(){n=0,s.length=0,l.length=0,d.length=0}function v(P,I,F,W,Y,U){let R=u[n];return R===void 0?(R={id:P.id,object:P,geometry:I,material:F,groupOrder:W,renderOrder:P.renderOrder,z:Y,group:U},u[n]=R):(R.id=P.id,R.object=P,R.geometry=I,R.material=F,R.groupOrder=W,R.renderOrder=P.renderOrder,R.z=Y,R.group=U),n++,R}function M(P,I,F,W,Y,U){const R=v(P,I,F,W,Y,U);F.transmission>0?l.push(R):F.transparent===!0?d.push(R):s.push(R)}function T(P,I,F,W,Y,U){const R=v(P,I,F,W,Y,U);F.transmission>0?l.unshift(R):F.transparent===!0?d.unshift(R):s.unshift(R)}function A(P,I){s.length>1&&s.sort(P||q2),l.length>1&&l.sort(I||k0),d.length>1&&d.sort(I||k0)}function C(){for(let P=n,I=u.length;P<I;P++){const F=u[P];if(F.id===null)break;F.id=null,F.object=null,F.geometry=null,F.material=null,F.group=null}}return{opaque:s,transmissive:l,transparent:d,init:m,push:M,unshift:T,finish:C,sort:A}}function Y2(){let u=new WeakMap;function n(l,d){const m=u.get(l);let v;return m===void 0?(v=new H0,u.set(l,[v])):d>=m.length?(v=new H0,m.push(v)):v=m[d],v}function s(){u=new WeakMap}return{get:n,dispose:s}}function Z2(){const u={};return{get:function(n){if(u[n.id]!==void 0)return u[n.id];let s;switch(n.type){case"DirectionalLight":s={direction:new Se,color:new Yn};break;case"SpotLight":s={position:new Se,direction:new Se,color:new Yn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":s={position:new Se,color:new Yn,distance:0,decay:0};break;case"HemisphereLight":s={direction:new Se,skyColor:new Yn,groundColor:new Yn};break;case"RectAreaLight":s={color:new Yn,position:new Se,halfWidth:new Se,halfHeight:new Se};break}return u[n.id]=s,s}}}function $2(){const u={};return{get:function(n){if(u[n.id]!==void 0)return u[n.id];let s;switch(n.type){case"DirectionalLight":s={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ii};break;case"SpotLight":s={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ii};break;case"PointLight":s={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ii,shadowCameraNear:1,shadowCameraFar:1e3};break}return u[n.id]=s,s}}}let K2=0;function J2(u,n){return(n.castShadow?2:0)-(u.castShadow?2:0)+(n.map?1:0)-(u.map?1:0)}function j2(u){const n=new Z2,s=$2(),l={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let A=0;A<9;A++)l.probe.push(new Se);const d=new Se,m=new Mi,v=new Mi;function M(A){let C=0,P=0,I=0;for(let K=0;K<9;K++)l.probe[K].set(0,0,0);let F=0,W=0,Y=0,U=0,R=0,oe=0,se=0,ee=0,xe=0,de=0,le=0;A.sort(J2);for(let K=0,q=A.length;K<q;K++){const he=A[K],Ne=he.color,Ie=he.intensity,Je=he.distance,Qe=he.shadow&&he.shadow.map?he.shadow.map.texture:null;if(he.isAmbientLight)C+=Ne.r*Ie,P+=Ne.g*Ie,I+=Ne.b*Ie;else if(he.isLightProbe){for(let Ze=0;Ze<9;Ze++)l.probe[Ze].addScaledVector(he.sh.coefficients[Ze],Ie);le++}else if(he.isDirectionalLight){const Ze=n.get(he);if(Ze.color.copy(he.color).multiplyScalar(he.intensity),he.castShadow){const rt=he.shadow,Oe=s.get(he);Oe.shadowIntensity=rt.intensity,Oe.shadowBias=rt.bias,Oe.shadowNormalBias=rt.normalBias,Oe.shadowRadius=rt.radius,Oe.shadowMapSize=rt.mapSize,l.directionalShadow[F]=Oe,l.directionalShadowMap[F]=Qe,l.directionalShadowMatrix[F]=he.shadow.matrix,oe++}l.directional[F]=Ze,F++}else if(he.isSpotLight){const Ze=n.get(he);Ze.position.setFromMatrixPosition(he.matrixWorld),Ze.color.copy(Ne).multiplyScalar(Ie),Ze.distance=Je,Ze.coneCos=Math.cos(he.angle),Ze.penumbraCos=Math.cos(he.angle*(1-he.penumbra)),Ze.decay=he.decay,l.spot[Y]=Ze;const rt=he.shadow;if(he.map&&(l.spotLightMap[xe]=he.map,xe++,rt.updateMatrices(he),he.castShadow&&de++),l.spotLightMatrix[Y]=rt.matrix,he.castShadow){const Oe=s.get(he);Oe.shadowIntensity=rt.intensity,Oe.shadowBias=rt.bias,Oe.shadowNormalBias=rt.normalBias,Oe.shadowRadius=rt.radius,Oe.shadowMapSize=rt.mapSize,l.spotShadow[Y]=Oe,l.spotShadowMap[Y]=Qe,ee++}Y++}else if(he.isRectAreaLight){const Ze=n.get(he);Ze.color.copy(Ne).multiplyScalar(Ie),Ze.halfWidth.set(he.width*.5,0,0),Ze.halfHeight.set(0,he.height*.5,0),l.rectArea[U]=Ze,U++}else if(he.isPointLight){const Ze=n.get(he);if(Ze.color.copy(he.color).multiplyScalar(he.intensity),Ze.distance=he.distance,Ze.decay=he.decay,he.castShadow){const rt=he.shadow,Oe=s.get(he);Oe.shadowIntensity=rt.intensity,Oe.shadowBias=rt.bias,Oe.shadowNormalBias=rt.normalBias,Oe.shadowRadius=rt.radius,Oe.shadowMapSize=rt.mapSize,Oe.shadowCameraNear=rt.camera.near,Oe.shadowCameraFar=rt.camera.far,l.pointShadow[W]=Oe,l.pointShadowMap[W]=Qe,l.pointShadowMatrix[W]=he.shadow.matrix,se++}l.point[W]=Ze,W++}else if(he.isHemisphereLight){const Ze=n.get(he);Ze.skyColor.copy(he.color).multiplyScalar(Ie),Ze.groundColor.copy(he.groundColor).multiplyScalar(Ie),l.hemi[R]=Ze,R++}}U>0&&(u.has("OES_texture_float_linear")===!0?(l.rectAreaLTC1=Lt.LTC_FLOAT_1,l.rectAreaLTC2=Lt.LTC_FLOAT_2):(l.rectAreaLTC1=Lt.LTC_HALF_1,l.rectAreaLTC2=Lt.LTC_HALF_2)),l.ambient[0]=C,l.ambient[1]=P,l.ambient[2]=I;const ve=l.hash;(ve.directionalLength!==F||ve.pointLength!==W||ve.spotLength!==Y||ve.rectAreaLength!==U||ve.hemiLength!==R||ve.numDirectionalShadows!==oe||ve.numPointShadows!==se||ve.numSpotShadows!==ee||ve.numSpotMaps!==xe||ve.numLightProbes!==le)&&(l.directional.length=F,l.spot.length=Y,l.rectArea.length=U,l.point.length=W,l.hemi.length=R,l.directionalShadow.length=oe,l.directionalShadowMap.length=oe,l.pointShadow.length=se,l.pointShadowMap.length=se,l.spotShadow.length=ee,l.spotShadowMap.length=ee,l.directionalShadowMatrix.length=oe,l.pointShadowMatrix.length=se,l.spotLightMatrix.length=ee+xe-de,l.spotLightMap.length=xe,l.numSpotLightShadowsWithMaps=de,l.numLightProbes=le,ve.directionalLength=F,ve.pointLength=W,ve.spotLength=Y,ve.rectAreaLength=U,ve.hemiLength=R,ve.numDirectionalShadows=oe,ve.numPointShadows=se,ve.numSpotShadows=ee,ve.numSpotMaps=xe,ve.numLightProbes=le,l.version=K2++)}function T(A,C){let P=0,I=0,F=0,W=0,Y=0;const U=C.matrixWorldInverse;for(let R=0,oe=A.length;R<oe;R++){const se=A[R];if(se.isDirectionalLight){const ee=l.directional[P];ee.direction.setFromMatrixPosition(se.matrixWorld),d.setFromMatrixPosition(se.target.matrixWorld),ee.direction.sub(d),ee.direction.transformDirection(U),P++}else if(se.isSpotLight){const ee=l.spot[F];ee.position.setFromMatrixPosition(se.matrixWorld),ee.position.applyMatrix4(U),ee.direction.setFromMatrixPosition(se.matrixWorld),d.setFromMatrixPosition(se.target.matrixWorld),ee.direction.sub(d),ee.direction.transformDirection(U),F++}else if(se.isRectAreaLight){const ee=l.rectArea[W];ee.position.setFromMatrixPosition(se.matrixWorld),ee.position.applyMatrix4(U),v.identity(),m.copy(se.matrixWorld),m.premultiply(U),v.extractRotation(m),ee.halfWidth.set(se.width*.5,0,0),ee.halfHeight.set(0,se.height*.5,0),ee.halfWidth.applyMatrix4(v),ee.halfHeight.applyMatrix4(v),W++}else if(se.isPointLight){const ee=l.point[I];ee.position.setFromMatrixPosition(se.matrixWorld),ee.position.applyMatrix4(U),I++}else if(se.isHemisphereLight){const ee=l.hemi[Y];ee.direction.setFromMatrixPosition(se.matrixWorld),ee.direction.transformDirection(U),Y++}}}return{setup:M,setupView:T,state:l}}function G0(u){const n=new j2(u),s=[],l=[];function d(C){A.camera=C,s.length=0,l.length=0}function m(C){s.push(C)}function v(C){l.push(C)}function M(){n.setup(s)}function T(C){n.setupView(s,C)}const A={lightsArray:s,shadowsArray:l,camera:null,lights:n,transmissionRenderTarget:{}};return{init:d,state:A,setupLights:M,setupLightsView:T,pushLight:m,pushShadow:v}}function Q2(u){let n=new WeakMap;function s(d,m=0){const v=n.get(d);let M;return v===void 0?(M=new G0(u),n.set(d,[M])):m>=v.length?(M=new G0(u),v.push(M)):M=v[m],M}function l(){n=new WeakMap}return{get:s,dispose:l}}const eP=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,tP=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function nP(u,n,s){let l=new Dp;const d=new ii,m=new ii,v=new di,M=new SA({depthPacking:NT}),T=new EA,A={},C=s.maxTextureSize,P={[Fs]:vr,[vr]:Fs,[Fr]:Fr},I=new Br({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ii},radius:{value:4}},vertexShader:eP,fragmentShader:tP}),F=I.clone();F.defines.HORIZONTAL_PASS=1;const W=new so;W.setAttribute("position",new ds(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const Y=new Rr(W,I),U=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=K0;let R=this.type;this.render=function(de,le,ve){if(U.enabled===!1||U.autoUpdate===!1&&U.needsUpdate===!1||de.length===0)return;const K=u.getRenderTarget(),q=u.getActiveCubeFace(),he=u.getActiveMipmapLevel(),Ne=u.state;Ne.setBlending(la),Ne.buffers.color.setClear(1,1,1,1),Ne.buffers.depth.setTest(!0),Ne.setScissorTest(!1);const Ie=R!==Ls&&this.type===Ls,Je=R===Ls&&this.type!==Ls;for(let Qe=0,Ze=de.length;Qe<Ze;Qe++){const rt=de[Qe],Oe=rt.shadow;if(Oe===void 0){console.warn("THREE.WebGLShadowMap:",rt,"has no shadow.");continue}if(Oe.autoUpdate===!1&&Oe.needsUpdate===!1)continue;d.copy(Oe.mapSize);const wt=Oe.getFrameExtents();if(d.multiply(wt),m.copy(Oe.mapSize),(d.x>C||d.y>C)&&(d.x>C&&(m.x=Math.floor(C/wt.x),d.x=m.x*wt.x,Oe.mapSize.x=m.x),d.y>C&&(m.y=Math.floor(C/wt.y),d.y=m.y*wt.y,Oe.mapSize.y=m.y)),Oe.map===null||Ie===!0||Je===!0){const an=this.type!==Ls?{minFilter:is,magFilter:is}:{};Oe.map!==null&&Oe.map.dispose(),Oe.map=new ro(d.x,d.y,an),Oe.map.texture.name=rt.name+".shadowMap",Oe.camera.updateProjectionMatrix()}u.setRenderTarget(Oe.map),u.clear();const kt=Oe.getViewportCount();for(let an=0;an<kt;an++){const Cn=Oe.getViewport(an);v.set(m.x*Cn.x,m.y*Cn.y,m.x*Cn.z,m.y*Cn.w),Ne.viewport(v),Oe.updateMatrices(rt,an),l=Oe.getFrustum(),ee(le,ve,Oe.camera,rt,this.type)}Oe.isPointLightShadow!==!0&&this.type===Ls&&oe(Oe,ve),Oe.needsUpdate=!1}R=this.type,U.needsUpdate=!1,u.setRenderTarget(K,q,he)};function oe(de,le){const ve=n.update(Y);I.defines.VSM_SAMPLES!==de.blurSamples&&(I.defines.VSM_SAMPLES=de.blurSamples,F.defines.VSM_SAMPLES=de.blurSamples,I.needsUpdate=!0,F.needsUpdate=!0),de.mapPass===null&&(de.mapPass=new ro(d.x,d.y)),I.uniforms.shadow_pass.value=de.map.texture,I.uniforms.resolution.value=de.mapSize,I.uniforms.radius.value=de.radius,u.setRenderTarget(de.mapPass),u.clear(),u.renderBufferDirect(le,null,ve,I,Y,null),F.uniforms.shadow_pass.value=de.mapPass.texture,F.uniforms.resolution.value=de.mapSize,F.uniforms.radius.value=de.radius,u.setRenderTarget(de.map),u.clear(),u.renderBufferDirect(le,null,ve,F,Y,null)}function se(de,le,ve,K){let q=null;const he=ve.isPointLight===!0?de.customDistanceMaterial:de.customDepthMaterial;if(he!==void 0)q=he;else if(q=ve.isPointLight===!0?T:M,u.localClippingEnabled&&le.clipShadows===!0&&Array.isArray(le.clippingPlanes)&&le.clippingPlanes.length!==0||le.displacementMap&&le.displacementScale!==0||le.alphaMap&&le.alphaTest>0||le.map&&le.alphaTest>0){const Ne=q.uuid,Ie=le.uuid;let Je=A[Ne];Je===void 0&&(Je={},A[Ne]=Je);let Qe=Je[Ie];Qe===void 0&&(Qe=q.clone(),Je[Ie]=Qe,le.addEventListener("dispose",xe)),q=Qe}if(q.visible=le.visible,q.wireframe=le.wireframe,K===Ls?q.side=le.shadowSide!==null?le.shadowSide:le.side:q.side=le.shadowSide!==null?le.shadowSide:P[le.side],q.alphaMap=le.alphaMap,q.alphaTest=le.alphaTest,q.map=le.map,q.clipShadows=le.clipShadows,q.clippingPlanes=le.clippingPlanes,q.clipIntersection=le.clipIntersection,q.displacementMap=le.displacementMap,q.displacementScale=le.displacementScale,q.displacementBias=le.displacementBias,q.wireframeLinewidth=le.wireframeLinewidth,q.linewidth=le.linewidth,ve.isPointLight===!0&&q.isMeshDistanceMaterial===!0){const Ne=u.properties.get(q);Ne.light=ve}return q}function ee(de,le,ve,K,q){if(de.visible===!1)return;if(de.layers.test(le.layers)&&(de.isMesh||de.isLine||de.isPoints)&&(de.castShadow||de.receiveShadow&&q===Ls)&&(!de.frustumCulled||l.intersectsObject(de))){de.modelViewMatrix.multiplyMatrices(ve.matrixWorldInverse,de.matrixWorld);const Ie=n.update(de),Je=de.material;if(Array.isArray(Je)){const Qe=Ie.groups;for(let Ze=0,rt=Qe.length;Ze<rt;Ze++){const Oe=Qe[Ze],wt=Je[Oe.materialIndex];if(wt&&wt.visible){const kt=se(de,wt,K,q);de.onBeforeShadow(u,de,le,ve,Ie,kt,Oe),u.renderBufferDirect(ve,null,Ie,kt,de,Oe),de.onAfterShadow(u,de,le,ve,Ie,kt,Oe)}}}else if(Je.visible){const Qe=se(de,Je,K,q);de.onBeforeShadow(u,de,le,ve,Ie,Qe,null),u.renderBufferDirect(ve,null,Ie,Qe,de,null),de.onAfterShadow(u,de,le,ve,Ie,Qe,null)}}const Ne=de.children;for(let Ie=0,Je=Ne.length;Ie<Je;Ie++)ee(Ne[Ie],le,ve,K,q)}function xe(de){de.target.removeEventListener("dispose",xe);for(const ve in A){const K=A[ve],q=de.target.uuid;q in K&&(K[q].dispose(),delete K[q])}}}const iP={[Vf]:kf,[Hf]:Xf,[Gf]:qf,[lc]:Wf,[kf]:Vf,[Xf]:Hf,[qf]:Gf,[Wf]:lc};function rP(u,n){function s(){let ae=!1;const _t=new di;let Fe=null;const Xe=new di(0,0,0,0);return{setMask:function(Bt){Fe!==Bt&&!ae&&(u.colorMask(Bt,Bt,Bt,Bt),Fe=Bt)},setLocked:function(Bt){ae=Bt},setClear:function(Bt,St,Mn,pi,vi){vi===!0&&(Bt*=pi,St*=pi,Mn*=pi),_t.set(Bt,St,Mn,pi),Xe.equals(_t)===!1&&(u.clearColor(Bt,St,Mn,pi),Xe.copy(_t))},reset:function(){ae=!1,Fe=null,Xe.set(-1,0,0,0)}}}function l(){let ae=!1,_t=!1,Fe=null,Xe=null,Bt=null;return{setReversed:function(St){if(_t!==St){const Mn=n.get("EXT_clip_control");_t?Mn.clipControlEXT(Mn.LOWER_LEFT_EXT,Mn.ZERO_TO_ONE_EXT):Mn.clipControlEXT(Mn.LOWER_LEFT_EXT,Mn.NEGATIVE_ONE_TO_ONE_EXT);const pi=Bt;Bt=null,this.setClear(pi)}_t=St},getReversed:function(){return _t},setTest:function(St){St?ce(u.DEPTH_TEST):ye(u.DEPTH_TEST)},setMask:function(St){Fe!==St&&!ae&&(u.depthMask(St),Fe=St)},setFunc:function(St){if(_t&&(St=iP[St]),Xe!==St){switch(St){case Vf:u.depthFunc(u.NEVER);break;case kf:u.depthFunc(u.ALWAYS);break;case Hf:u.depthFunc(u.LESS);break;case lc:u.depthFunc(u.LEQUAL);break;case Gf:u.depthFunc(u.EQUAL);break;case Wf:u.depthFunc(u.GEQUAL);break;case Xf:u.depthFunc(u.GREATER);break;case qf:u.depthFunc(u.NOTEQUAL);break;default:u.depthFunc(u.LEQUAL)}Xe=St}},setLocked:function(St){ae=St},setClear:function(St){Bt!==St&&(_t&&(St=1-St),u.clearDepth(St),Bt=St)},reset:function(){ae=!1,Fe=null,Xe=null,Bt=null,_t=!1}}}function d(){let ae=!1,_t=null,Fe=null,Xe=null,Bt=null,St=null,Mn=null,pi=null,vi=null;return{setTest:function(Wn){ae||(Wn?ce(u.STENCIL_TEST):ye(u.STENCIL_TEST))},setMask:function(Wn){_t!==Wn&&!ae&&(u.stencilMask(Wn),_t=Wn)},setFunc:function(Wn,wi,_i){(Fe!==Wn||Xe!==wi||Bt!==_i)&&(u.stencilFunc(Wn,wi,_i),Fe=Wn,Xe=wi,Bt=_i)},setOp:function(Wn,wi,_i){(St!==Wn||Mn!==wi||pi!==_i)&&(u.stencilOp(Wn,wi,_i),St=Wn,Mn=wi,pi=_i)},setLocked:function(Wn){ae=Wn},setClear:function(Wn){vi!==Wn&&(u.clearStencil(Wn),vi=Wn)},reset:function(){ae=!1,_t=null,Fe=null,Xe=null,Bt=null,St=null,Mn=null,pi=null,vi=null}}}const m=new s,v=new l,M=new d,T=new WeakMap,A=new WeakMap;let C={},P={},I=new WeakMap,F=[],W=null,Y=!1,U=null,R=null,oe=null,se=null,ee=null,xe=null,de=null,le=new Yn(0,0,0),ve=0,K=!1,q=null,he=null,Ne=null,Ie=null,Je=null;const Qe=u.getParameter(u.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Ze=!1,rt=0;const Oe=u.getParameter(u.VERSION);Oe.indexOf("WebGL")!==-1?(rt=parseFloat(/^WebGL (\d)/.exec(Oe)[1]),Ze=rt>=1):Oe.indexOf("OpenGL ES")!==-1&&(rt=parseFloat(/^OpenGL ES (\d)/.exec(Oe)[1]),Ze=rt>=2);let wt=null,kt={};const an=u.getParameter(u.SCISSOR_BOX),Cn=u.getParameter(u.VIEWPORT),ei=new di().fromArray(an),Ge=new di().fromArray(Cn);function pt(ae,_t,Fe,Xe){const Bt=new Uint8Array(4),St=u.createTexture();u.bindTexture(ae,St),u.texParameteri(ae,u.TEXTURE_MIN_FILTER,u.NEAREST),u.texParameteri(ae,u.TEXTURE_MAG_FILTER,u.NEAREST);for(let Mn=0;Mn<Fe;Mn++)ae===u.TEXTURE_3D||ae===u.TEXTURE_2D_ARRAY?u.texImage3D(_t,0,u.RGBA,1,1,Xe,0,u.RGBA,u.UNSIGNED_BYTE,Bt):u.texImage2D(_t+Mn,0,u.RGBA,1,1,0,u.RGBA,u.UNSIGNED_BYTE,Bt);return St}const Kt={};Kt[u.TEXTURE_2D]=pt(u.TEXTURE_2D,u.TEXTURE_2D,1),Kt[u.TEXTURE_CUBE_MAP]=pt(u.TEXTURE_CUBE_MAP,u.TEXTURE_CUBE_MAP_POSITIVE_X,6),Kt[u.TEXTURE_2D_ARRAY]=pt(u.TEXTURE_2D_ARRAY,u.TEXTURE_2D_ARRAY,1,1),Kt[u.TEXTURE_3D]=pt(u.TEXTURE_3D,u.TEXTURE_3D,1,1),m.setClear(0,0,0,1),v.setClear(1),M.setClear(0),ce(u.DEPTH_TEST),v.setFunc(lc),bt(!1),Tt(W_),ce(u.CULL_FACE),ie(la);function ce(ae){C[ae]!==!0&&(u.enable(ae),C[ae]=!0)}function ye(ae){C[ae]!==!1&&(u.disable(ae),C[ae]=!1)}function Ee(ae,_t){return P[ae]!==_t?(u.bindFramebuffer(ae,_t),P[ae]=_t,ae===u.DRAW_FRAMEBUFFER&&(P[u.FRAMEBUFFER]=_t),ae===u.FRAMEBUFFER&&(P[u.DRAW_FRAMEBUFFER]=_t),!0):!1}function Ue(ae,_t){let Fe=F,Xe=!1;if(ae){Fe=I.get(_t),Fe===void 0&&(Fe=[],I.set(_t,Fe));const Bt=ae.textures;if(Fe.length!==Bt.length||Fe[0]!==u.COLOR_ATTACHMENT0){for(let St=0,Mn=Bt.length;St<Mn;St++)Fe[St]=u.COLOR_ATTACHMENT0+St;Fe.length=Bt.length,Xe=!0}}else Fe[0]!==u.BACK&&(Fe[0]=u.BACK,Xe=!0);Xe&&u.drawBuffers(Fe)}function ot(ae){return W!==ae?(u.useProgram(ae),W=ae,!0):!1}const ht={[Qa]:u.FUNC_ADD,[oT]:u.FUNC_SUBTRACT,[cT]:u.FUNC_REVERSE_SUBTRACT};ht[lT]=u.MIN,ht[hT]=u.MAX;const Qt={[uT]:u.ZERO,[dT]:u.ONE,[fT]:u.SRC_COLOR,[Bf]:u.SRC_ALPHA,[vT]:u.SRC_ALPHA_SATURATE,[_T]:u.DST_COLOR,[mT]:u.DST_ALPHA,[pT]:u.ONE_MINUS_SRC_COLOR,[zf]:u.ONE_MINUS_SRC_ALPHA,[xT]:u.ONE_MINUS_DST_COLOR,[gT]:u.ONE_MINUS_DST_ALPHA,[yT]:u.CONSTANT_COLOR,[MT]:u.ONE_MINUS_CONSTANT_COLOR,[ST]:u.CONSTANT_ALPHA,[ET]:u.ONE_MINUS_CONSTANT_ALPHA};function ie(ae,_t,Fe,Xe,Bt,St,Mn,pi,vi,Wn){if(ae===la){Y===!0&&(ye(u.BLEND),Y=!1);return}if(Y===!1&&(ce(u.BLEND),Y=!0),ae!==aT){if(ae!==U||Wn!==K){if((R!==Qa||ee!==Qa)&&(u.blendEquation(u.FUNC_ADD),R=Qa,ee=Qa),Wn)switch(ae){case ac:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case X_:u.blendFunc(u.ONE,u.ONE);break;case q_:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Y_:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",ae);break}else switch(ae){case ac:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case X_:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case q_:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Y_:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",ae);break}oe=null,se=null,xe=null,de=null,le.set(0,0,0),ve=0,U=ae,K=Wn}return}Bt=Bt||_t,St=St||Fe,Mn=Mn||Xe,(_t!==R||Bt!==ee)&&(u.blendEquationSeparate(ht[_t],ht[Bt]),R=_t,ee=Bt),(Fe!==oe||Xe!==se||St!==xe||Mn!==de)&&(u.blendFuncSeparate(Qt[Fe],Qt[Xe],Qt[St],Qt[Mn]),oe=Fe,se=Xe,xe=St,de=Mn),(pi.equals(le)===!1||vi!==ve)&&(u.blendColor(pi.r,pi.g,pi.b,vi),le.copy(pi),ve=vi),U=ae,K=!1}function Dt(ae,_t){ae.side===Fr?ye(u.CULL_FACE):ce(u.CULL_FACE);let Fe=ae.side===vr;_t&&(Fe=!Fe),bt(Fe),ae.blending===ac&&ae.transparent===!1?ie(la):ie(ae.blending,ae.blendEquation,ae.blendSrc,ae.blendDst,ae.blendEquationAlpha,ae.blendSrcAlpha,ae.blendDstAlpha,ae.blendColor,ae.blendAlpha,ae.premultipliedAlpha),v.setFunc(ae.depthFunc),v.setTest(ae.depthTest),v.setMask(ae.depthWrite),m.setMask(ae.colorWrite);const Xe=ae.stencilWrite;M.setTest(Xe),Xe&&(M.setMask(ae.stencilWriteMask),M.setFunc(ae.stencilFunc,ae.stencilRef,ae.stencilFuncMask),M.setOp(ae.stencilFail,ae.stencilZFail,ae.stencilZPass)),ln(ae.polygonOffset,ae.polygonOffsetFactor,ae.polygonOffsetUnits),ae.alphaToCoverage===!0?ce(u.SAMPLE_ALPHA_TO_COVERAGE):ye(u.SAMPLE_ALPHA_TO_COVERAGE)}function bt(ae){q!==ae&&(ae?u.frontFace(u.CW):u.frontFace(u.CCW),q=ae)}function Tt(ae){ae!==iT?(ce(u.CULL_FACE),ae!==he&&(ae===W_?u.cullFace(u.BACK):ae===rT?u.cullFace(u.FRONT):u.cullFace(u.FRONT_AND_BACK))):ye(u.CULL_FACE),he=ae}function gt(ae){ae!==Ne&&(Ze&&u.lineWidth(ae),Ne=ae)}function ln(ae,_t,Fe){ae?(ce(u.POLYGON_OFFSET_FILL),(Ie!==_t||Je!==Fe)&&(u.polygonOffset(_t,Fe),Ie=_t,Je=Fe)):ye(u.POLYGON_OFFSET_FILL)}function ut(ae){ae?ce(u.SCISSOR_TEST):ye(u.SCISSOR_TEST)}function X(ae){ae===void 0&&(ae=u.TEXTURE0+Qe-1),wt!==ae&&(u.activeTexture(ae),wt=ae)}function B(ae,_t,Fe){Fe===void 0&&(wt===null?Fe=u.TEXTURE0+Qe-1:Fe=wt);let Xe=kt[Fe];Xe===void 0&&(Xe={type:void 0,texture:void 0},kt[Fe]=Xe),(Xe.type!==ae||Xe.texture!==_t)&&(wt!==Fe&&(u.activeTexture(Fe),wt=Fe),u.bindTexture(ae,_t||Kt[ae]),Xe.type=ae,Xe.texture=_t)}function ue(){const ae=kt[wt];ae!==void 0&&ae.type!==void 0&&(u.bindTexture(ae.type,null),ae.type=void 0,ae.texture=void 0)}function Le(){try{u.compressedTexImage2D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function we(){try{u.compressedTexImage3D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function Pe(){try{u.texSubImage2D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function yt(){try{u.texSubImage3D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function We(){try{u.compressedTexSubImage2D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function ct(){try{u.compressedTexSubImage3D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function je(){try{u.texStorage2D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function ze(){try{u.texStorage3D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function it(){try{u.texImage2D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function Ct(){try{u.texImage3D.apply(u,arguments)}catch(ae){console.error("THREE.WebGLState:",ae)}}function Nt(ae){ei.equals(ae)===!1&&(u.scissor(ae.x,ae.y,ae.z,ae.w),ei.copy(ae))}function Rt(ae){Ge.equals(ae)===!1&&(u.viewport(ae.x,ae.y,ae.z,ae.w),Ge.copy(ae))}function On(ae,_t){let Fe=A.get(_t);Fe===void 0&&(Fe=new WeakMap,A.set(_t,Fe));let Xe=Fe.get(ae);Xe===void 0&&(Xe=u.getUniformBlockIndex(_t,ae.name),Fe.set(ae,Xe))}function pn(ae,_t){const Xe=A.get(_t).get(ae);T.get(_t)!==Xe&&(u.uniformBlockBinding(_t,Xe,ae.__bindingPointIndex),T.set(_t,Xe))}function Zn(){u.disable(u.BLEND),u.disable(u.CULL_FACE),u.disable(u.DEPTH_TEST),u.disable(u.POLYGON_OFFSET_FILL),u.disable(u.SCISSOR_TEST),u.disable(u.STENCIL_TEST),u.disable(u.SAMPLE_ALPHA_TO_COVERAGE),u.blendEquation(u.FUNC_ADD),u.blendFunc(u.ONE,u.ZERO),u.blendFuncSeparate(u.ONE,u.ZERO,u.ONE,u.ZERO),u.blendColor(0,0,0,0),u.colorMask(!0,!0,!0,!0),u.clearColor(0,0,0,0),u.depthMask(!0),u.depthFunc(u.LESS),v.setReversed(!1),u.clearDepth(1),u.stencilMask(4294967295),u.stencilFunc(u.ALWAYS,0,4294967295),u.stencilOp(u.KEEP,u.KEEP,u.KEEP),u.clearStencil(0),u.cullFace(u.BACK),u.frontFace(u.CCW),u.polygonOffset(0,0),u.activeTexture(u.TEXTURE0),u.bindFramebuffer(u.FRAMEBUFFER,null),u.bindFramebuffer(u.DRAW_FRAMEBUFFER,null),u.bindFramebuffer(u.READ_FRAMEBUFFER,null),u.useProgram(null),u.lineWidth(1),u.scissor(0,0,u.canvas.width,u.canvas.height),u.viewport(0,0,u.canvas.width,u.canvas.height),C={},wt=null,kt={},P={},I=new WeakMap,F=[],W=null,Y=!1,U=null,R=null,oe=null,se=null,ee=null,xe=null,de=null,le=new Yn(0,0,0),ve=0,K=!1,q=null,he=null,Ne=null,Ie=null,Je=null,ei.set(0,0,u.canvas.width,u.canvas.height),Ge.set(0,0,u.canvas.width,u.canvas.height),m.reset(),v.reset(),M.reset()}return{buffers:{color:m,depth:v,stencil:M},enable:ce,disable:ye,bindFramebuffer:Ee,drawBuffers:Ue,useProgram:ot,setBlending:ie,setMaterial:Dt,setFlipSided:bt,setCullFace:Tt,setLineWidth:gt,setPolygonOffset:ln,setScissorTest:ut,activeTexture:X,bindTexture:B,unbindTexture:ue,compressedTexImage2D:Le,compressedTexImage3D:we,texImage2D:it,texImage3D:Ct,updateUBOMapping:On,uniformBlockBinding:pn,texStorage2D:je,texStorage3D:ze,texSubImage2D:Pe,texSubImage3D:yt,compressedTexSubImage2D:We,compressedTexSubImage3D:ct,scissor:Nt,viewport:Rt,reset:Zn}}function sP(u,n,s,l,d,m,v){const M=n.has("WEBGL_multisampled_render_to_texture")?n.get("WEBGL_multisampled_render_to_texture"):null,T=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),A=new ii,C=new WeakMap;let P;const I=new WeakMap;let F=!1;try{F=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function W(X,B){return F?new OffscreenCanvas(X,B):pl("canvas")}function Y(X,B,ue){let Le=1;const we=ut(X);if((we.width>ue||we.height>ue)&&(Le=ue/Math.max(we.width,we.height)),Le<1)if(typeof HTMLImageElement<"u"&&X instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&X instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&X instanceof ImageBitmap||typeof VideoFrame<"u"&&X instanceof VideoFrame){const Pe=Math.floor(Le*we.width),yt=Math.floor(Le*we.height);P===void 0&&(P=W(Pe,yt));const We=B?W(Pe,yt):P;return We.width=Pe,We.height=yt,We.getContext("2d").drawImage(X,0,0,Pe,yt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+we.width+"x"+we.height+") to ("+Pe+"x"+yt+")."),We}else return"data"in X&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+we.width+"x"+we.height+")."),X;return X}function U(X){return X.generateMipmaps}function R(X){u.generateMipmap(X)}function oe(X){return X.isWebGLCubeRenderTarget?u.TEXTURE_CUBE_MAP:X.isWebGL3DRenderTarget?u.TEXTURE_3D:X.isWebGLArrayRenderTarget||X.isCompressedArrayTexture?u.TEXTURE_2D_ARRAY:u.TEXTURE_2D}function se(X,B,ue,Le,we=!1){if(X!==null){if(u[X]!==void 0)return u[X];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+X+"'")}let Pe=B;if(B===u.RED&&(ue===u.FLOAT&&(Pe=u.R32F),ue===u.HALF_FLOAT&&(Pe=u.R16F),ue===u.UNSIGNED_BYTE&&(Pe=u.R8)),B===u.RED_INTEGER&&(ue===u.UNSIGNED_BYTE&&(Pe=u.R8UI),ue===u.UNSIGNED_SHORT&&(Pe=u.R16UI),ue===u.UNSIGNED_INT&&(Pe=u.R32UI),ue===u.BYTE&&(Pe=u.R8I),ue===u.SHORT&&(Pe=u.R16I),ue===u.INT&&(Pe=u.R32I)),B===u.RG&&(ue===u.FLOAT&&(Pe=u.RG32F),ue===u.HALF_FLOAT&&(Pe=u.RG16F),ue===u.UNSIGNED_BYTE&&(Pe=u.RG8)),B===u.RG_INTEGER&&(ue===u.UNSIGNED_BYTE&&(Pe=u.RG8UI),ue===u.UNSIGNED_SHORT&&(Pe=u.RG16UI),ue===u.UNSIGNED_INT&&(Pe=u.RG32UI),ue===u.BYTE&&(Pe=u.RG8I),ue===u.SHORT&&(Pe=u.RG16I),ue===u.INT&&(Pe=u.RG32I)),B===u.RGB_INTEGER&&(ue===u.UNSIGNED_BYTE&&(Pe=u.RGB8UI),ue===u.UNSIGNED_SHORT&&(Pe=u.RGB16UI),ue===u.UNSIGNED_INT&&(Pe=u.RGB32UI),ue===u.BYTE&&(Pe=u.RGB8I),ue===u.SHORT&&(Pe=u.RGB16I),ue===u.INT&&(Pe=u.RGB32I)),B===u.RGBA_INTEGER&&(ue===u.UNSIGNED_BYTE&&(Pe=u.RGBA8UI),ue===u.UNSIGNED_SHORT&&(Pe=u.RGBA16UI),ue===u.UNSIGNED_INT&&(Pe=u.RGBA32UI),ue===u.BYTE&&(Pe=u.RGBA8I),ue===u.SHORT&&(Pe=u.RGBA16I),ue===u.INT&&(Pe=u.RGBA32I)),B===u.RGB&&ue===u.UNSIGNED_INT_5_9_9_9_REV&&(Pe=u.RGB9_E5),B===u.RGBA){const yt=we?Su:ni.getTransfer(Le);ue===u.FLOAT&&(Pe=u.RGBA32F),ue===u.HALF_FLOAT&&(Pe=u.RGBA16F),ue===u.UNSIGNED_BYTE&&(Pe=yt===ui?u.SRGB8_ALPHA8:u.RGBA8),ue===u.UNSIGNED_SHORT_4_4_4_4&&(Pe=u.RGBA4),ue===u.UNSIGNED_SHORT_5_5_5_1&&(Pe=u.RGB5_A1)}return(Pe===u.R16F||Pe===u.R32F||Pe===u.RG16F||Pe===u.RG32F||Pe===u.RGBA16F||Pe===u.RGBA32F)&&n.get("EXT_color_buffer_float"),Pe}function ee(X,B){let ue;return X?B===null||B===io||B===dc?ue=u.DEPTH24_STENCIL8:B===Ds?ue=u.DEPTH32F_STENCIL8:B===fl&&(ue=u.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):B===null||B===io||B===dc?ue=u.DEPTH_COMPONENT24:B===Ds?ue=u.DEPTH_COMPONENT32F:B===fl&&(ue=u.DEPTH_COMPONENT16),ue}function xe(X,B){return U(X)===!0||X.isFramebufferTexture&&X.minFilter!==is&&X.minFilter!==Or?Math.log2(Math.max(B.width,B.height))+1:X.mipmaps!==void 0&&X.mipmaps.length>0?X.mipmaps.length:X.isCompressedTexture&&Array.isArray(X.image)?B.mipmaps.length:1}function de(X){const B=X.target;B.removeEventListener("dispose",de),ve(B),B.isVideoTexture&&C.delete(B)}function le(X){const B=X.target;B.removeEventListener("dispose",le),q(B)}function ve(X){const B=l.get(X);if(B.__webglInit===void 0)return;const ue=X.source,Le=I.get(ue);if(Le){const we=Le[B.__cacheKey];we.usedTimes--,we.usedTimes===0&&K(X),Object.keys(Le).length===0&&I.delete(ue)}l.remove(X)}function K(X){const B=l.get(X);u.deleteTexture(B.__webglTexture);const ue=X.source,Le=I.get(ue);delete Le[B.__cacheKey],v.memory.textures--}function q(X){const B=l.get(X);if(X.depthTexture&&(X.depthTexture.dispose(),l.remove(X.depthTexture)),X.isWebGLCubeRenderTarget)for(let Le=0;Le<6;Le++){if(Array.isArray(B.__webglFramebuffer[Le]))for(let we=0;we<B.__webglFramebuffer[Le].length;we++)u.deleteFramebuffer(B.__webglFramebuffer[Le][we]);else u.deleteFramebuffer(B.__webglFramebuffer[Le]);B.__webglDepthbuffer&&u.deleteRenderbuffer(B.__webglDepthbuffer[Le])}else{if(Array.isArray(B.__webglFramebuffer))for(let Le=0;Le<B.__webglFramebuffer.length;Le++)u.deleteFramebuffer(B.__webglFramebuffer[Le]);else u.deleteFramebuffer(B.__webglFramebuffer);if(B.__webglDepthbuffer&&u.deleteRenderbuffer(B.__webglDepthbuffer),B.__webglMultisampledFramebuffer&&u.deleteFramebuffer(B.__webglMultisampledFramebuffer),B.__webglColorRenderbuffer)for(let Le=0;Le<B.__webglColorRenderbuffer.length;Le++)B.__webglColorRenderbuffer[Le]&&u.deleteRenderbuffer(B.__webglColorRenderbuffer[Le]);B.__webglDepthRenderbuffer&&u.deleteRenderbuffer(B.__webglDepthRenderbuffer)}const ue=X.textures;for(let Le=0,we=ue.length;Le<we;Le++){const Pe=l.get(ue[Le]);Pe.__webglTexture&&(u.deleteTexture(Pe.__webglTexture),v.memory.textures--),l.remove(ue[Le])}l.remove(X)}let he=0;function Ne(){he=0}function Ie(){const X=he;return X>=d.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+X+" texture units while this GPU supports only "+d.maxTextures),he+=1,X}function Je(X){const B=[];return B.push(X.wrapS),B.push(X.wrapT),B.push(X.wrapR||0),B.push(X.magFilter),B.push(X.minFilter),B.push(X.anisotropy),B.push(X.internalFormat),B.push(X.format),B.push(X.type),B.push(X.generateMipmaps),B.push(X.premultiplyAlpha),B.push(X.flipY),B.push(X.unpackAlignment),B.push(X.colorSpace),B.join()}function Qe(X,B){const ue=l.get(X);if(X.isVideoTexture&&gt(X),X.isRenderTargetTexture===!1&&X.version>0&&ue.__version!==X.version){const Le=X.image;if(Le===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(Le.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Ge(ue,X,B);return}}s.bindTexture(u.TEXTURE_2D,ue.__webglTexture,u.TEXTURE0+B)}function Ze(X,B){const ue=l.get(X);if(X.version>0&&ue.__version!==X.version){Ge(ue,X,B);return}s.bindTexture(u.TEXTURE_2D_ARRAY,ue.__webglTexture,u.TEXTURE0+B)}function rt(X,B){const ue=l.get(X);if(X.version>0&&ue.__version!==X.version){Ge(ue,X,B);return}s.bindTexture(u.TEXTURE_3D,ue.__webglTexture,u.TEXTURE0+B)}function Oe(X,B){const ue=l.get(X);if(X.version>0&&ue.__version!==X.version){pt(ue,X,B);return}s.bindTexture(u.TEXTURE_CUBE_MAP,ue.__webglTexture,u.TEXTURE0+B)}const wt={[$f]:u.REPEAT,[to]:u.CLAMP_TO_EDGE,[Kf]:u.MIRRORED_REPEAT},kt={[is]:u.NEAREST,[DT]:u.NEAREST_MIPMAP_NEAREST,[Zh]:u.NEAREST_MIPMAP_LINEAR,[Or]:u.LINEAR,[af]:u.LINEAR_MIPMAP_NEAREST,[no]:u.LINEAR_MIPMAP_LINEAR},an={[BT]:u.NEVER,[WT]:u.ALWAYS,[zT]:u.LESS,[lx]:u.LEQUAL,[VT]:u.EQUAL,[GT]:u.GEQUAL,[kT]:u.GREATER,[HT]:u.NOTEQUAL};function Cn(X,B){if(B.type===Ds&&n.has("OES_texture_float_linear")===!1&&(B.magFilter===Or||B.magFilter===af||B.magFilter===Zh||B.magFilter===no||B.minFilter===Or||B.minFilter===af||B.minFilter===Zh||B.minFilter===no)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),u.texParameteri(X,u.TEXTURE_WRAP_S,wt[B.wrapS]),u.texParameteri(X,u.TEXTURE_WRAP_T,wt[B.wrapT]),(X===u.TEXTURE_3D||X===u.TEXTURE_2D_ARRAY)&&u.texParameteri(X,u.TEXTURE_WRAP_R,wt[B.wrapR]),u.texParameteri(X,u.TEXTURE_MAG_FILTER,kt[B.magFilter]),u.texParameteri(X,u.TEXTURE_MIN_FILTER,kt[B.minFilter]),B.compareFunction&&(u.texParameteri(X,u.TEXTURE_COMPARE_MODE,u.COMPARE_REF_TO_TEXTURE),u.texParameteri(X,u.TEXTURE_COMPARE_FUNC,an[B.compareFunction])),n.has("EXT_texture_filter_anisotropic")===!0){if(B.magFilter===is||B.minFilter!==Zh&&B.minFilter!==no||B.type===Ds&&n.has("OES_texture_float_linear")===!1)return;if(B.anisotropy>1||l.get(B).__currentAnisotropy){const ue=n.get("EXT_texture_filter_anisotropic");u.texParameterf(X,ue.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(B.anisotropy,d.getMaxAnisotropy())),l.get(B).__currentAnisotropy=B.anisotropy}}}function ei(X,B){let ue=!1;X.__webglInit===void 0&&(X.__webglInit=!0,B.addEventListener("dispose",de));const Le=B.source;let we=I.get(Le);we===void 0&&(we={},I.set(Le,we));const Pe=Je(B);if(Pe!==X.__cacheKey){we[Pe]===void 0&&(we[Pe]={texture:u.createTexture(),usedTimes:0},v.memory.textures++,ue=!0),we[Pe].usedTimes++;const yt=we[X.__cacheKey];yt!==void 0&&(we[X.__cacheKey].usedTimes--,yt.usedTimes===0&&K(B)),X.__cacheKey=Pe,X.__webglTexture=we[Pe].texture}return ue}function Ge(X,B,ue){let Le=u.TEXTURE_2D;(B.isDataArrayTexture||B.isCompressedArrayTexture)&&(Le=u.TEXTURE_2D_ARRAY),B.isData3DTexture&&(Le=u.TEXTURE_3D);const we=ei(X,B),Pe=B.source;s.bindTexture(Le,X.__webglTexture,u.TEXTURE0+ue);const yt=l.get(Pe);if(Pe.version!==yt.__version||we===!0){s.activeTexture(u.TEXTURE0+ue);const We=ni.getPrimaries(ni.workingColorSpace),ct=B.colorSpace===oa?null:ni.getPrimaries(B.colorSpace),je=B.colorSpace===oa||We===ct?u.NONE:u.BROWSER_DEFAULT_WEBGL;u.pixelStorei(u.UNPACK_FLIP_Y_WEBGL,B.flipY),u.pixelStorei(u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,B.premultiplyAlpha),u.pixelStorei(u.UNPACK_ALIGNMENT,B.unpackAlignment),u.pixelStorei(u.UNPACK_COLORSPACE_CONVERSION_WEBGL,je);let ze=Y(B.image,!1,d.maxTextureSize);ze=ln(B,ze);const it=m.convert(B.format,B.colorSpace),Ct=m.convert(B.type);let Nt=se(B.internalFormat,it,Ct,B.colorSpace,B.isVideoTexture);Cn(Le,B);let Rt;const On=B.mipmaps,pn=B.isVideoTexture!==!0,Zn=yt.__version===void 0||we===!0,ae=Pe.dataReady,_t=xe(B,ze);if(B.isDepthTexture)Nt=ee(B.format===fc,B.type),Zn&&(pn?s.texStorage2D(u.TEXTURE_2D,1,Nt,ze.width,ze.height):s.texImage2D(u.TEXTURE_2D,0,Nt,ze.width,ze.height,0,it,Ct,null));else if(B.isDataTexture)if(On.length>0){pn&&Zn&&s.texStorage2D(u.TEXTURE_2D,_t,Nt,On[0].width,On[0].height);for(let Fe=0,Xe=On.length;Fe<Xe;Fe++)Rt=On[Fe],pn?ae&&s.texSubImage2D(u.TEXTURE_2D,Fe,0,0,Rt.width,Rt.height,it,Ct,Rt.data):s.texImage2D(u.TEXTURE_2D,Fe,Nt,Rt.width,Rt.height,0,it,Ct,Rt.data);B.generateMipmaps=!1}else pn?(Zn&&s.texStorage2D(u.TEXTURE_2D,_t,Nt,ze.width,ze.height),ae&&s.texSubImage2D(u.TEXTURE_2D,0,0,0,ze.width,ze.height,it,Ct,ze.data)):s.texImage2D(u.TEXTURE_2D,0,Nt,ze.width,ze.height,0,it,Ct,ze.data);else if(B.isCompressedTexture)if(B.isCompressedArrayTexture){pn&&Zn&&s.texStorage3D(u.TEXTURE_2D_ARRAY,_t,Nt,On[0].width,On[0].height,ze.depth);for(let Fe=0,Xe=On.length;Fe<Xe;Fe++)if(Rt=On[Fe],B.format!==ns)if(it!==null)if(pn){if(ae)if(B.layerUpdates.size>0){const Bt=v0(Rt.width,Rt.height,B.format,B.type);for(const St of B.layerUpdates){const Mn=Rt.data.subarray(St*Bt/Rt.data.BYTES_PER_ELEMENT,(St+1)*Bt/Rt.data.BYTES_PER_ELEMENT);s.compressedTexSubImage3D(u.TEXTURE_2D_ARRAY,Fe,0,0,St,Rt.width,Rt.height,1,it,Mn)}B.clearLayerUpdates()}else s.compressedTexSubImage3D(u.TEXTURE_2D_ARRAY,Fe,0,0,0,Rt.width,Rt.height,ze.depth,it,Rt.data)}else s.compressedTexImage3D(u.TEXTURE_2D_ARRAY,Fe,Nt,Rt.width,Rt.height,ze.depth,0,Rt.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else pn?ae&&s.texSubImage3D(u.TEXTURE_2D_ARRAY,Fe,0,0,0,Rt.width,Rt.height,ze.depth,it,Ct,Rt.data):s.texImage3D(u.TEXTURE_2D_ARRAY,Fe,Nt,Rt.width,Rt.height,ze.depth,0,it,Ct,Rt.data)}else{pn&&Zn&&s.texStorage2D(u.TEXTURE_2D,_t,Nt,On[0].width,On[0].height);for(let Fe=0,Xe=On.length;Fe<Xe;Fe++)Rt=On[Fe],B.format!==ns?it!==null?pn?ae&&s.compressedTexSubImage2D(u.TEXTURE_2D,Fe,0,0,Rt.width,Rt.height,it,Rt.data):s.compressedTexImage2D(u.TEXTURE_2D,Fe,Nt,Rt.width,Rt.height,0,Rt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):pn?ae&&s.texSubImage2D(u.TEXTURE_2D,Fe,0,0,Rt.width,Rt.height,it,Ct,Rt.data):s.texImage2D(u.TEXTURE_2D,Fe,Nt,Rt.width,Rt.height,0,it,Ct,Rt.data)}else if(B.isDataArrayTexture)if(pn){if(Zn&&s.texStorage3D(u.TEXTURE_2D_ARRAY,_t,Nt,ze.width,ze.height,ze.depth),ae)if(B.layerUpdates.size>0){const Fe=v0(ze.width,ze.height,B.format,B.type);for(const Xe of B.layerUpdates){const Bt=ze.data.subarray(Xe*Fe/ze.data.BYTES_PER_ELEMENT,(Xe+1)*Fe/ze.data.BYTES_PER_ELEMENT);s.texSubImage3D(u.TEXTURE_2D_ARRAY,0,0,0,Xe,ze.width,ze.height,1,it,Ct,Bt)}B.clearLayerUpdates()}else s.texSubImage3D(u.TEXTURE_2D_ARRAY,0,0,0,0,ze.width,ze.height,ze.depth,it,Ct,ze.data)}else s.texImage3D(u.TEXTURE_2D_ARRAY,0,Nt,ze.width,ze.height,ze.depth,0,it,Ct,ze.data);else if(B.isData3DTexture)pn?(Zn&&s.texStorage3D(u.TEXTURE_3D,_t,Nt,ze.width,ze.height,ze.depth),ae&&s.texSubImage3D(u.TEXTURE_3D,0,0,0,0,ze.width,ze.height,ze.depth,it,Ct,ze.data)):s.texImage3D(u.TEXTURE_3D,0,Nt,ze.width,ze.height,ze.depth,0,it,Ct,ze.data);else if(B.isFramebufferTexture){if(Zn)if(pn)s.texStorage2D(u.TEXTURE_2D,_t,Nt,ze.width,ze.height);else{let Fe=ze.width,Xe=ze.height;for(let Bt=0;Bt<_t;Bt++)s.texImage2D(u.TEXTURE_2D,Bt,Nt,Fe,Xe,0,it,Ct,null),Fe>>=1,Xe>>=1}}else if(On.length>0){if(pn&&Zn){const Fe=ut(On[0]);s.texStorage2D(u.TEXTURE_2D,_t,Nt,Fe.width,Fe.height)}for(let Fe=0,Xe=On.length;Fe<Xe;Fe++)Rt=On[Fe],pn?ae&&s.texSubImage2D(u.TEXTURE_2D,Fe,0,0,it,Ct,Rt):s.texImage2D(u.TEXTURE_2D,Fe,Nt,it,Ct,Rt);B.generateMipmaps=!1}else if(pn){if(Zn){const Fe=ut(ze);s.texStorage2D(u.TEXTURE_2D,_t,Nt,Fe.width,Fe.height)}ae&&s.texSubImage2D(u.TEXTURE_2D,0,0,0,it,Ct,ze)}else s.texImage2D(u.TEXTURE_2D,0,Nt,it,Ct,ze);U(B)&&R(Le),yt.__version=Pe.version,B.onUpdate&&B.onUpdate(B)}X.__version=B.version}function pt(X,B,ue){if(B.image.length!==6)return;const Le=ei(X,B),we=B.source;s.bindTexture(u.TEXTURE_CUBE_MAP,X.__webglTexture,u.TEXTURE0+ue);const Pe=l.get(we);if(we.version!==Pe.__version||Le===!0){s.activeTexture(u.TEXTURE0+ue);const yt=ni.getPrimaries(ni.workingColorSpace),We=B.colorSpace===oa?null:ni.getPrimaries(B.colorSpace),ct=B.colorSpace===oa||yt===We?u.NONE:u.BROWSER_DEFAULT_WEBGL;u.pixelStorei(u.UNPACK_FLIP_Y_WEBGL,B.flipY),u.pixelStorei(u.UNPACK_PREMULTIPLY_ALPHA_WEBGL,B.premultiplyAlpha),u.pixelStorei(u.UNPACK_ALIGNMENT,B.unpackAlignment),u.pixelStorei(u.UNPACK_COLORSPACE_CONVERSION_WEBGL,ct);const je=B.isCompressedTexture||B.image[0].isCompressedTexture,ze=B.image[0]&&B.image[0].isDataTexture,it=[];for(let Xe=0;Xe<6;Xe++)!je&&!ze?it[Xe]=Y(B.image[Xe],!0,d.maxCubemapSize):it[Xe]=ze?B.image[Xe].image:B.image[Xe],it[Xe]=ln(B,it[Xe]);const Ct=it[0],Nt=m.convert(B.format,B.colorSpace),Rt=m.convert(B.type),On=se(B.internalFormat,Nt,Rt,B.colorSpace),pn=B.isVideoTexture!==!0,Zn=Pe.__version===void 0||Le===!0,ae=we.dataReady;let _t=xe(B,Ct);Cn(u.TEXTURE_CUBE_MAP,B);let Fe;if(je){pn&&Zn&&s.texStorage2D(u.TEXTURE_CUBE_MAP,_t,On,Ct.width,Ct.height);for(let Xe=0;Xe<6;Xe++){Fe=it[Xe].mipmaps;for(let Bt=0;Bt<Fe.length;Bt++){const St=Fe[Bt];B.format!==ns?Nt!==null?pn?ae&&s.compressedTexSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt,0,0,St.width,St.height,Nt,St.data):s.compressedTexImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt,On,St.width,St.height,0,St.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):pn?ae&&s.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt,0,0,St.width,St.height,Nt,Rt,St.data):s.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt,On,St.width,St.height,0,Nt,Rt,St.data)}}}else{if(Fe=B.mipmaps,pn&&Zn){Fe.length>0&&_t++;const Xe=ut(it[0]);s.texStorage2D(u.TEXTURE_CUBE_MAP,_t,On,Xe.width,Xe.height)}for(let Xe=0;Xe<6;Xe++)if(ze){pn?ae&&s.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,0,0,0,it[Xe].width,it[Xe].height,Nt,Rt,it[Xe].data):s.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,0,On,it[Xe].width,it[Xe].height,0,Nt,Rt,it[Xe].data);for(let Bt=0;Bt<Fe.length;Bt++){const Mn=Fe[Bt].image[Xe].image;pn?ae&&s.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt+1,0,0,Mn.width,Mn.height,Nt,Rt,Mn.data):s.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt+1,On,Mn.width,Mn.height,0,Nt,Rt,Mn.data)}}else{pn?ae&&s.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,0,0,0,Nt,Rt,it[Xe]):s.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,0,On,Nt,Rt,it[Xe]);for(let Bt=0;Bt<Fe.length;Bt++){const St=Fe[Bt];pn?ae&&s.texSubImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt+1,0,0,Nt,Rt,St.image[Xe]):s.texImage2D(u.TEXTURE_CUBE_MAP_POSITIVE_X+Xe,Bt+1,On,Nt,Rt,St.image[Xe])}}}U(B)&&R(u.TEXTURE_CUBE_MAP),Pe.__version=we.version,B.onUpdate&&B.onUpdate(B)}X.__version=B.version}function Kt(X,B,ue,Le,we,Pe){const yt=m.convert(ue.format,ue.colorSpace),We=m.convert(ue.type),ct=se(ue.internalFormat,yt,We,ue.colorSpace),je=l.get(B),ze=l.get(ue);if(ze.__renderTarget=B,!je.__hasExternalTextures){const it=Math.max(1,B.width>>Pe),Ct=Math.max(1,B.height>>Pe);we===u.TEXTURE_3D||we===u.TEXTURE_2D_ARRAY?s.texImage3D(we,Pe,ct,it,Ct,B.depth,0,yt,We,null):s.texImage2D(we,Pe,ct,it,Ct,0,yt,We,null)}s.bindFramebuffer(u.FRAMEBUFFER,X),Tt(B)?M.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,Le,we,ze.__webglTexture,0,bt(B)):(we===u.TEXTURE_2D||we>=u.TEXTURE_CUBE_MAP_POSITIVE_X&&we<=u.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&u.framebufferTexture2D(u.FRAMEBUFFER,Le,we,ze.__webglTexture,Pe),s.bindFramebuffer(u.FRAMEBUFFER,null)}function ce(X,B,ue){if(u.bindRenderbuffer(u.RENDERBUFFER,X),B.depthBuffer){const Le=B.depthTexture,we=Le&&Le.isDepthTexture?Le.type:null,Pe=ee(B.stencilBuffer,we),yt=B.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,We=bt(B);Tt(B)?M.renderbufferStorageMultisampleEXT(u.RENDERBUFFER,We,Pe,B.width,B.height):ue?u.renderbufferStorageMultisample(u.RENDERBUFFER,We,Pe,B.width,B.height):u.renderbufferStorage(u.RENDERBUFFER,Pe,B.width,B.height),u.framebufferRenderbuffer(u.FRAMEBUFFER,yt,u.RENDERBUFFER,X)}else{const Le=B.textures;for(let we=0;we<Le.length;we++){const Pe=Le[we],yt=m.convert(Pe.format,Pe.colorSpace),We=m.convert(Pe.type),ct=se(Pe.internalFormat,yt,We,Pe.colorSpace),je=bt(B);ue&&Tt(B)===!1?u.renderbufferStorageMultisample(u.RENDERBUFFER,je,ct,B.width,B.height):Tt(B)?M.renderbufferStorageMultisampleEXT(u.RENDERBUFFER,je,ct,B.width,B.height):u.renderbufferStorage(u.RENDERBUFFER,ct,B.width,B.height)}}u.bindRenderbuffer(u.RENDERBUFFER,null)}function ye(X,B){if(B&&B.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(s.bindFramebuffer(u.FRAMEBUFFER,X),!(B.depthTexture&&B.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const Le=l.get(B.depthTexture);Le.__renderTarget=B,(!Le.__webglTexture||B.depthTexture.image.width!==B.width||B.depthTexture.image.height!==B.height)&&(B.depthTexture.image.width=B.width,B.depthTexture.image.height=B.height,B.depthTexture.needsUpdate=!0),Qe(B.depthTexture,0);const we=Le.__webglTexture,Pe=bt(B);if(B.depthTexture.format===oc)Tt(B)?M.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,u.DEPTH_ATTACHMENT,u.TEXTURE_2D,we,0,Pe):u.framebufferTexture2D(u.FRAMEBUFFER,u.DEPTH_ATTACHMENT,u.TEXTURE_2D,we,0);else if(B.depthTexture.format===fc)Tt(B)?M.framebufferTexture2DMultisampleEXT(u.FRAMEBUFFER,u.DEPTH_STENCIL_ATTACHMENT,u.TEXTURE_2D,we,0,Pe):u.framebufferTexture2D(u.FRAMEBUFFER,u.DEPTH_STENCIL_ATTACHMENT,u.TEXTURE_2D,we,0);else throw new Error("Unknown depthTexture format")}function Ee(X){const B=l.get(X),ue=X.isWebGLCubeRenderTarget===!0;if(B.__boundDepthTexture!==X.depthTexture){const Le=X.depthTexture;if(B.__depthDisposeCallback&&B.__depthDisposeCallback(),Le){const we=()=>{delete B.__boundDepthTexture,delete B.__depthDisposeCallback,Le.removeEventListener("dispose",we)};Le.addEventListener("dispose",we),B.__depthDisposeCallback=we}B.__boundDepthTexture=Le}if(X.depthTexture&&!B.__autoAllocateDepthBuffer){if(ue)throw new Error("target.depthTexture not supported in Cube render targets");ye(B.__webglFramebuffer,X)}else if(ue){B.__webglDepthbuffer=[];for(let Le=0;Le<6;Le++)if(s.bindFramebuffer(u.FRAMEBUFFER,B.__webglFramebuffer[Le]),B.__webglDepthbuffer[Le]===void 0)B.__webglDepthbuffer[Le]=u.createRenderbuffer(),ce(B.__webglDepthbuffer[Le],X,!1);else{const we=X.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,Pe=B.__webglDepthbuffer[Le];u.bindRenderbuffer(u.RENDERBUFFER,Pe),u.framebufferRenderbuffer(u.FRAMEBUFFER,we,u.RENDERBUFFER,Pe)}}else if(s.bindFramebuffer(u.FRAMEBUFFER,B.__webglFramebuffer),B.__webglDepthbuffer===void 0)B.__webglDepthbuffer=u.createRenderbuffer(),ce(B.__webglDepthbuffer,X,!1);else{const Le=X.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,we=B.__webglDepthbuffer;u.bindRenderbuffer(u.RENDERBUFFER,we),u.framebufferRenderbuffer(u.FRAMEBUFFER,Le,u.RENDERBUFFER,we)}s.bindFramebuffer(u.FRAMEBUFFER,null)}function Ue(X,B,ue){const Le=l.get(X);B!==void 0&&Kt(Le.__webglFramebuffer,X,X.texture,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,0),ue!==void 0&&Ee(X)}function ot(X){const B=X.texture,ue=l.get(X),Le=l.get(B);X.addEventListener("dispose",le);const we=X.textures,Pe=X.isWebGLCubeRenderTarget===!0,yt=we.length>1;if(yt||(Le.__webglTexture===void 0&&(Le.__webglTexture=u.createTexture()),Le.__version=B.version,v.memory.textures++),Pe){ue.__webglFramebuffer=[];for(let We=0;We<6;We++)if(B.mipmaps&&B.mipmaps.length>0){ue.__webglFramebuffer[We]=[];for(let ct=0;ct<B.mipmaps.length;ct++)ue.__webglFramebuffer[We][ct]=u.createFramebuffer()}else ue.__webglFramebuffer[We]=u.createFramebuffer()}else{if(B.mipmaps&&B.mipmaps.length>0){ue.__webglFramebuffer=[];for(let We=0;We<B.mipmaps.length;We++)ue.__webglFramebuffer[We]=u.createFramebuffer()}else ue.__webglFramebuffer=u.createFramebuffer();if(yt)for(let We=0,ct=we.length;We<ct;We++){const je=l.get(we[We]);je.__webglTexture===void 0&&(je.__webglTexture=u.createTexture(),v.memory.textures++)}if(X.samples>0&&Tt(X)===!1){ue.__webglMultisampledFramebuffer=u.createFramebuffer(),ue.__webglColorRenderbuffer=[],s.bindFramebuffer(u.FRAMEBUFFER,ue.__webglMultisampledFramebuffer);for(let We=0;We<we.length;We++){const ct=we[We];ue.__webglColorRenderbuffer[We]=u.createRenderbuffer(),u.bindRenderbuffer(u.RENDERBUFFER,ue.__webglColorRenderbuffer[We]);const je=m.convert(ct.format,ct.colorSpace),ze=m.convert(ct.type),it=se(ct.internalFormat,je,ze,ct.colorSpace,X.isXRRenderTarget===!0),Ct=bt(X);u.renderbufferStorageMultisample(u.RENDERBUFFER,Ct,it,X.width,X.height),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+We,u.RENDERBUFFER,ue.__webglColorRenderbuffer[We])}u.bindRenderbuffer(u.RENDERBUFFER,null),X.depthBuffer&&(ue.__webglDepthRenderbuffer=u.createRenderbuffer(),ce(ue.__webglDepthRenderbuffer,X,!0)),s.bindFramebuffer(u.FRAMEBUFFER,null)}}if(Pe){s.bindTexture(u.TEXTURE_CUBE_MAP,Le.__webglTexture),Cn(u.TEXTURE_CUBE_MAP,B);for(let We=0;We<6;We++)if(B.mipmaps&&B.mipmaps.length>0)for(let ct=0;ct<B.mipmaps.length;ct++)Kt(ue.__webglFramebuffer[We][ct],X,B,u.COLOR_ATTACHMENT0,u.TEXTURE_CUBE_MAP_POSITIVE_X+We,ct);else Kt(ue.__webglFramebuffer[We],X,B,u.COLOR_ATTACHMENT0,u.TEXTURE_CUBE_MAP_POSITIVE_X+We,0);U(B)&&R(u.TEXTURE_CUBE_MAP),s.unbindTexture()}else if(yt){for(let We=0,ct=we.length;We<ct;We++){const je=we[We],ze=l.get(je);s.bindTexture(u.TEXTURE_2D,ze.__webglTexture),Cn(u.TEXTURE_2D,je),Kt(ue.__webglFramebuffer,X,je,u.COLOR_ATTACHMENT0+We,u.TEXTURE_2D,0),U(je)&&R(u.TEXTURE_2D)}s.unbindTexture()}else{let We=u.TEXTURE_2D;if((X.isWebGL3DRenderTarget||X.isWebGLArrayRenderTarget)&&(We=X.isWebGL3DRenderTarget?u.TEXTURE_3D:u.TEXTURE_2D_ARRAY),s.bindTexture(We,Le.__webglTexture),Cn(We,B),B.mipmaps&&B.mipmaps.length>0)for(let ct=0;ct<B.mipmaps.length;ct++)Kt(ue.__webglFramebuffer[ct],X,B,u.COLOR_ATTACHMENT0,We,ct);else Kt(ue.__webglFramebuffer,X,B,u.COLOR_ATTACHMENT0,We,0);U(B)&&R(We),s.unbindTexture()}X.depthBuffer&&Ee(X)}function ht(X){const B=X.textures;for(let ue=0,Le=B.length;ue<Le;ue++){const we=B[ue];if(U(we)){const Pe=oe(X),yt=l.get(we).__webglTexture;s.bindTexture(Pe,yt),R(Pe),s.unbindTexture()}}}const Qt=[],ie=[];function Dt(X){if(X.samples>0){if(Tt(X)===!1){const B=X.textures,ue=X.width,Le=X.height;let we=u.COLOR_BUFFER_BIT;const Pe=X.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT,yt=l.get(X),We=B.length>1;if(We)for(let ct=0;ct<B.length;ct++)s.bindFramebuffer(u.FRAMEBUFFER,yt.__webglMultisampledFramebuffer),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+ct,u.RENDERBUFFER,null),s.bindFramebuffer(u.FRAMEBUFFER,yt.__webglFramebuffer),u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0+ct,u.TEXTURE_2D,null,0);s.bindFramebuffer(u.READ_FRAMEBUFFER,yt.__webglMultisampledFramebuffer),s.bindFramebuffer(u.DRAW_FRAMEBUFFER,yt.__webglFramebuffer);for(let ct=0;ct<B.length;ct++){if(X.resolveDepthBuffer&&(X.depthBuffer&&(we|=u.DEPTH_BUFFER_BIT),X.stencilBuffer&&X.resolveStencilBuffer&&(we|=u.STENCIL_BUFFER_BIT)),We){u.framebufferRenderbuffer(u.READ_FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.RENDERBUFFER,yt.__webglColorRenderbuffer[ct]);const je=l.get(B[ct]).__webglTexture;u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,je,0)}u.blitFramebuffer(0,0,ue,Le,0,0,ue,Le,we,u.NEAREST),T===!0&&(Qt.length=0,ie.length=0,Qt.push(u.COLOR_ATTACHMENT0+ct),X.depthBuffer&&X.resolveDepthBuffer===!1&&(Qt.push(Pe),ie.push(Pe),u.invalidateFramebuffer(u.DRAW_FRAMEBUFFER,ie)),u.invalidateFramebuffer(u.READ_FRAMEBUFFER,Qt))}if(s.bindFramebuffer(u.READ_FRAMEBUFFER,null),s.bindFramebuffer(u.DRAW_FRAMEBUFFER,null),We)for(let ct=0;ct<B.length;ct++){s.bindFramebuffer(u.FRAMEBUFFER,yt.__webglMultisampledFramebuffer),u.framebufferRenderbuffer(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0+ct,u.RENDERBUFFER,yt.__webglColorRenderbuffer[ct]);const je=l.get(B[ct]).__webglTexture;s.bindFramebuffer(u.FRAMEBUFFER,yt.__webglFramebuffer),u.framebufferTexture2D(u.DRAW_FRAMEBUFFER,u.COLOR_ATTACHMENT0+ct,u.TEXTURE_2D,je,0)}s.bindFramebuffer(u.DRAW_FRAMEBUFFER,yt.__webglMultisampledFramebuffer)}else if(X.depthBuffer&&X.resolveDepthBuffer===!1&&T){const B=X.stencilBuffer?u.DEPTH_STENCIL_ATTACHMENT:u.DEPTH_ATTACHMENT;u.invalidateFramebuffer(u.DRAW_FRAMEBUFFER,[B])}}}function bt(X){return Math.min(d.maxSamples,X.samples)}function Tt(X){const B=l.get(X);return X.samples>0&&n.has("WEBGL_multisampled_render_to_texture")===!0&&B.__useRenderToTexture!==!1}function gt(X){const B=v.render.frame;C.get(X)!==B&&(C.set(X,B),X.update())}function ln(X,B){const ue=X.colorSpace,Le=X.format,we=X.type;return X.isCompressedTexture===!0||X.isVideoTexture===!0||ue!==pc&&ue!==oa&&(ni.getTransfer(ue)===ui?(Le!==ns||we!==Os)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",ue)),B}function ut(X){return typeof HTMLImageElement<"u"&&X instanceof HTMLImageElement?(A.width=X.naturalWidth||X.width,A.height=X.naturalHeight||X.height):typeof VideoFrame<"u"&&X instanceof VideoFrame?(A.width=X.displayWidth,A.height=X.displayHeight):(A.width=X.width,A.height=X.height),A}this.allocateTextureUnit=Ie,this.resetTextureUnits=Ne,this.setTexture2D=Qe,this.setTexture2DArray=Ze,this.setTexture3D=rt,this.setTextureCube=Oe,this.rebindTextures=Ue,this.setupRenderTarget=ot,this.updateRenderTargetMipmap=ht,this.updateMultisampleRenderTarget=Dt,this.setupDepthRenderbuffer=Ee,this.setupFrameBufferTexture=Kt,this.useMultisampledRTT=Tt}function aP(u,n){function s(l,d=oa){let m;const v=ni.getTransfer(d);if(l===Os)return u.UNSIGNED_BYTE;if(l===wp)return u.UNSIGNED_SHORT_4_4_4_4;if(l===Cp)return u.UNSIGNED_SHORT_5_5_5_1;if(l===tx)return u.UNSIGNED_INT_5_9_9_9_REV;if(l===Q0)return u.BYTE;if(l===ex)return u.SHORT;if(l===fl)return u.UNSIGNED_SHORT;if(l===Ap)return u.INT;if(l===io)return u.UNSIGNED_INT;if(l===Ds)return u.FLOAT;if(l===ml)return u.HALF_FLOAT;if(l===nx)return u.ALPHA;if(l===ix)return u.RGB;if(l===ns)return u.RGBA;if(l===rx)return u.LUMINANCE;if(l===sx)return u.LUMINANCE_ALPHA;if(l===oc)return u.DEPTH_COMPONENT;if(l===fc)return u.DEPTH_STENCIL;if(l===ax)return u.RED;if(l===Rp)return u.RED_INTEGER;if(l===ox)return u.RG;if(l===Pp)return u.RG_INTEGER;if(l===Ip)return u.RGBA_INTEGER;if(l===gu||l===_u||l===xu||l===vu)if(v===ui)if(m=n.get("WEBGL_compressed_texture_s3tc_srgb"),m!==null){if(l===gu)return m.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(l===_u)return m.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(l===xu)return m.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(l===vu)return m.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(m=n.get("WEBGL_compressed_texture_s3tc"),m!==null){if(l===gu)return m.COMPRESSED_RGB_S3TC_DXT1_EXT;if(l===_u)return m.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(l===xu)return m.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(l===vu)return m.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(l===Jf||l===jf||l===Qf||l===ep)if(m=n.get("WEBGL_compressed_texture_pvrtc"),m!==null){if(l===Jf)return m.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(l===jf)return m.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(l===Qf)return m.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(l===ep)return m.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(l===tp||l===np||l===ip)if(m=n.get("WEBGL_compressed_texture_etc"),m!==null){if(l===tp||l===np)return v===ui?m.COMPRESSED_SRGB8_ETC2:m.COMPRESSED_RGB8_ETC2;if(l===ip)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:m.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(l===rp||l===sp||l===ap||l===op||l===cp||l===lp||l===hp||l===up||l===dp||l===fp||l===pp||l===mp||l===gp||l===_p)if(m=n.get("WEBGL_compressed_texture_astc"),m!==null){if(l===rp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:m.COMPRESSED_RGBA_ASTC_4x4_KHR;if(l===sp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:m.COMPRESSED_RGBA_ASTC_5x4_KHR;if(l===ap)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:m.COMPRESSED_RGBA_ASTC_5x5_KHR;if(l===op)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:m.COMPRESSED_RGBA_ASTC_6x5_KHR;if(l===cp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:m.COMPRESSED_RGBA_ASTC_6x6_KHR;if(l===lp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:m.COMPRESSED_RGBA_ASTC_8x5_KHR;if(l===hp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:m.COMPRESSED_RGBA_ASTC_8x6_KHR;if(l===up)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:m.COMPRESSED_RGBA_ASTC_8x8_KHR;if(l===dp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:m.COMPRESSED_RGBA_ASTC_10x5_KHR;if(l===fp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:m.COMPRESSED_RGBA_ASTC_10x6_KHR;if(l===pp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:m.COMPRESSED_RGBA_ASTC_10x8_KHR;if(l===mp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:m.COMPRESSED_RGBA_ASTC_10x10_KHR;if(l===gp)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:m.COMPRESSED_RGBA_ASTC_12x10_KHR;if(l===_p)return v===ui?m.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:m.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(l===yu||l===xp||l===vp)if(m=n.get("EXT_texture_compression_bptc"),m!==null){if(l===yu)return v===ui?m.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:m.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(l===xp)return m.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(l===vp)return m.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(l===cx||l===yp||l===Mp||l===Sp)if(m=n.get("EXT_texture_compression_rgtc"),m!==null){if(l===yu)return m.COMPRESSED_RED_RGTC1_EXT;if(l===yp)return m.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(l===Mp)return m.COMPRESSED_RED_GREEN_RGTC2_EXT;if(l===Sp)return m.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return l===dc?u.UNSIGNED_INT_24_8:u[l]!==void 0?u[l]:null}return{convert:s}}const oP={type:"move"};class Of{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ca,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ca,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Se,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Se),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ca,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Se,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Se),this._grip}dispatchEvent(n){return this._targetRay!==null&&this._targetRay.dispatchEvent(n),this._grip!==null&&this._grip.dispatchEvent(n),this._hand!==null&&this._hand.dispatchEvent(n),this}connect(n){if(n&&n.hand){const s=this._hand;if(s)for(const l of n.hand.values())this._getHandJoint(s,l)}return this.dispatchEvent({type:"connected",data:n}),this}disconnect(n){return this.dispatchEvent({type:"disconnected",data:n}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(n,s,l){let d=null,m=null,v=null;const M=this._targetRay,T=this._grip,A=this._hand;if(n&&s.session.visibilityState!=="visible-blurred"){if(A&&n.hand){v=!0;for(const Y of n.hand.values()){const U=s.getJointPose(Y,l),R=this._getHandJoint(A,Y);U!==null&&(R.matrix.fromArray(U.transform.matrix),R.matrix.decompose(R.position,R.rotation,R.scale),R.matrixWorldNeedsUpdate=!0,R.jointRadius=U.radius),R.visible=U!==null}const C=A.joints["index-finger-tip"],P=A.joints["thumb-tip"],I=C.position.distanceTo(P.position),F=.02,W=.005;A.inputState.pinching&&I>F+W?(A.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:n.handedness,target:this})):!A.inputState.pinching&&I<=F-W&&(A.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:n.handedness,target:this}))}else T!==null&&n.gripSpace&&(m=s.getPose(n.gripSpace,l),m!==null&&(T.matrix.fromArray(m.transform.matrix),T.matrix.decompose(T.position,T.rotation,T.scale),T.matrixWorldNeedsUpdate=!0,m.linearVelocity?(T.hasLinearVelocity=!0,T.linearVelocity.copy(m.linearVelocity)):T.hasLinearVelocity=!1,m.angularVelocity?(T.hasAngularVelocity=!0,T.angularVelocity.copy(m.angularVelocity)):T.hasAngularVelocity=!1));M!==null&&(d=s.getPose(n.targetRaySpace,l),d===null&&m!==null&&(d=m),d!==null&&(M.matrix.fromArray(d.transform.matrix),M.matrix.decompose(M.position,M.rotation,M.scale),M.matrixWorldNeedsUpdate=!0,d.linearVelocity?(M.hasLinearVelocity=!0,M.linearVelocity.copy(d.linearVelocity)):M.hasLinearVelocity=!1,d.angularVelocity?(M.hasAngularVelocity=!0,M.angularVelocity.copy(d.angularVelocity)):M.hasAngularVelocity=!1,this.dispatchEvent(oP)))}return M!==null&&(M.visible=d!==null),T!==null&&(T.visible=m!==null),A!==null&&(A.visible=v!==null),this}_getHandJoint(n,s){if(n.joints[s.jointName]===void 0){const l=new ca;l.matrixAutoUpdate=!1,l.visible=!1,n.joints[s.jointName]=l,n.add(l)}return n.joints[s.jointName]}}const cP=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,lP=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class hP{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(n,s,l){if(this.texture===null){const d=new ir,m=n.properties.get(d);m.__webglTexture=s.texture,(s.depthNear!=l.depthNear||s.depthFar!=l.depthFar)&&(this.depthNear=s.depthNear,this.depthFar=s.depthFar),this.texture=d}}getMesh(n){if(this.texture!==null&&this.mesh===null){const s=n.cameras[0].viewport,l=new Br({vertexShader:cP,fragmentShader:lP,uniforms:{depthColor:{value:this.texture},depthWidth:{value:s.z},depthHeight:{value:s.w}}});this.mesh=new Rr(new gc(20,20),l)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class uP extends _c{constructor(n,s){super();const l=this;let d=null,m=1,v=null,M="local-floor",T=1,A=null,C=null,P=null,I=null,F=null,W=null;const Y=new hP,U=s.getContextAttributes();let R=null,oe=null;const se=[],ee=[],xe=new ii;let de=null;const le=new Cr;le.viewport=new di;const ve=new Cr;ve.viewport=new di;const K=[le,ve],q=new LA;let he=null,Ne=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(Ge){let pt=se[Ge];return pt===void 0&&(pt=new Of,se[Ge]=pt),pt.getTargetRaySpace()},this.getControllerGrip=function(Ge){let pt=se[Ge];return pt===void 0&&(pt=new Of,se[Ge]=pt),pt.getGripSpace()},this.getHand=function(Ge){let pt=se[Ge];return pt===void 0&&(pt=new Of,se[Ge]=pt),pt.getHandSpace()};function Ie(Ge){const pt=ee.indexOf(Ge.inputSource);if(pt===-1)return;const Kt=se[pt];Kt!==void 0&&(Kt.update(Ge.inputSource,Ge.frame,A||v),Kt.dispatchEvent({type:Ge.type,data:Ge.inputSource}))}function Je(){d.removeEventListener("select",Ie),d.removeEventListener("selectstart",Ie),d.removeEventListener("selectend",Ie),d.removeEventListener("squeeze",Ie),d.removeEventListener("squeezestart",Ie),d.removeEventListener("squeezeend",Ie),d.removeEventListener("end",Je),d.removeEventListener("inputsourceschange",Qe);for(let Ge=0;Ge<se.length;Ge++){const pt=ee[Ge];pt!==null&&(ee[Ge]=null,se[Ge].disconnect(pt))}he=null,Ne=null,Y.reset(),n.setRenderTarget(R),F=null,I=null,P=null,d=null,oe=null,ei.stop(),l.isPresenting=!1,n.setPixelRatio(de),n.setSize(xe.width,xe.height,!1),l.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(Ge){m=Ge,l.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(Ge){M=Ge,l.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return A||v},this.setReferenceSpace=function(Ge){A=Ge},this.getBaseLayer=function(){return I!==null?I:F},this.getBinding=function(){return P},this.getFrame=function(){return W},this.getSession=function(){return d},this.setSession=async function(Ge){if(d=Ge,d!==null){if(R=n.getRenderTarget(),d.addEventListener("select",Ie),d.addEventListener("selectstart",Ie),d.addEventListener("selectend",Ie),d.addEventListener("squeeze",Ie),d.addEventListener("squeezestart",Ie),d.addEventListener("squeezeend",Ie),d.addEventListener("end",Je),d.addEventListener("inputsourceschange",Qe),U.xrCompatible!==!0&&await s.makeXRCompatible(),de=n.getPixelRatio(),n.getSize(xe),d.renderState.layers===void 0){const pt={antialias:U.antialias,alpha:!0,depth:U.depth,stencil:U.stencil,framebufferScaleFactor:m};F=new XRWebGLLayer(d,s,pt),d.updateRenderState({baseLayer:F}),n.setPixelRatio(1),n.setSize(F.framebufferWidth,F.framebufferHeight,!1),oe=new ro(F.framebufferWidth,F.framebufferHeight,{format:ns,type:Os,colorSpace:n.outputColorSpace,stencilBuffer:U.stencil})}else{let pt=null,Kt=null,ce=null;U.depth&&(ce=U.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,pt=U.stencil?fc:oc,Kt=U.stencil?dc:io);const ye={colorFormat:s.RGBA8,depthFormat:ce,scaleFactor:m};P=new XRWebGLBinding(d,s),I=P.createProjectionLayer(ye),d.updateRenderState({layers:[I]}),n.setPixelRatio(1),n.setSize(I.textureWidth,I.textureHeight,!1),oe=new ro(I.textureWidth,I.textureHeight,{format:ns,type:Os,depthTexture:new Mx(I.textureWidth,I.textureHeight,Kt,void 0,void 0,void 0,void 0,void 0,void 0,pt),stencilBuffer:U.stencil,colorSpace:n.outputColorSpace,samples:U.antialias?4:0,resolveDepthBuffer:I.ignoreDepthValues===!1})}oe.isXRRenderTarget=!0,this.setFoveation(T),A=null,v=await d.requestReferenceSpace(M),ei.setContext(d),ei.start(),l.isPresenting=!0,l.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(d!==null)return d.environmentBlendMode},this.getDepthTexture=function(){return Y.getDepthTexture()};function Qe(Ge){for(let pt=0;pt<Ge.removed.length;pt++){const Kt=Ge.removed[pt],ce=ee.indexOf(Kt);ce>=0&&(ee[ce]=null,se[ce].disconnect(Kt))}for(let pt=0;pt<Ge.added.length;pt++){const Kt=Ge.added[pt];let ce=ee.indexOf(Kt);if(ce===-1){for(let Ee=0;Ee<se.length;Ee++)if(Ee>=ee.length){ee.push(Kt),ce=Ee;break}else if(ee[Ee]===null){ee[Ee]=Kt,ce=Ee;break}if(ce===-1)break}const ye=se[ce];ye&&ye.connect(Kt)}}const Ze=new Se,rt=new Se;function Oe(Ge,pt,Kt){Ze.setFromMatrixPosition(pt.matrixWorld),rt.setFromMatrixPosition(Kt.matrixWorld);const ce=Ze.distanceTo(rt),ye=pt.projectionMatrix.elements,Ee=Kt.projectionMatrix.elements,Ue=ye[14]/(ye[10]-1),ot=ye[14]/(ye[10]+1),ht=(ye[9]+1)/ye[5],Qt=(ye[9]-1)/ye[5],ie=(ye[8]-1)/ye[0],Dt=(Ee[8]+1)/Ee[0],bt=Ue*ie,Tt=Ue*Dt,gt=ce/(-ie+Dt),ln=gt*-ie;if(pt.matrixWorld.decompose(Ge.position,Ge.quaternion,Ge.scale),Ge.translateX(ln),Ge.translateZ(gt),Ge.matrixWorld.compose(Ge.position,Ge.quaternion,Ge.scale),Ge.matrixWorldInverse.copy(Ge.matrixWorld).invert(),ye[10]===-1)Ge.projectionMatrix.copy(pt.projectionMatrix),Ge.projectionMatrixInverse.copy(pt.projectionMatrixInverse);else{const ut=Ue+gt,X=ot+gt,B=bt-ln,ue=Tt+(ce-ln),Le=ht*ot/X*ut,we=Qt*ot/X*ut;Ge.projectionMatrix.makePerspective(B,ue,Le,we,ut,X),Ge.projectionMatrixInverse.copy(Ge.projectionMatrix).invert()}}function wt(Ge,pt){pt===null?Ge.matrixWorld.copy(Ge.matrix):Ge.matrixWorld.multiplyMatrices(pt.matrixWorld,Ge.matrix),Ge.matrixWorldInverse.copy(Ge.matrixWorld).invert()}this.updateCamera=function(Ge){if(d===null)return;let pt=Ge.near,Kt=Ge.far;Y.texture!==null&&(Y.depthNear>0&&(pt=Y.depthNear),Y.depthFar>0&&(Kt=Y.depthFar)),q.near=ve.near=le.near=pt,q.far=ve.far=le.far=Kt,(he!==q.near||Ne!==q.far)&&(d.updateRenderState({depthNear:q.near,depthFar:q.far}),he=q.near,Ne=q.far),le.layers.mask=Ge.layers.mask|2,ve.layers.mask=Ge.layers.mask|4,q.layers.mask=le.layers.mask|ve.layers.mask;const ce=Ge.parent,ye=q.cameras;wt(q,ce);for(let Ee=0;Ee<ye.length;Ee++)wt(ye[Ee],ce);ye.length===2?Oe(q,le,ve):q.projectionMatrix.copy(le.projectionMatrix),kt(Ge,q,ce)};function kt(Ge,pt,Kt){Kt===null?Ge.matrix.copy(pt.matrixWorld):(Ge.matrix.copy(Kt.matrixWorld),Ge.matrix.invert(),Ge.matrix.multiply(pt.matrixWorld)),Ge.matrix.decompose(Ge.position,Ge.quaternion,Ge.scale),Ge.updateMatrixWorld(!0),Ge.projectionMatrix.copy(pt.projectionMatrix),Ge.projectionMatrixInverse.copy(pt.projectionMatrixInverse),Ge.isPerspectiveCamera&&(Ge.fov=Ep*2*Math.atan(1/Ge.projectionMatrix.elements[5]),Ge.zoom=1)}this.getCamera=function(){return q},this.getFoveation=function(){if(!(I===null&&F===null))return T},this.setFoveation=function(Ge){T=Ge,I!==null&&(I.fixedFoveation=Ge),F!==null&&F.fixedFoveation!==void 0&&(F.fixedFoveation=Ge)},this.hasDepthSensing=function(){return Y.texture!==null},this.getDepthSensingMesh=function(){return Y.getMesh(q)};let an=null;function Cn(Ge,pt){if(C=pt.getViewerPose(A||v),W=pt,C!==null){const Kt=C.views;F!==null&&(n.setRenderTargetFramebuffer(oe,F.framebuffer),n.setRenderTarget(oe));let ce=!1;Kt.length!==q.cameras.length&&(q.cameras.length=0,ce=!0);for(let Ee=0;Ee<Kt.length;Ee++){const Ue=Kt[Ee];let ot=null;if(F!==null)ot=F.getViewport(Ue);else{const Qt=P.getViewSubImage(I,Ue);ot=Qt.viewport,Ee===0&&(n.setRenderTargetTextures(oe,Qt.colorTexture,I.ignoreDepthValues?void 0:Qt.depthStencilTexture),n.setRenderTarget(oe))}let ht=K[Ee];ht===void 0&&(ht=new Cr,ht.layers.enable(Ee),ht.viewport=new di,K[Ee]=ht),ht.matrix.fromArray(Ue.transform.matrix),ht.matrix.decompose(ht.position,ht.quaternion,ht.scale),ht.projectionMatrix.fromArray(Ue.projectionMatrix),ht.projectionMatrixInverse.copy(ht.projectionMatrix).invert(),ht.viewport.set(ot.x,ot.y,ot.width,ot.height),Ee===0&&(q.matrix.copy(ht.matrix),q.matrix.decompose(q.position,q.quaternion,q.scale)),ce===!0&&q.cameras.push(ht)}const ye=d.enabledFeatures;if(ye&&ye.includes("depth-sensing")){const Ee=P.getDepthInformation(Kt[0]);Ee&&Ee.isValid&&Ee.texture&&Y.init(n,Ee,d.renderState)}}for(let Kt=0;Kt<se.length;Kt++){const ce=ee[Kt],ye=se[Kt];ce!==null&&ye!==void 0&&ye.update(ce,pt,A||v)}an&&an(Ge,pt),pt.detectedPlanes&&l.dispatchEvent({type:"planesdetected",data:pt}),W=null}const ei=new Ex;ei.setAnimationLoop(Cn),this.setAnimationLoop=function(Ge){an=Ge},this.dispose=function(){}}}const $a=new Bs,dP=new Mi;function fP(u,n){function s(U,R){U.matrixAutoUpdate===!0&&U.updateMatrix(),R.value.copy(U.matrix)}function l(U,R){R.color.getRGB(U.fogColor.value,xx(u)),R.isFog?(U.fogNear.value=R.near,U.fogFar.value=R.far):R.isFogExp2&&(U.fogDensity.value=R.density)}function d(U,R,oe,se,ee){R.isMeshBasicMaterial||R.isMeshLambertMaterial?m(U,R):R.isMeshToonMaterial?(m(U,R),P(U,R)):R.isMeshPhongMaterial?(m(U,R),C(U,R)):R.isMeshStandardMaterial?(m(U,R),I(U,R),R.isMeshPhysicalMaterial&&F(U,R,ee)):R.isMeshMatcapMaterial?(m(U,R),W(U,R)):R.isMeshDepthMaterial?m(U,R):R.isMeshDistanceMaterial?(m(U,R),Y(U,R)):R.isMeshNormalMaterial?m(U,R):R.isLineBasicMaterial?(v(U,R),R.isLineDashedMaterial&&M(U,R)):R.isPointsMaterial?T(U,R,oe,se):R.isSpriteMaterial?A(U,R):R.isShadowMaterial?(U.color.value.copy(R.color),U.opacity.value=R.opacity):R.isShaderMaterial&&(R.uniformsNeedUpdate=!1)}function m(U,R){U.opacity.value=R.opacity,R.color&&U.diffuse.value.copy(R.color),R.emissive&&U.emissive.value.copy(R.emissive).multiplyScalar(R.emissiveIntensity),R.map&&(U.map.value=R.map,s(R.map,U.mapTransform)),R.alphaMap&&(U.alphaMap.value=R.alphaMap,s(R.alphaMap,U.alphaMapTransform)),R.bumpMap&&(U.bumpMap.value=R.bumpMap,s(R.bumpMap,U.bumpMapTransform),U.bumpScale.value=R.bumpScale,R.side===vr&&(U.bumpScale.value*=-1)),R.normalMap&&(U.normalMap.value=R.normalMap,s(R.normalMap,U.normalMapTransform),U.normalScale.value.copy(R.normalScale),R.side===vr&&U.normalScale.value.negate()),R.displacementMap&&(U.displacementMap.value=R.displacementMap,s(R.displacementMap,U.displacementMapTransform),U.displacementScale.value=R.displacementScale,U.displacementBias.value=R.displacementBias),R.emissiveMap&&(U.emissiveMap.value=R.emissiveMap,s(R.emissiveMap,U.emissiveMapTransform)),R.specularMap&&(U.specularMap.value=R.specularMap,s(R.specularMap,U.specularMapTransform)),R.alphaTest>0&&(U.alphaTest.value=R.alphaTest);const oe=n.get(R),se=oe.envMap,ee=oe.envMapRotation;se&&(U.envMap.value=se,$a.copy(ee),$a.x*=-1,$a.y*=-1,$a.z*=-1,se.isCubeTexture&&se.isRenderTargetTexture===!1&&($a.y*=-1,$a.z*=-1),U.envMapRotation.value.setFromMatrix4(dP.makeRotationFromEuler($a)),U.flipEnvMap.value=se.isCubeTexture&&se.isRenderTargetTexture===!1?-1:1,U.reflectivity.value=R.reflectivity,U.ior.value=R.ior,U.refractionRatio.value=R.refractionRatio),R.lightMap&&(U.lightMap.value=R.lightMap,U.lightMapIntensity.value=R.lightMapIntensity,s(R.lightMap,U.lightMapTransform)),R.aoMap&&(U.aoMap.value=R.aoMap,U.aoMapIntensity.value=R.aoMapIntensity,s(R.aoMap,U.aoMapTransform))}function v(U,R){U.diffuse.value.copy(R.color),U.opacity.value=R.opacity,R.map&&(U.map.value=R.map,s(R.map,U.mapTransform))}function M(U,R){U.dashSize.value=R.dashSize,U.totalSize.value=R.dashSize+R.gapSize,U.scale.value=R.scale}function T(U,R,oe,se){U.diffuse.value.copy(R.color),U.opacity.value=R.opacity,U.size.value=R.size*oe,U.scale.value=se*.5,R.map&&(U.map.value=R.map,s(R.map,U.uvTransform)),R.alphaMap&&(U.alphaMap.value=R.alphaMap,s(R.alphaMap,U.alphaMapTransform)),R.alphaTest>0&&(U.alphaTest.value=R.alphaTest)}function A(U,R){U.diffuse.value.copy(R.color),U.opacity.value=R.opacity,U.rotation.value=R.rotation,R.map&&(U.map.value=R.map,s(R.map,U.mapTransform)),R.alphaMap&&(U.alphaMap.value=R.alphaMap,s(R.alphaMap,U.alphaMapTransform)),R.alphaTest>0&&(U.alphaTest.value=R.alphaTest)}function C(U,R){U.specular.value.copy(R.specular),U.shininess.value=Math.max(R.shininess,1e-4)}function P(U,R){R.gradientMap&&(U.gradientMap.value=R.gradientMap)}function I(U,R){U.metalness.value=R.metalness,R.metalnessMap&&(U.metalnessMap.value=R.metalnessMap,s(R.metalnessMap,U.metalnessMapTransform)),U.roughness.value=R.roughness,R.roughnessMap&&(U.roughnessMap.value=R.roughnessMap,s(R.roughnessMap,U.roughnessMapTransform)),R.envMap&&(U.envMapIntensity.value=R.envMapIntensity)}function F(U,R,oe){U.ior.value=R.ior,R.sheen>0&&(U.sheenColor.value.copy(R.sheenColor).multiplyScalar(R.sheen),U.sheenRoughness.value=R.sheenRoughness,R.sheenColorMap&&(U.sheenColorMap.value=R.sheenColorMap,s(R.sheenColorMap,U.sheenColorMapTransform)),R.sheenRoughnessMap&&(U.sheenRoughnessMap.value=R.sheenRoughnessMap,s(R.sheenRoughnessMap,U.sheenRoughnessMapTransform))),R.clearcoat>0&&(U.clearcoat.value=R.clearcoat,U.clearcoatRoughness.value=R.clearcoatRoughness,R.clearcoatMap&&(U.clearcoatMap.value=R.clearcoatMap,s(R.clearcoatMap,U.clearcoatMapTransform)),R.clearcoatRoughnessMap&&(U.clearcoatRoughnessMap.value=R.clearcoatRoughnessMap,s(R.clearcoatRoughnessMap,U.clearcoatRoughnessMapTransform)),R.clearcoatNormalMap&&(U.clearcoatNormalMap.value=R.clearcoatNormalMap,s(R.clearcoatNormalMap,U.clearcoatNormalMapTransform),U.clearcoatNormalScale.value.copy(R.clearcoatNormalScale),R.side===vr&&U.clearcoatNormalScale.value.negate())),R.dispersion>0&&(U.dispersion.value=R.dispersion),R.iridescence>0&&(U.iridescence.value=R.iridescence,U.iridescenceIOR.value=R.iridescenceIOR,U.iridescenceThicknessMinimum.value=R.iridescenceThicknessRange[0],U.iridescenceThicknessMaximum.value=R.iridescenceThicknessRange[1],R.iridescenceMap&&(U.iridescenceMap.value=R.iridescenceMap,s(R.iridescenceMap,U.iridescenceMapTransform)),R.iridescenceThicknessMap&&(U.iridescenceThicknessMap.value=R.iridescenceThicknessMap,s(R.iridescenceThicknessMap,U.iridescenceThicknessMapTransform))),R.transmission>0&&(U.transmission.value=R.transmission,U.transmissionSamplerMap.value=oe.texture,U.transmissionSamplerSize.value.set(oe.width,oe.height),R.transmissionMap&&(U.transmissionMap.value=R.transmissionMap,s(R.transmissionMap,U.transmissionMapTransform)),U.thickness.value=R.thickness,R.thicknessMap&&(U.thicknessMap.value=R.thicknessMap,s(R.thicknessMap,U.thicknessMapTransform)),U.attenuationDistance.value=R.attenuationDistance,U.attenuationColor.value.copy(R.attenuationColor)),R.anisotropy>0&&(U.anisotropyVector.value.set(R.anisotropy*Math.cos(R.anisotropyRotation),R.anisotropy*Math.sin(R.anisotropyRotation)),R.anisotropyMap&&(U.anisotropyMap.value=R.anisotropyMap,s(R.anisotropyMap,U.anisotropyMapTransform))),U.specularIntensity.value=R.specularIntensity,U.specularColor.value.copy(R.specularColor),R.specularColorMap&&(U.specularColorMap.value=R.specularColorMap,s(R.specularColorMap,U.specularColorMapTransform)),R.specularIntensityMap&&(U.specularIntensityMap.value=R.specularIntensityMap,s(R.specularIntensityMap,U.specularIntensityMapTransform))}function W(U,R){R.matcap&&(U.matcap.value=R.matcap)}function Y(U,R){const oe=n.get(R).light;U.referencePosition.value.setFromMatrixPosition(oe.matrixWorld),U.nearDistance.value=oe.shadow.camera.near,U.farDistance.value=oe.shadow.camera.far}return{refreshFogUniforms:l,refreshMaterialUniforms:d}}function pP(u,n,s,l){let d={},m={},v=[];const M=u.getParameter(u.MAX_UNIFORM_BUFFER_BINDINGS);function T(oe,se){const ee=se.program;l.uniformBlockBinding(oe,ee)}function A(oe,se){let ee=d[oe.id];ee===void 0&&(W(oe),ee=C(oe),d[oe.id]=ee,oe.addEventListener("dispose",U));const xe=se.program;l.updateUBOMapping(oe,xe);const de=n.render.frame;m[oe.id]!==de&&(I(oe),m[oe.id]=de)}function C(oe){const se=P();oe.__bindingPointIndex=se;const ee=u.createBuffer(),xe=oe.__size,de=oe.usage;return u.bindBuffer(u.UNIFORM_BUFFER,ee),u.bufferData(u.UNIFORM_BUFFER,xe,de),u.bindBuffer(u.UNIFORM_BUFFER,null),u.bindBufferBase(u.UNIFORM_BUFFER,se,ee),ee}function P(){for(let oe=0;oe<M;oe++)if(v.indexOf(oe)===-1)return v.push(oe),oe;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function I(oe){const se=d[oe.id],ee=oe.uniforms,xe=oe.__cache;u.bindBuffer(u.UNIFORM_BUFFER,se);for(let de=0,le=ee.length;de<le;de++){const ve=Array.isArray(ee[de])?ee[de]:[ee[de]];for(let K=0,q=ve.length;K<q;K++){const he=ve[K];if(F(he,de,K,xe)===!0){const Ne=he.__offset,Ie=Array.isArray(he.value)?he.value:[he.value];let Je=0;for(let Qe=0;Qe<Ie.length;Qe++){const Ze=Ie[Qe],rt=Y(Ze);typeof Ze=="number"||typeof Ze=="boolean"?(he.__data[0]=Ze,u.bufferSubData(u.UNIFORM_BUFFER,Ne+Je,he.__data)):Ze.isMatrix3?(he.__data[0]=Ze.elements[0],he.__data[1]=Ze.elements[1],he.__data[2]=Ze.elements[2],he.__data[3]=0,he.__data[4]=Ze.elements[3],he.__data[5]=Ze.elements[4],he.__data[6]=Ze.elements[5],he.__data[7]=0,he.__data[8]=Ze.elements[6],he.__data[9]=Ze.elements[7],he.__data[10]=Ze.elements[8],he.__data[11]=0):(Ze.toArray(he.__data,Je),Je+=rt.storage/Float32Array.BYTES_PER_ELEMENT)}u.bufferSubData(u.UNIFORM_BUFFER,Ne,he.__data)}}}u.bindBuffer(u.UNIFORM_BUFFER,null)}function F(oe,se,ee,xe){const de=oe.value,le=se+"_"+ee;if(xe[le]===void 0)return typeof de=="number"||typeof de=="boolean"?xe[le]=de:xe[le]=de.clone(),!0;{const ve=xe[le];if(typeof de=="number"||typeof de=="boolean"){if(ve!==de)return xe[le]=de,!0}else if(ve.equals(de)===!1)return ve.copy(de),!0}return!1}function W(oe){const se=oe.uniforms;let ee=0;const xe=16;for(let le=0,ve=se.length;le<ve;le++){const K=Array.isArray(se[le])?se[le]:[se[le]];for(let q=0,he=K.length;q<he;q++){const Ne=K[q],Ie=Array.isArray(Ne.value)?Ne.value:[Ne.value];for(let Je=0,Qe=Ie.length;Je<Qe;Je++){const Ze=Ie[Je],rt=Y(Ze),Oe=ee%xe,wt=Oe%rt.boundary,kt=Oe+wt;ee+=wt,kt!==0&&xe-kt<rt.storage&&(ee+=xe-kt),Ne.__data=new Float32Array(rt.storage/Float32Array.BYTES_PER_ELEMENT),Ne.__offset=ee,ee+=rt.storage}}}const de=ee%xe;return de>0&&(ee+=xe-de),oe.__size=ee,oe.__cache={},this}function Y(oe){const se={boundary:0,storage:0};return typeof oe=="number"||typeof oe=="boolean"?(se.boundary=4,se.storage=4):oe.isVector2?(se.boundary=8,se.storage=8):oe.isVector3||oe.isColor?(se.boundary=16,se.storage=12):oe.isVector4?(se.boundary=16,se.storage=16):oe.isMatrix3?(se.boundary=48,se.storage=48):oe.isMatrix4?(se.boundary=64,se.storage=64):oe.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",oe),se}function U(oe){const se=oe.target;se.removeEventListener("dispose",U);const ee=v.indexOf(se.__bindingPointIndex);v.splice(ee,1),u.deleteBuffer(d[se.id]),delete d[se.id],delete m[se.id]}function R(){for(const oe in d)u.deleteBuffer(d[oe]);v=[],d={},m={}}return{bind:T,update:A,dispose:R}}class mP{constructor(n={}){const{canvas:s=qT(),context:l=null,depth:d=!0,stencil:m=!1,alpha:v=!1,antialias:M=!1,premultipliedAlpha:T=!0,preserveDrawingBuffer:A=!1,powerPreference:C="default",failIfMajorPerformanceCaveat:P=!1,reverseDepthBuffer:I=!1}=n;this.isWebGLRenderer=!0;let F;if(l!==null){if(typeof WebGLRenderingContext<"u"&&l instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");F=l.getContextAttributes().alpha}else F=v;const W=new Uint32Array(4),Y=new Int32Array(4);let U=null,R=null;const oe=[],se=[];this.domElement=s,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Nr,this.toneMapping=ha,this.toneMappingExposure=1;const ee=this;let xe=!1,de=0,le=0,ve=null,K=-1,q=null;const he=new di,Ne=new di;let Ie=null;const Je=new Yn(0);let Qe=0,Ze=s.width,rt=s.height,Oe=1,wt=null,kt=null;const an=new di(0,0,Ze,rt),Cn=new di(0,0,Ze,rt);let ei=!1;const Ge=new Dp;let pt=!1,Kt=!1;const ce=new Mi,ye=new Mi,Ee=new Se,Ue=new di,ot={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let ht=!1;function Qt(){return ve===null?Oe:1}let ie=l;function Dt(k,fe){return s.getContext(k,fe)}try{const k={alpha:!0,depth:d,stencil:m,antialias:M,premultipliedAlpha:T,preserveDrawingBuffer:A,powerPreference:C,failIfMajorPerformanceCaveat:P};if("setAttribute"in s&&s.setAttribute("data-engine",`three.js r${Tp}`),s.addEventListener("webglcontextlost",Xe,!1),s.addEventListener("webglcontextrestored",Bt,!1),s.addEventListener("webglcontextcreationerror",St,!1),ie===null){const fe="webgl2";if(ie=Dt(fe,k),ie===null)throw Dt(fe)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(k){throw console.error("THREE.WebGLRenderer: "+k.message),k}let bt,Tt,gt,ln,ut,X,B,ue,Le,we,Pe,yt,We,ct,je,ze,it,Ct,Nt,Rt,On,pn,Zn,ae;function _t(){bt=new bR(ie),bt.init(),pn=new aP(ie,bt),Tt=new xR(ie,bt,n,pn),gt=new rP(ie,bt),Tt.reverseDepthBuffer&&I&&gt.buffers.depth.setReversed(!0),ln=new wR(ie),ut=new X2,X=new sP(ie,bt,gt,ut,Tt,pn,ln),B=new yR(ee),ue=new ER(ee),Le=new UA(ie),Zn=new gR(ie,Le),we=new TR(ie,Le,ln,Zn),Pe=new RR(ie,we,Le,ln),Nt=new CR(ie,Tt,X),ze=new vR(ut),yt=new W2(ee,B,ue,bt,Tt,Zn,ze),We=new fP(ee,ut),ct=new Y2,je=new Q2(bt),Ct=new mR(ee,B,ue,gt,Pe,F,T),it=new nP(ee,Pe,Tt),ae=new pP(ie,ln,Tt,gt),Rt=new _R(ie,bt,ln),On=new AR(ie,bt,ln),ln.programs=yt.programs,ee.capabilities=Tt,ee.extensions=bt,ee.properties=ut,ee.renderLists=ct,ee.shadowMap=it,ee.state=gt,ee.info=ln}_t();const Fe=new uP(ee,ie);this.xr=Fe,this.getContext=function(){return ie},this.getContextAttributes=function(){return ie.getContextAttributes()},this.forceContextLoss=function(){const k=bt.get("WEBGL_lose_context");k&&k.loseContext()},this.forceContextRestore=function(){const k=bt.get("WEBGL_lose_context");k&&k.restoreContext()},this.getPixelRatio=function(){return Oe},this.setPixelRatio=function(k){k!==void 0&&(Oe=k,this.setSize(Ze,rt,!1))},this.getSize=function(k){return k.set(Ze,rt)},this.setSize=function(k,fe,be=!0){if(Fe.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}Ze=k,rt=fe,s.width=Math.floor(k*Oe),s.height=Math.floor(fe*Oe),be===!0&&(s.style.width=k+"px",s.style.height=fe+"px"),this.setViewport(0,0,k,fe)},this.getDrawingBufferSize=function(k){return k.set(Ze*Oe,rt*Oe).floor()},this.setDrawingBufferSize=function(k,fe,be){Ze=k,rt=fe,Oe=be,s.width=Math.floor(k*be),s.height=Math.floor(fe*be),this.setViewport(0,0,k,fe)},this.getCurrentViewport=function(k){return k.copy(he)},this.getViewport=function(k){return k.copy(an)},this.setViewport=function(k,fe,be,Te){k.isVector4?an.set(k.x,k.y,k.z,k.w):an.set(k,fe,be,Te),gt.viewport(he.copy(an).multiplyScalar(Oe).round())},this.getScissor=function(k){return k.copy(Cn)},this.setScissor=function(k,fe,be,Te){k.isVector4?Cn.set(k.x,k.y,k.z,k.w):Cn.set(k,fe,be,Te),gt.scissor(Ne.copy(Cn).multiplyScalar(Oe).round())},this.getScissorTest=function(){return ei},this.setScissorTest=function(k){gt.setScissorTest(ei=k)},this.setOpaqueSort=function(k){wt=k},this.setTransparentSort=function(k){kt=k},this.getClearColor=function(k){return k.copy(Ct.getClearColor())},this.setClearColor=function(){Ct.setClearColor.apply(Ct,arguments)},this.getClearAlpha=function(){return Ct.getClearAlpha()},this.setClearAlpha=function(){Ct.setClearAlpha.apply(Ct,arguments)},this.clear=function(k=!0,fe=!0,be=!0){let Te=0;if(k){let me=!1;if(ve!==null){const lt=ve.texture.format;me=lt===Ip||lt===Pp||lt===Rp}if(me){const lt=ve.texture.type,At=lt===Os||lt===io||lt===fl||lt===dc||lt===wp||lt===Cp,zt=Ct.getClearColor(),qt=Ct.getClearAlpha(),mn=zt.r,gn=zt.g,on=zt.b;At?(W[0]=mn,W[1]=gn,W[2]=on,W[3]=qt,ie.clearBufferuiv(ie.COLOR,0,W)):(Y[0]=mn,Y[1]=gn,Y[2]=on,Y[3]=qt,ie.clearBufferiv(ie.COLOR,0,Y))}else Te|=ie.COLOR_BUFFER_BIT}fe&&(Te|=ie.DEPTH_BUFFER_BIT),be&&(Te|=ie.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),ie.clear(Te)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){s.removeEventListener("webglcontextlost",Xe,!1),s.removeEventListener("webglcontextrestored",Bt,!1),s.removeEventListener("webglcontextcreationerror",St,!1),Ct.dispose(),ct.dispose(),je.dispose(),ut.dispose(),B.dispose(),ue.dispose(),Pe.dispose(),Zn.dispose(),ae.dispose(),yt.dispose(),Fe.dispose(),Fe.removeEventListener("sessionstart",fs),Fe.removeEventListener("sessionend",da),Pr.stop()};function Xe(k){k.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),xe=!0}function Bt(){console.log("THREE.WebGLRenderer: Context Restored."),xe=!1;const k=ln.autoReset,fe=it.enabled,be=it.autoUpdate,Te=it.needsUpdate,me=it.type;_t(),ln.autoReset=k,it.enabled=fe,it.autoUpdate=be,it.needsUpdate=Te,it.type=me}function St(k){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",k.statusMessage)}function Mn(k){const fe=k.target;fe.removeEventListener("dispose",Mn),pi(fe)}function pi(k){vi(k),ut.remove(k)}function vi(k){const fe=ut.get(k).programs;fe!==void 0&&(fe.forEach(function(be){yt.releaseProgram(be)}),k.isShaderMaterial&&yt.releaseShaderCache(k))}this.renderBufferDirect=function(k,fe,be,Te,me,lt){fe===null&&(fe=ot);const At=me.isMesh&&me.matrixWorld.determinant()<0,zt=ps(k,fe,be,Te,me);gt.setMaterial(Te,At);let qt=be.index,mn=1;if(Te.wireframe===!0){if(qt=we.getWireframeAttribute(be),qt===void 0)return;mn=2}const gn=be.drawRange,on=be.attributes.position;let Bn=gn.start*mn,kn=(gn.start+gn.count)*mn;lt!==null&&(Bn=Math.max(Bn,lt.start*mn),kn=Math.min(kn,(lt.start+lt.count)*mn)),qt!==null?(Bn=Math.max(Bn,0),kn=Math.min(kn,qt.count)):on!=null&&(Bn=Math.max(Bn,0),kn=Math.min(kn,on.count));const gi=kn-Bn;if(gi<0||gi===1/0)return;Zn.setup(me,Te,zt,be,qt);let fi,zn=Rt;if(qt!==null&&(fi=Le.get(qt),zn=On,zn.setIndex(fi)),me.isMesh)Te.wireframe===!0?(gt.setLineWidth(Te.wireframeLinewidth*Qt()),zn.setMode(ie.LINES)):zn.setMode(ie.TRIANGLES);else if(me.isLine){let hn=Te.linewidth;hn===void 0&&(hn=1),gt.setLineWidth(hn*Qt()),me.isLineSegments?zn.setMode(ie.LINES):me.isLineLoop?zn.setMode(ie.LINE_LOOP):zn.setMode(ie.LINE_STRIP)}else me.isPoints?zn.setMode(ie.POINTS):me.isSprite&&zn.setMode(ie.TRIANGLES);if(me.isBatchedMesh)if(me._multiDrawInstances!==null)zn.renderMultiDrawInstances(me._multiDrawStarts,me._multiDrawCounts,me._multiDrawCount,me._multiDrawInstances);else if(bt.get("WEBGL_multi_draw"))zn.renderMultiDraw(me._multiDrawStarts,me._multiDrawCounts,me._multiDrawCount);else{const hn=me._multiDrawStarts,Si=me._multiDrawCounts,Hn=me._multiDrawCount,Yi=qt?Le.get(qt).bytesPerElement:1,Vr=ut.get(Te).currentProgram.getUniforms();for(let Vi=0;Vi<Hn;Vi++)Vr.setValue(ie,"_gl_DrawID",Vi),zn.render(hn[Vi]/Yi,Si[Vi])}else if(me.isInstancedMesh)zn.renderInstances(Bn,gi,me.count);else if(be.isInstancedBufferGeometry){const hn=be._maxInstanceCount!==void 0?be._maxInstanceCount:1/0,Si=Math.min(be.instanceCount,hn);zn.renderInstances(Bn,gi,Si)}else zn.render(Bn,gi)};function Wn(k,fe,be){k.transparent===!0&&k.side===Fr&&k.forceSinglePass===!1?(k.side=vr,k.needsUpdate=!0,Vs(k,fe,be),k.side=Fs,k.needsUpdate=!0,Vs(k,fe,be),k.side=Fr):Vs(k,fe,be)}this.compile=function(k,fe,be=null){be===null&&(be=k),R=je.get(be),R.init(fe),se.push(R),be.traverseVisible(function(me){me.isLight&&me.layers.test(fe.layers)&&(R.pushLight(me),me.castShadow&&R.pushShadow(me))}),k!==be&&k.traverseVisible(function(me){me.isLight&&me.layers.test(fe.layers)&&(R.pushLight(me),me.castShadow&&R.pushShadow(me))}),R.setupLights();const Te=new Set;return k.traverse(function(me){if(!(me.isMesh||me.isPoints||me.isLine||me.isSprite))return;const lt=me.material;if(lt)if(Array.isArray(lt))for(let At=0;At<lt.length;At++){const zt=lt[At];Wn(zt,be,me),Te.add(zt)}else Wn(lt,be,me),Te.add(lt)}),se.pop(),R=null,Te},this.compileAsync=function(k,fe,be=null){const Te=this.compile(k,fe,be);return new Promise(me=>{function lt(){if(Te.forEach(function(At){ut.get(At).currentProgram.isReady()&&Te.delete(At)}),Te.size===0){me(k);return}setTimeout(lt,10)}bt.get("KHR_parallel_shader_compile")!==null?lt():setTimeout(lt,10)})};let wi=null;function _i(k){wi&&wi(k)}function fs(){Pr.stop()}function da(){Pr.start()}const Pr=new Ex;Pr.setAnimationLoop(_i),typeof self<"u"&&Pr.setContext(self),this.setAnimationLoop=function(k){wi=k,Fe.setAnimationLoop(k),k===null?Pr.stop():Pr.start()},Fe.addEventListener("sessionstart",fs),Fe.addEventListener("sessionend",da),this.render=function(k,fe){if(fe!==void 0&&fe.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(xe===!0)return;if(k.matrixWorldAutoUpdate===!0&&k.updateMatrixWorld(),fe.parent===null&&fe.matrixWorldAutoUpdate===!0&&fe.updateMatrixWorld(),Fe.enabled===!0&&Fe.isPresenting===!0&&(Fe.cameraAutoUpdate===!0&&Fe.updateCamera(fe),fe=Fe.getCamera()),k.isScene===!0&&k.onBeforeRender(ee,k,fe,ve),R=je.get(k,se.length),R.init(fe),se.push(R),ye.multiplyMatrices(fe.projectionMatrix,fe.matrixWorldInverse),Ge.setFromProjectionMatrix(ye),Kt=this.localClippingEnabled,pt=ze.init(this.clippingPlanes,Kt),U=ct.get(k,oe.length),U.init(),oe.push(U),Fe.enabled===!0&&Fe.isPresenting===!0){const lt=ee.xr.getDepthSensingMesh();lt!==null&&zr(lt,fe,-1/0,ee.sortObjects)}zr(k,fe,0,ee.sortObjects),U.finish(),ee.sortObjects===!0&&U.sort(wt,kt),ht=Fe.enabled===!1||Fe.isPresenting===!1||Fe.hasDepthSensing()===!1,ht&&Ct.addToRenderList(U,k),this.info.render.frame++,pt===!0&&ze.beginShadows();const be=R.state.shadowsArray;it.render(be,k,fe),pt===!0&&ze.endShadows(),this.info.autoReset===!0&&this.info.reset();const Te=U.opaque,me=U.transmissive;if(R.setupLights(),fe.isArrayCamera){const lt=fe.cameras;if(me.length>0)for(let At=0,zt=lt.length;At<zt;At++){const qt=lt[At];oo(Te,me,k,qt)}ht&&Ct.render(k);for(let At=0,zt=lt.length;At<zt;At++){const qt=lt[At];ao(U,k,qt,qt.viewport)}}else me.length>0&&oo(Te,me,k,fe),ht&&Ct.render(k),ao(U,k,fe);ve!==null&&(X.updateMultisampleRenderTarget(ve),X.updateRenderTargetMipmap(ve)),k.isScene===!0&&k.onAfterRender(ee,k,fe),Zn.resetDefaultState(),K=-1,q=null,se.pop(),se.length>0?(R=se[se.length-1],pt===!0&&ze.setGlobalState(ee.clippingPlanes,R.state.camera)):R=null,oe.pop(),oe.length>0?U=oe[oe.length-1]:U=null};function zr(k,fe,be,Te){if(k.visible===!1)return;if(k.layers.test(fe.layers)){if(k.isGroup)be=k.renderOrder;else if(k.isLOD)k.autoUpdate===!0&&k.update(fe);else if(k.isLight)R.pushLight(k),k.castShadow&&R.pushShadow(k);else if(k.isSprite){if(!k.frustumCulled||Ge.intersectsSprite(k)){Te&&Ue.setFromMatrixPosition(k.matrixWorld).applyMatrix4(ye);const At=Pe.update(k),zt=k.material;zt.visible&&U.push(k,At,zt,be,Ue.z,null)}}else if((k.isMesh||k.isLine||k.isPoints)&&(!k.frustumCulled||Ge.intersectsObject(k))){const At=Pe.update(k),zt=k.material;if(Te&&(k.boundingSphere!==void 0?(k.boundingSphere===null&&k.computeBoundingSphere(),Ue.copy(k.boundingSphere.center)):(At.boundingSphere===null&&At.computeBoundingSphere(),Ue.copy(At.boundingSphere.center)),Ue.applyMatrix4(k.matrixWorld).applyMatrix4(ye)),Array.isArray(zt)){const qt=At.groups;for(let mn=0,gn=qt.length;mn<gn;mn++){const on=qt[mn],Bn=zt[on.materialIndex];Bn&&Bn.visible&&U.push(k,At,Bn,be,Ue.z,on)}}else zt.visible&&U.push(k,At,zt,be,Ue.z,null)}}const lt=k.children;for(let At=0,zt=lt.length;At<zt;At++)zr(lt[At],fe,be,Te)}function ao(k,fe,be,Te){const me=k.opaque,lt=k.transmissive,At=k.transparent;R.setupLightsView(be),pt===!0&&ze.setGlobalState(ee.clippingPlanes,be),Te&&gt.viewport(he.copy(Te)),me.length>0&&zs(me,fe,be),lt.length>0&&zs(lt,fe,be),At.length>0&&zs(At,fe,be),gt.buffers.depth.setTest(!0),gt.buffers.depth.setMask(!0),gt.buffers.color.setMask(!0),gt.setPolygonOffset(!1)}function oo(k,fe,be,Te){if((be.isScene===!0?be.overrideMaterial:null)!==null)return;R.state.transmissionRenderTarget[Te.id]===void 0&&(R.state.transmissionRenderTarget[Te.id]=new ro(1,1,{generateMipmaps:!0,type:bt.has("EXT_color_buffer_half_float")||bt.has("EXT_color_buffer_float")?ml:Os,minFilter:no,samples:4,stencilBuffer:m,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ni.workingColorSpace}));const lt=R.state.transmissionRenderTarget[Te.id],At=Te.viewport||he;lt.setSize(At.z,At.w);const zt=ee.getRenderTarget();ee.setRenderTarget(lt),ee.getClearColor(Je),Qe=ee.getClearAlpha(),Qe<1&&ee.setClearColor(16777215,.5),ee.clear(),ht&&Ct.render(be);const qt=ee.toneMapping;ee.toneMapping=ha;const mn=Te.viewport;if(Te.viewport!==void 0&&(Te.viewport=void 0),R.setupLightsView(Te),pt===!0&&ze.setGlobalState(ee.clippingPlanes,Te),zs(k,be,Te),X.updateMultisampleRenderTarget(lt),X.updateRenderTargetMipmap(lt),bt.has("WEBGL_multisampled_render_to_texture")===!1){let gn=!1;for(let on=0,Bn=fe.length;on<Bn;on++){const kn=fe[on],gi=kn.object,fi=kn.geometry,zn=kn.material,hn=kn.group;if(zn.side===Fr&&gi.layers.test(Te.layers)){const Si=zn.side;zn.side=vr,zn.needsUpdate=!0,zi(gi,be,Te,fi,zn,hn),zn.side=Si,zn.needsUpdate=!0,gn=!0}}gn===!0&&(X.updateMultisampleRenderTarget(lt),X.updateRenderTargetMipmap(lt))}ee.setRenderTarget(zt),ee.setClearColor(Je,Qe),mn!==void 0&&(Te.viewport=mn),ee.toneMapping=qt}function zs(k,fe,be){const Te=fe.isScene===!0?fe.overrideMaterial:null;for(let me=0,lt=k.length;me<lt;me++){const At=k[me],zt=At.object,qt=At.geometry,mn=Te===null?At.material:Te,gn=At.group;zt.layers.test(be.layers)&&zi(zt,fe,be,qt,mn,gn)}}function zi(k,fe,be,Te,me,lt){k.onBeforeRender(ee,fe,be,Te,me,lt),k.modelViewMatrix.multiplyMatrices(be.matrixWorldInverse,k.matrixWorld),k.normalMatrix.getNormalMatrix(k.modelViewMatrix),me.onBeforeRender(ee,fe,be,Te,k,lt),me.transparent===!0&&me.side===Fr&&me.forceSinglePass===!1?(me.side=vr,me.needsUpdate=!0,ee.renderBufferDirect(be,fe,Te,me,k,lt),me.side=Fs,me.needsUpdate=!0,ee.renderBufferDirect(be,fe,Te,me,k,lt),me.side=Fr):ee.renderBufferDirect(be,fe,Te,me,k,lt),k.onAfterRender(ee,fe,be,Te,me,lt)}function Vs(k,fe,be){fe.isScene!==!0&&(fe=ot);const Te=ut.get(k),me=R.state.lights,lt=R.state.shadowsArray,At=me.state.version,zt=yt.getParameters(k,me.state,lt,fe,be),qt=yt.getProgramCacheKey(zt);let mn=Te.programs;Te.environment=k.isMeshStandardMaterial?fe.environment:null,Te.fog=fe.fog,Te.envMap=(k.isMeshStandardMaterial?ue:B).get(k.envMap||Te.environment),Te.envMapRotation=Te.environment!==null&&k.envMap===null?fe.environmentRotation:k.envMapRotation,mn===void 0&&(k.addEventListener("dispose",Mn),mn=new Map,Te.programs=mn);let gn=mn.get(qt);if(gn!==void 0){if(Te.currentProgram===gn&&Te.lightsStateVersion===At)return rs(k,zt),gn}else zt.uniforms=yt.getUniforms(k),k.onBeforeCompile(zt,ee),gn=yt.acquireProgram(zt,qt),mn.set(qt,gn),Te.uniforms=zt.uniforms;const on=Te.uniforms;return(!k.isShaderMaterial&&!k.isRawShaderMaterial||k.clipping===!0)&&(on.clippingPlanes=ze.uniform),rs(k,zt),Te.needsLights=fa(k),Te.lightsStateVersion=At,Te.needsLights&&(on.ambientLightColor.value=me.state.ambient,on.lightProbe.value=me.state.probe,on.directionalLights.value=me.state.directional,on.directionalLightShadows.value=me.state.directionalShadow,on.spotLights.value=me.state.spot,on.spotLightShadows.value=me.state.spotShadow,on.rectAreaLights.value=me.state.rectArea,on.ltc_1.value=me.state.rectAreaLTC1,on.ltc_2.value=me.state.rectAreaLTC2,on.pointLights.value=me.state.point,on.pointLightShadows.value=me.state.pointShadow,on.hemisphereLights.value=me.state.hemi,on.directionalShadowMap.value=me.state.directionalShadowMap,on.directionalShadowMatrix.value=me.state.directionalShadowMatrix,on.spotShadowMap.value=me.state.spotShadowMap,on.spotLightMatrix.value=me.state.spotLightMatrix,on.spotLightMap.value=me.state.spotLightMap,on.pointShadowMap.value=me.state.pointShadowMap,on.pointShadowMatrix.value=me.state.pointShadowMatrix),Te.currentProgram=gn,Te.uniformsList=null,gn}function co(k){if(k.uniformsList===null){const fe=k.currentProgram.getUniforms();k.uniformsList=Mu.seqWithValue(fe.seq,k.uniforms)}return k.uniformsList}function rs(k,fe){const be=ut.get(k);be.outputColorSpace=fe.outputColorSpace,be.batching=fe.batching,be.batchingColor=fe.batchingColor,be.instancing=fe.instancing,be.instancingColor=fe.instancingColor,be.instancingMorph=fe.instancingMorph,be.skinning=fe.skinning,be.morphTargets=fe.morphTargets,be.morphNormals=fe.morphNormals,be.morphColors=fe.morphColors,be.morphTargetsCount=fe.morphTargetsCount,be.numClippingPlanes=fe.numClippingPlanes,be.numIntersection=fe.numClipIntersection,be.vertexAlphas=fe.vertexAlphas,be.vertexTangents=fe.vertexTangents,be.toneMapping=fe.toneMapping}function ps(k,fe,be,Te,me){fe.isScene!==!0&&(fe=ot),X.resetTextureUnits();const lt=fe.fog,At=Te.isMeshStandardMaterial?fe.environment:null,zt=ve===null?ee.outputColorSpace:ve.isXRRenderTarget===!0?ve.texture.colorSpace:pc,qt=(Te.isMeshStandardMaterial?ue:B).get(Te.envMap||At),mn=Te.vertexColors===!0&&!!be.attributes.color&&be.attributes.color.itemSize===4,gn=!!be.attributes.tangent&&(!!Te.normalMap||Te.anisotropy>0),on=!!be.morphAttributes.position,Bn=!!be.morphAttributes.normal,kn=!!be.morphAttributes.color;let gi=ha;Te.toneMapped&&(ve===null||ve.isXRRenderTarget===!0)&&(gi=ee.toneMapping);const fi=be.morphAttributes.position||be.morphAttributes.normal||be.morphAttributes.color,zn=fi!==void 0?fi.length:0,hn=ut.get(Te),Si=R.state.lights;if(pt===!0&&(Kt===!0||k!==q)){const Ci=k===q&&Te.id===K;ze.setState(Te,k,Ci)}let Hn=!1;Te.version===hn.__version?(hn.needsLights&&hn.lightsStateVersion!==Si.state.version||hn.outputColorSpace!==zt||me.isBatchedMesh&&hn.batching===!1||!me.isBatchedMesh&&hn.batching===!0||me.isBatchedMesh&&hn.batchingColor===!0&&me.colorTexture===null||me.isBatchedMesh&&hn.batchingColor===!1&&me.colorTexture!==null||me.isInstancedMesh&&hn.instancing===!1||!me.isInstancedMesh&&hn.instancing===!0||me.isSkinnedMesh&&hn.skinning===!1||!me.isSkinnedMesh&&hn.skinning===!0||me.isInstancedMesh&&hn.instancingColor===!0&&me.instanceColor===null||me.isInstancedMesh&&hn.instancingColor===!1&&me.instanceColor!==null||me.isInstancedMesh&&hn.instancingMorph===!0&&me.morphTexture===null||me.isInstancedMesh&&hn.instancingMorph===!1&&me.morphTexture!==null||hn.envMap!==qt||Te.fog===!0&&hn.fog!==lt||hn.numClippingPlanes!==void 0&&(hn.numClippingPlanes!==ze.numPlanes||hn.numIntersection!==ze.numIntersection)||hn.vertexAlphas!==mn||hn.vertexTangents!==gn||hn.morphTargets!==on||hn.morphNormals!==Bn||hn.morphColors!==kn||hn.toneMapping!==gi||hn.morphTargetsCount!==zn)&&(Hn=!0):(Hn=!0,hn.__version=Te.version);let Yi=hn.currentProgram;Hn===!0&&(Yi=Vs(Te,fe,me));let Vr=!1,Vi=!1,ss=!1;const oi=Yi.getUniforms(),Gi=hn.uniforms;if(gt.useProgram(Yi.program)&&(Vr=!0,Vi=!0,ss=!0),Te.id!==K&&(K=Te.id,Vi=!0),Vr||q!==k){gt.buffers.depth.getReversed()?(ce.copy(k.projectionMatrix),ZT(ce),$T(ce),oi.setValue(ie,"projectionMatrix",ce)):oi.setValue(ie,"projectionMatrix",k.projectionMatrix),oi.setValue(ie,"viewMatrix",k.matrixWorldInverse);const Ui=oi.map.cameraPosition;Ui!==void 0&&Ui.setValue(ie,Ee.setFromMatrixPosition(k.matrixWorld)),Tt.logarithmicDepthBuffer&&oi.setValue(ie,"logDepthBufFC",2/(Math.log(k.far+1)/Math.LN2)),(Te.isMeshPhongMaterial||Te.isMeshToonMaterial||Te.isMeshLambertMaterial||Te.isMeshBasicMaterial||Te.isMeshStandardMaterial||Te.isShaderMaterial)&&oi.setValue(ie,"isOrthographic",k.isOrthographicCamera===!0),q!==k&&(q=k,Vi=!0,ss=!0)}if(me.isSkinnedMesh){oi.setOptional(ie,me,"bindMatrix"),oi.setOptional(ie,me,"bindMatrixInverse");const Ci=me.skeleton;Ci&&(Ci.boneTexture===null&&Ci.computeBoneTexture(),oi.setValue(ie,"boneTexture",Ci.boneTexture,X))}me.isBatchedMesh&&(oi.setOptional(ie,me,"batchingTexture"),oi.setValue(ie,"batchingTexture",me._matricesTexture,X),oi.setOptional(ie,me,"batchingIdTexture"),oi.setValue(ie,"batchingIdTexture",me._indirectTexture,X),oi.setOptional(ie,me,"batchingColorTexture"),me._colorsTexture!==null&&oi.setValue(ie,"batchingColorTexture",me._colorsTexture,X));const Wi=be.morphAttributes;if((Wi.position!==void 0||Wi.normal!==void 0||Wi.color!==void 0)&&Nt.update(me,be,Yi),(Vi||hn.receiveShadow!==me.receiveShadow)&&(hn.receiveShadow=me.receiveShadow,oi.setValue(ie,"receiveShadow",me.receiveShadow)),Te.isMeshGouraudMaterial&&Te.envMap!==null&&(Gi.envMap.value=qt,Gi.flipEnvMap.value=qt.isCubeTexture&&qt.isRenderTargetTexture===!1?-1:1),Te.isMeshStandardMaterial&&Te.envMap===null&&fe.environment!==null&&(Gi.envMapIntensity.value=fe.environmentIntensity),Vi&&(oi.setValue(ie,"toneMappingExposure",ee.toneMappingExposure),hn.needsLights&&lo(Gi,ss),lt&&Te.fog===!0&&We.refreshFogUniforms(Gi,lt),We.refreshMaterialUniforms(Gi,Te,Oe,rt,R.state.transmissionRenderTarget[k.id]),Mu.upload(ie,co(hn),Gi,X)),Te.isShaderMaterial&&Te.uniformsNeedUpdate===!0&&(Mu.upload(ie,co(hn),Gi,X),Te.uniformsNeedUpdate=!1),Te.isSpriteMaterial&&oi.setValue(ie,"center",me.center),oi.setValue(ie,"modelViewMatrix",me.modelViewMatrix),oi.setValue(ie,"normalMatrix",me.normalMatrix),oi.setValue(ie,"modelMatrix",me.matrixWorld),Te.isShaderMaterial||Te.isRawShaderMaterial){const Ci=Te.uniformsGroups;for(let Ui=0,ks=Ci.length;Ui<ks;Ui++){const kr=Ci[Ui];ae.update(kr,Yi),ae.bind(kr,Yi)}}return Yi}function lo(k,fe){k.ambientLightColor.needsUpdate=fe,k.lightProbe.needsUpdate=fe,k.directionalLights.needsUpdate=fe,k.directionalLightShadows.needsUpdate=fe,k.pointLights.needsUpdate=fe,k.pointLightShadows.needsUpdate=fe,k.spotLights.needsUpdate=fe,k.spotLightShadows.needsUpdate=fe,k.rectAreaLights.needsUpdate=fe,k.hemisphereLights.needsUpdate=fe}function fa(k){return k.isMeshLambertMaterial||k.isMeshToonMaterial||k.isMeshPhongMaterial||k.isMeshStandardMaterial||k.isShadowMaterial||k.isShaderMaterial&&k.lights===!0}this.getActiveCubeFace=function(){return de},this.getActiveMipmapLevel=function(){return le},this.getRenderTarget=function(){return ve},this.setRenderTargetTextures=function(k,fe,be){ut.get(k.texture).__webglTexture=fe,ut.get(k.depthTexture).__webglTexture=be;const Te=ut.get(k);Te.__hasExternalTextures=!0,Te.__autoAllocateDepthBuffer=be===void 0,Te.__autoAllocateDepthBuffer||bt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),Te.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(k,fe){const be=ut.get(k);be.__webglFramebuffer=fe,be.__useDefaultFramebuffer=fe===void 0},this.setRenderTarget=function(k,fe=0,be=0){ve=k,de=fe,le=be;let Te=!0,me=null,lt=!1,At=!1;if(k){const qt=ut.get(k);if(qt.__useDefaultFramebuffer!==void 0)gt.bindFramebuffer(ie.FRAMEBUFFER,null),Te=!1;else if(qt.__webglFramebuffer===void 0)X.setupRenderTarget(k);else if(qt.__hasExternalTextures)X.rebindTextures(k,ut.get(k.texture).__webglTexture,ut.get(k.depthTexture).__webglTexture);else if(k.depthBuffer){const on=k.depthTexture;if(qt.__boundDepthTexture!==on){if(on!==null&&ut.has(on)&&(k.width!==on.image.width||k.height!==on.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");X.setupDepthRenderbuffer(k)}}const mn=k.texture;(mn.isData3DTexture||mn.isDataArrayTexture||mn.isCompressedArrayTexture)&&(At=!0);const gn=ut.get(k).__webglFramebuffer;k.isWebGLCubeRenderTarget?(Array.isArray(gn[fe])?me=gn[fe][be]:me=gn[fe],lt=!0):k.samples>0&&X.useMultisampledRTT(k)===!1?me=ut.get(k).__webglMultisampledFramebuffer:Array.isArray(gn)?me=gn[be]:me=gn,he.copy(k.viewport),Ne.copy(k.scissor),Ie=k.scissorTest}else he.copy(an).multiplyScalar(Oe).floor(),Ne.copy(Cn).multiplyScalar(Oe).floor(),Ie=ei;if(gt.bindFramebuffer(ie.FRAMEBUFFER,me)&&Te&&gt.drawBuffers(k,me),gt.viewport(he),gt.scissor(Ne),gt.setScissorTest(Ie),lt){const qt=ut.get(k.texture);ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+fe,qt.__webglTexture,be)}else if(At){const qt=ut.get(k.texture),mn=fe||0;ie.framebufferTextureLayer(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,qt.__webglTexture,be||0,mn)}K=-1},this.readRenderTargetPixels=function(k,fe,be,Te,me,lt,At){if(!(k&&k.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let zt=ut.get(k).__webglFramebuffer;if(k.isWebGLCubeRenderTarget&&At!==void 0&&(zt=zt[At]),zt){gt.bindFramebuffer(ie.FRAMEBUFFER,zt);try{const qt=k.texture,mn=qt.format,gn=qt.type;if(!Tt.textureFormatReadable(mn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Tt.textureTypeReadable(gn)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}fe>=0&&fe<=k.width-Te&&be>=0&&be<=k.height-me&&ie.readPixels(fe,be,Te,me,pn.convert(mn),pn.convert(gn),lt)}finally{const qt=ve!==null?ut.get(ve).__webglFramebuffer:null;gt.bindFramebuffer(ie.FRAMEBUFFER,qt)}}},this.readRenderTargetPixelsAsync=async function(k,fe,be,Te,me,lt,At){if(!(k&&k.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let zt=ut.get(k).__webglFramebuffer;if(k.isWebGLCubeRenderTarget&&At!==void 0&&(zt=zt[At]),zt){const qt=k.texture,mn=qt.format,gn=qt.type;if(!Tt.textureFormatReadable(mn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Tt.textureTypeReadable(gn))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(fe>=0&&fe<=k.width-Te&&be>=0&&be<=k.height-me){gt.bindFramebuffer(ie.FRAMEBUFFER,zt);const on=ie.createBuffer();ie.bindBuffer(ie.PIXEL_PACK_BUFFER,on),ie.bufferData(ie.PIXEL_PACK_BUFFER,lt.byteLength,ie.STREAM_READ),ie.readPixels(fe,be,Te,me,pn.convert(mn),pn.convert(gn),0);const Bn=ve!==null?ut.get(ve).__webglFramebuffer:null;gt.bindFramebuffer(ie.FRAMEBUFFER,Bn);const kn=ie.fenceSync(ie.SYNC_GPU_COMMANDS_COMPLETE,0);return ie.flush(),await YT(ie,kn,4),ie.bindBuffer(ie.PIXEL_PACK_BUFFER,on),ie.getBufferSubData(ie.PIXEL_PACK_BUFFER,0,lt),ie.deleteBuffer(on),ie.deleteSync(kn),lt}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(k,fe=null,be=0){k.isTexture!==!0&&(rc("WebGLRenderer: copyFramebufferToTexture function signature has changed."),fe=arguments[0]||null,k=arguments[1]);const Te=Math.pow(2,-be),me=Math.floor(k.image.width*Te),lt=Math.floor(k.image.height*Te),At=fe!==null?fe.x:0,zt=fe!==null?fe.y:0;X.setTexture2D(k,0),ie.copyTexSubImage2D(ie.TEXTURE_2D,be,0,0,At,zt,me,lt),gt.unbindTexture()};const vc=ie.createFramebuffer(),ho=ie.createFramebuffer();this.copyTextureToTexture=function(k,fe,be=null,Te=null,me=0,lt=null){k.isTexture!==!0&&(rc("WebGLRenderer: copyTextureToTexture function signature has changed."),Te=arguments[0]||null,k=arguments[1],fe=arguments[2],lt=arguments[3]||0,be=null),lt===null&&(me!==0?(rc("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),lt=me,me=0):lt=0);let At,zt,qt,mn,gn,on,Bn,kn,gi;const fi=k.isCompressedTexture?k.mipmaps[lt]:k.image;if(be!==null)At=be.max.x-be.min.x,zt=be.max.y-be.min.y,qt=be.isBox3?be.max.z-be.min.z:1,mn=be.min.x,gn=be.min.y,on=be.isBox3?be.min.z:0;else{const Wi=Math.pow(2,-me);At=Math.floor(fi.width*Wi),zt=Math.floor(fi.height*Wi),k.isDataArrayTexture?qt=fi.depth:k.isData3DTexture?qt=Math.floor(fi.depth*Wi):qt=1,mn=0,gn=0,on=0}Te!==null?(Bn=Te.x,kn=Te.y,gi=Te.z):(Bn=0,kn=0,gi=0);const zn=pn.convert(fe.format),hn=pn.convert(fe.type);let Si;fe.isData3DTexture?(X.setTexture3D(fe,0),Si=ie.TEXTURE_3D):fe.isDataArrayTexture||fe.isCompressedArrayTexture?(X.setTexture2DArray(fe,0),Si=ie.TEXTURE_2D_ARRAY):(X.setTexture2D(fe,0),Si=ie.TEXTURE_2D),ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL,fe.flipY),ie.pixelStorei(ie.UNPACK_PREMULTIPLY_ALPHA_WEBGL,fe.premultiplyAlpha),ie.pixelStorei(ie.UNPACK_ALIGNMENT,fe.unpackAlignment);const Hn=ie.getParameter(ie.UNPACK_ROW_LENGTH),Yi=ie.getParameter(ie.UNPACK_IMAGE_HEIGHT),Vr=ie.getParameter(ie.UNPACK_SKIP_PIXELS),Vi=ie.getParameter(ie.UNPACK_SKIP_ROWS),ss=ie.getParameter(ie.UNPACK_SKIP_IMAGES);ie.pixelStorei(ie.UNPACK_ROW_LENGTH,fi.width),ie.pixelStorei(ie.UNPACK_IMAGE_HEIGHT,fi.height),ie.pixelStorei(ie.UNPACK_SKIP_PIXELS,mn),ie.pixelStorei(ie.UNPACK_SKIP_ROWS,gn),ie.pixelStorei(ie.UNPACK_SKIP_IMAGES,on);const oi=k.isDataArrayTexture||k.isData3DTexture,Gi=fe.isDataArrayTexture||fe.isData3DTexture;if(k.isDepthTexture){const Wi=ut.get(k),Ci=ut.get(fe),Ui=ut.get(Wi.__renderTarget),ks=ut.get(Ci.__renderTarget);gt.bindFramebuffer(ie.READ_FRAMEBUFFER,Ui.__webglFramebuffer),gt.bindFramebuffer(ie.DRAW_FRAMEBUFFER,ks.__webglFramebuffer);for(let kr=0;kr<qt;kr++)oi&&(ie.framebufferTextureLayer(ie.READ_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ut.get(k).__webglTexture,me,on+kr),ie.framebufferTextureLayer(ie.DRAW_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ut.get(fe).__webglTexture,lt,gi+kr)),ie.blitFramebuffer(mn,gn,At,zt,Bn,kn,At,zt,ie.DEPTH_BUFFER_BIT,ie.NEAREST);gt.bindFramebuffer(ie.READ_FRAMEBUFFER,null),gt.bindFramebuffer(ie.DRAW_FRAMEBUFFER,null)}else if(me!==0||k.isRenderTargetTexture||ut.has(k)){const Wi=ut.get(k),Ci=ut.get(fe);gt.bindFramebuffer(ie.READ_FRAMEBUFFER,vc),gt.bindFramebuffer(ie.DRAW_FRAMEBUFFER,ho);for(let Ui=0;Ui<qt;Ui++)oi?ie.framebufferTextureLayer(ie.READ_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,Wi.__webglTexture,me,on+Ui):ie.framebufferTexture2D(ie.READ_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_2D,Wi.__webglTexture,me),Gi?ie.framebufferTextureLayer(ie.DRAW_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,Ci.__webglTexture,lt,gi+Ui):ie.framebufferTexture2D(ie.DRAW_FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_2D,Ci.__webglTexture,lt),me!==0?ie.blitFramebuffer(mn,gn,At,zt,Bn,kn,At,zt,ie.COLOR_BUFFER_BIT,ie.NEAREST):Gi?ie.copyTexSubImage3D(Si,lt,Bn,kn,gi+Ui,mn,gn,At,zt):ie.copyTexSubImage2D(Si,lt,Bn,kn,mn,gn,At,zt);gt.bindFramebuffer(ie.READ_FRAMEBUFFER,null),gt.bindFramebuffer(ie.DRAW_FRAMEBUFFER,null)}else Gi?k.isDataTexture||k.isData3DTexture?ie.texSubImage3D(Si,lt,Bn,kn,gi,At,zt,qt,zn,hn,fi.data):fe.isCompressedArrayTexture?ie.compressedTexSubImage3D(Si,lt,Bn,kn,gi,At,zt,qt,zn,fi.data):ie.texSubImage3D(Si,lt,Bn,kn,gi,At,zt,qt,zn,hn,fi):k.isDataTexture?ie.texSubImage2D(ie.TEXTURE_2D,lt,Bn,kn,At,zt,zn,hn,fi.data):k.isCompressedTexture?ie.compressedTexSubImage2D(ie.TEXTURE_2D,lt,Bn,kn,fi.width,fi.height,zn,fi.data):ie.texSubImage2D(ie.TEXTURE_2D,lt,Bn,kn,At,zt,zn,hn,fi);ie.pixelStorei(ie.UNPACK_ROW_LENGTH,Hn),ie.pixelStorei(ie.UNPACK_IMAGE_HEIGHT,Yi),ie.pixelStorei(ie.UNPACK_SKIP_PIXELS,Vr),ie.pixelStorei(ie.UNPACK_SKIP_ROWS,Vi),ie.pixelStorei(ie.UNPACK_SKIP_IMAGES,ss),lt===0&&fe.generateMipmaps&&ie.generateMipmap(Si),gt.unbindTexture()},this.copyTextureToTexture3D=function(k,fe,be=null,Te=null,me=0){return k.isTexture!==!0&&(rc("WebGLRenderer: copyTextureToTexture3D function signature has changed."),be=arguments[0]||null,Te=arguments[1]||null,k=arguments[2],fe=arguments[3],me=arguments[4]||0),rc('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(k,fe,be,Te,me)},this.initRenderTarget=function(k){ut.get(k).__webglFramebuffer===void 0&&X.setupRenderTarget(k)},this.initTexture=function(k){k.isCubeTexture?X.setTextureCube(k,0):k.isData3DTexture?X.setTexture3D(k,0):k.isDataArrayTexture||k.isCompressedArrayTexture?X.setTexture2DArray(k,0):X.setTexture2D(k,0),gt.unbindTexture()},this.resetState=function(){de=0,le=0,ve=null,gt.reset(),Zn.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Us}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(n){this._outputColorSpace=n;const s=this.getContext();s.drawingBufferColorspace=ni._getDrawingBufferColorSpace(n),s.unpackColorSpace=ni._getUnpackColorSpace()}}let gP=`
uniform vec3 uColor;
varying vec2 vUV;
uniform float timeanim;
float PI = 3.141;
// varying vec3 vPosition;

void main() {
  vec3 pos= position;
  vUV = (uv-vec2(0.5))*0.9 + vec2(0.5);
  pos.y += sin(PI*uv.x)*0.01;
  pos.z += sin(PI*uv.x)*0.02;
  pos.y += sin(timeanim*0.03)*0.02;
  vUV.y -= sin(timeanim*0.02)*0.02;
  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
}`,_P=`
uniform sampler2D textureimg;
varying vec2 vUV;
uniform float distancefromcent;
uniform float waveintensity;
uniform  float timeanim;
uniform float glitchIntensity;



void main() {
  vec2 uv = vUV;

  float wave1 = sin(uv.x * 10.0 + (timeanim) * 0.1 + 0.2 * 5.0) * waveintensity;
  float wave2 = sin(uv.y * 12.0 + (timeanim) * 0.5 + 0.2 * 4.0) * waveintensity;
  float wave3 = cos(uv.x * 8.0 + (timeanim) * 0.9+ 0.2 * 3.0) * waveintensity;
  float wave4 = cos(uv.y * 9.0 + (timeanim) * 0.9 + 0.2 * 3.5) * waveintensity;

  uv.y += wave1 + wave2;
  uv.x += wave3 + wave4;

  vec4 text = texture2D(textureimg,uv);
  float bw = (text.r + text.b + text.g )/3.;
  vec4 another = vec4(bw,bw,bw,1.);

  if (glitchIntensity > 0.0) {
    float segment = floor(uv.y * 12.0); 
    float randomValue = fract(sin(segment * 12345.6789 + glitchIntensity) * 43758.5453); 
    vec2 offset = vec2(randomValue * 0.03, 0.0) * glitchIntensity;

    vec4 redGlitch = texture2D(textureimg, uv + offset);
    vec4 greenGlitch = texture2D(textureimg, uv - offset);
    vec4 blueGlitch = texture2D(textureimg, uv);
    if (mod(segment, 3.0) == 0.0) {
      gl_FragColor = vec4(redGlitch.r, greenGlitch.g, text.b, 1.0);
      } else if (mod(segment, 3.0) == 1.0) {
          gl_FragColor = vec4(text.r, greenGlitch.g, blueGlitch.b, 1.0);
      } else {
          gl_FragColor = vec4(redGlitch.r, text.g, blueGlitch.b, 1.0);
      }
    } else {
    gl_FragColor = mix(another,text,distancefromcent);; 
   }  
 
  gl_FragColor.a = clamp(distancefromcent,0.4,2.);
}`,xP=`

 

 
 varying vec2 vUv;
 
 void main() {
   vUv = uv;
   vec3 pos= position;
  //  float wave  = sin(pos.y * 3);
  //  pos.z += wave ;
   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
 }
 
 `,vP=`
 uniform sampler2D textureSampler;
 uniform float glitchIntensity;
 varying vec2 vUv;
 
 void main() {
  
  vec2 uv = vUv;
  vec4 baseState = texture2D(textureSampler, uv);

  if (glitchIntensity > 0.0) {
    float segment = floor(uv.y * 12.0); 
    float randomValue = fract(sin(segment * 12345.6789 + glitchIntensity) * 43758.5453); 
    vec2 offset = vec2(randomValue * 0.03, 0.0) * glitchIntensity;

    vec4 redGlitch = texture2D(textureSampler, uv + offset);
    vec4 greenGlitch = texture2D(textureSampler, uv - offset);
    vec4 blueGlitch = texture2D(textureSampler, uv);

    if (mod(segment, 3.0) == 0.0) {
        gl_FragColor = vec4(redGlitch.r, greenGlitch.g, baseState.b, 1.0);
    } else if (mod(segment, 3.0) == 1.0) {
        gl_FragColor = vec4(baseState.r, greenGlitch.g, blueGlitch.b, 1.0);
    } else {
        gl_FragColor = vec4(redGlitch.r, baseState.g, blueGlitch.b, 1.0);
    }
} else {
    gl_FragColor = baseState; 
}


 }`,W0=`
// Varyings
varying vec2 vUv;

// Uniforms: Common
uniform float uOpacity;
uniform float uThreshold;
uniform float uAlphaTest;
uniform vec3 uColor;
uniform sampler2D uMap;

uniform bool ustroke;

// Uniforms: Strokes
uniform vec3 uStrokeColor;
uniform float uStrokeOutsetWidth;
uniform float uStrokeInsetWidth;

// Utils: Median
float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

void main() {
    // Common
    // Texture sample
    vec3 s = texture2D(uMap, vUv).rgb;

    // Signed distance
    float sigDist = median(s.r, s.g, s.b) - 0.5;

    float afwidth = 1.4142135623730951 / 2.0;

    #ifdef IS_SMALL
        float alpha = smoothstep(uThreshold - afwidth, uThreshold + afwidth, sigDist);
    #else
        float alpha = clamp(sigDist / fwidth(sigDist) + 0.5, 0.0, 1.0);
    #endif

    // Strokes
    // Outset
    float sigDistOutset = sigDist + uStrokeOutsetWidth * 0.5;

    // Inset
    float sigDistInset = sigDist - uStrokeInsetWidth * 0.5;

    #ifdef IS_SMALL
        float outset = smoothstep(uThreshold - afwidth, uThreshold + afwidth, sigDistOutset);
        float inset = 1.0 - smoothstep(uThreshold - afwidth, uThreshold + afwidth, sigDistInset);
    #else
        float outset = clamp(sigDistOutset / fwidth(sigDistOutset) + 0.5, 0.0, 1.0);
        float inset = 1.0 - clamp(sigDistInset / fwidth(sigDistInset) + 0.5, 0.0, 1.0);
    #endif

    // Border
    float border = outset * inset;

    // Alpha Test
    if (alpha < uAlphaTest) discard;

    vec4 strokedFragColor = vec4(uStrokeColor, uOpacity * border);
    vec4 filledFragColor = vec4(uColor, uOpacity * alpha);
    if (ustroke == true){
        
        gl_FragColor = strokedFragColor;

    }else{
       
        gl_FragColor = filledFragColor;
    }

    // Output: Common


    // Output: Strokes
    

   

   
}
`,X0=`
 uniform float uSpeed;
 mat4 rotationMatrix(vec3 axis, float angle) {
     axis = normalize(axis);
     float s = sin(angle);
     float c = cos(angle);
     float oc = 1.0 - c;
     
     return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                 oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                 oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                 0.0,                                0.0,                                0.0,                                1.0);
 }
 
 vec3 rotate(vec3 v, vec3 axis, float angle) {
     mat4 m = rotationMatrix(axis, angle);
     return (m * vec4(v, 1.0)).xyz;
 }
     // Attribute
     attribute vec2 layoutUv;

     attribute float lineIndex;

     attribute float lineLettersTotal;
     attribute float lineLetterIndex;

     attribute float lineWordsTotal;
     attribute float lineWordIndex;

     attribute float wordIndex;

     attribute float letterIndex;

     // Varyings
     varying vec2 vUv;
     varying vec2 vLayoutUv;
     varying vec3 vViewPosition;
     varying vec3 vNormal;

     varying float vLineIndex;

     varying float vLineLettersTotal;
     varying float vLineLetterIndex;

     varying float vLineWordsTotal;
     varying float vLineWordIndex;

     varying float vWordIndex;

     varying float vLetterIndex;

     void main() {
     
         // Varyings
         vUv = uv;
         vLayoutUv = layoutUv;
         
         vNormal = normal;

         vLineIndex = lineIndex;

         vLineLettersTotal = lineLettersTotal;
         vLineLetterIndex = lineLetterIndex;

         vLineWordsTotal = lineWordsTotal;
         vLineWordIndex = lineWordIndex;

         vWordIndex = wordIndex;

         vLetterIndex = letterIndex;

         // Output
         vec3 newpos = position;
         float xx = position.x*0.01;
         newpos = rotate(newpos,vec3(0.0,0.0,1.0),xx*uSpeed);

         vec4 mvPosition = vec4(newpos, 1.0);
         mvPosition = modelViewMatrix * mvPosition;
         gl_Position = projectionMatrix * mvPosition;
         
         vViewPosition = -mvPosition.xyz;
     }
 `;const yP=["roboto-regular.png"],MP=JSON.parse('[{"id":40,"index":12,"char":"(","width":25,"height":87,"xoffset":3,"yoffset":-2,"xadvance":27,"chnl":15,"x":0,"y":0,"page":0},{"id":41,"index":13,"char":")","width":25,"height":87,"xoffset":-1,"yoffset":-2,"xadvance":28,"chnl":15,"x":0,"y":88,"page":0},{"id":91,"index":63,"char":"[","width":19,"height":81,"xoffset":4,"yoffset":-3,"xadvance":21,"chnl":15,"x":0,"y":176,"page":0},{"id":93,"index":65,"char":"]","width":19,"height":81,"xoffset":-2,"yoffset":-3,"xadvance":21,"chnl":15,"x":0,"y":258,"page":0},{"id":123,"index":95,"char":"{","width":28,"height":81,"xoffset":1,"yoffset":0,"xadvance":27,"chnl":15,"x":0,"y":340,"page":0},{"id":125,"index":97,"char":"}","width":28,"height":81,"xoffset":-1,"yoffset":0,"xadvance":27,"chnl":15,"x":0,"y":422,"page":0},{"id":106,"index":78,"char":"j","width":20,"height":79,"xoffset":-5,"yoffset":4,"xadvance":19,"chnl":15,"x":20,"y":176,"page":0},{"id":36,"index":8,"char":"$","width":40,"height":78,"xoffset":2,"yoffset":-4,"xadvance":45,"chnl":15,"x":20,"y":256,"page":0},{"id":64,"index":36,"char":"@","width":67,"height":78,"xoffset":3,"yoffset":6,"xadvance":72,"chnl":15,"x":26,"y":0,"page":0},{"id":81,"index":53,"char":"Q","width":50,"height":71,"xoffset":2,"yoffset":4,"xadvance":55,"chnl":15,"x":26,"y":79,"page":0},{"id":87,"index":59,"char":"W","width":71,"height":61,"xoffset":0,"yoffset":5,"xadvance":71,"chnl":15,"x":41,"y":151,"page":0},{"id":124,"index":96,"char":"|","width":10,"height":71,"xoffset":5,"yoffset":5,"xadvance":19,"chnl":15,"x":77,"y":79,"page":0},{"id":92,"index":64,"char":"\\\\","width":35,"height":66,"xoffset":0,"yoffset":5,"xadvance":33,"chnl":15,"x":88,"y":79,"page":0},{"id":47,"index":19,"char":"/","width":34,"height":66,"xoffset":-1,"yoffset":5,"xadvance":33,"chnl":15,"x":94,"y":0,"page":0},{"id":162,"index":100,"char":"¢","width":40,"height":65,"xoffset":2,"yoffset":11,"xadvance":44,"chnl":15,"x":29,"y":335,"page":0},{"id":98,"index":70,"char":"b","width":40,"height":65,"xoffset":3,"yoffset":2,"xadvance":45,"chnl":15,"x":29,"y":401,"page":0},{"id":100,"index":72,"char":"d","width":40,"height":65,"xoffset":2,"yoffset":2,"xadvance":45,"chnl":15,"x":61,"y":213,"page":0},{"id":102,"index":74,"char":"f","width":30,"height":65,"xoffset":0,"yoffset":1,"xadvance":28,"chnl":15,"x":70,"y":279,"page":0},{"id":103,"index":75,"char":"g","width":40,"height":64,"xoffset":2,"yoffset":19,"xadvance":45,"chnl":15,"x":70,"y":345,"page":0},{"id":104,"index":76,"char":"h","width":37,"height":64,"xoffset":3,"yoffset":2,"xadvance":44,"chnl":15,"x":101,"y":279,"page":0},{"id":107,"index":79,"char":"k","width":39,"height":64,"xoffset":4,"yoffset":2,"xadvance":41,"chnl":15,"x":102,"y":213,"page":0},{"id":108,"index":80,"char":"l","width":11,"height":64,"xoffset":4,"yoffset":2,"xadvance":19,"chnl":15,"x":113,"y":146,"page":0},{"id":37,"index":9,"char":"%","width":55,"height":63,"xoffset":2,"yoffset":4,"xadvance":59,"chnl":15,"x":124,"y":67,"page":0},{"id":109,"index":81,"char":"m","width":63,"height":47,"xoffset":3,"yoffset":19,"xadvance":70,"chnl":15,"x":129,"y":0,"page":0},{"id":112,"index":84,"char":"p","width":40,"height":63,"xoffset":3,"yoffset":19,"xadvance":45,"chnl":15,"x":125,"y":131,"page":0},{"id":113,"index":85,"char":"q","width":40,"height":63,"xoffset":2,"yoffset":19,"xadvance":45,"chnl":15,"x":70,"y":410,"page":0},{"id":121,"index":93,"char":"y","width":40,"height":63,"xoffset":-1,"yoffset":20,"xadvance":38,"chnl":15,"x":111,"y":344,"page":0},{"id":163,"index":101,"char":"£","width":45,"height":62,"xoffset":2,"yoffset":4,"xadvance":46,"chnl":15,"x":139,"y":278,"page":0},{"id":38,"index":10,"char":"&","width":50,"height":62,"xoffset":2,"yoffset":4,"xadvance":50,"chnl":15,"x":142,"y":195,"page":0},{"id":48,"index":20,"char":"0","width":40,"height":62,"xoffset":2,"yoffset":4,"xadvance":45,"chnl":15,"x":166,"y":131,"page":0},{"id":50,"index":22,"char":"2","width":42,"height":62,"xoffset":2,"yoffset":4,"xadvance":45,"chnl":15,"x":180,"y":48,"page":0},{"id":51,"index":23,"char":"3","width":40,"height":62,"xoffset":2,"yoffset":4,"xadvance":45,"chnl":15,"x":111,"y":408,"page":0},{"id":53,"index":25,"char":"5","width":40,"height":62,"xoffset":4,"yoffset":5,"xadvance":45,"chnl":15,"x":152,"y":341,"page":0},{"id":54,"index":26,"char":"6","width":40,"height":62,"xoffset":3,"yoffset":5,"xadvance":45,"chnl":15,"x":185,"y":258,"page":0},{"id":56,"index":28,"char":"8","width":40,"height":62,"xoffset":2,"yoffset":4,"xadvance":45,"chnl":15,"x":193,"y":194,"page":0},{"id":57,"index":29,"char":"9","width":40,"height":62,"xoffset":2,"yoffset":4,"xadvance":45,"chnl":15,"x":207,"y":111,"page":0},{"id":63,"index":35,"char":"?","width":36,"height":62,"xoffset":1,"yoffset":4,"xadvance":38,"chnl":15,"x":152,"y":404,"page":0},{"id":67,"index":39,"char":"C","width":48,"height":62,"xoffset":3,"yoffset":4,"xadvance":52,"chnl":15,"x":189,"y":404,"page":0},{"id":71,"index":43,"char":"G","width":48,"height":62,"xoffset":3,"yoffset":4,"xadvance":54,"chnl":15,"x":193,"y":321,"page":0},{"id":74,"index":46,"char":"J","width":40,"height":62,"xoffset":0,"yoffset":5,"xadvance":44,"chnl":15,"x":226,"y":257,"page":0},{"id":79,"index":51,"char":"O","width":50,"height":62,"xoffset":3,"yoffset":4,"xadvance":55,"chnl":15,"x":234,"y":174,"page":0},{"id":83,"index":55,"char":"S","width":45,"height":62,"xoffset":1,"yoffset":4,"xadvance":47,"chnl":15,"x":223,"y":0,"page":0},{"id":85,"index":57,"char":"U","width":45,"height":62,"xoffset":3,"yoffset":5,"xadvance":52,"chnl":15,"x":248,"y":63,"page":0},{"id":105,"index":77,"char":"i","width":13,"height":62,"xoffset":4,"yoffset":4,"xadvance":19,"chnl":15,"x":269,"y":0,"page":0},{"id":165,"index":103,"char":"¥","width":45,"height":61,"xoffset":-1,"yoffset":5,"xadvance":42,"chnl":15,"x":283,"y":0,"page":0},{"id":161,"index":99,"char":"¡","width":13,"height":61,"xoffset":3,"yoffset":19,"xadvance":19,"chnl":15,"x":238,"y":384,"page":0},{"id":33,"index":5,"char":"!","width":13,"height":61,"xoffset":4,"yoffset":5,"xadvance":21,"chnl":15,"x":242,"y":320,"page":0},{"id":35,"index":7,"char":"#","width":48,"height":61,"xoffset":3,"yoffset":5,"xadvance":49,"chnl":15,"x":238,"y":446,"page":0},{"id":49,"index":21,"char":"1","width":26,"height":61,"xoffset":5,"yoffset":5,"xadvance":45,"chnl":15,"x":252,"y":382,"page":0},{"id":52,"index":24,"char":"4","width":45,"height":61,"xoffset":0,"yoffset":5,"xadvance":45,"chnl":15,"x":256,"y":320,"page":0},{"id":55,"index":27,"char":"7","width":42,"height":61,"xoffset":1,"yoffset":5,"xadvance":45,"chnl":15,"x":279,"y":382,"page":0},{"id":65,"index":37,"char":"A","width":54,"height":61,"xoffset":-1,"yoffset":5,"xadvance":52,"chnl":15,"x":287,"y":444,"page":0},{"id":66,"index":38,"char":"B","width":43,"height":61,"xoffset":5,"yoffset":5,"xadvance":50,"chnl":15,"x":267,"y":237,"page":0},{"id":68,"index":40,"char":"D","width":45,"height":61,"xoffset":5,"yoffset":5,"xadvance":52,"chnl":15,"x":302,"y":299,"page":0},{"id":69,"index":41,"char":"E","width":40,"height":61,"xoffset":5,"yoffset":5,"xadvance":45,"chnl":15,"x":322,"y":361,"page":0},{"id":70,"index":42,"char":"F","width":39,"height":61,"xoffset":5,"yoffset":5,"xadvance":44,"chnl":15,"x":342,"y":423,"page":0},{"id":72,"index":44,"char":"H","width":48,"height":61,"xoffset":5,"yoffset":5,"xadvance":57,"chnl":15,"x":285,"y":126,"page":0},{"id":73,"index":45,"char":"I","width":12,"height":61,"xoffset":5,"yoffset":5,"xadvance":22,"chnl":15,"x":294,"y":62,"page":0},{"id":75,"index":47,"char":"K","width":48,"height":61,"xoffset":5,"yoffset":5,"xadvance":50,"chnl":15,"x":307,"y":62,"page":0},{"id":76,"index":48,"char":"L","width":38,"height":61,"xoffset":5,"yoffset":5,"xadvance":43,"chnl":15,"x":329,"y":0,"page":0},{"id":77,"index":49,"char":"M","width":61,"height":61,"xoffset":5,"yoffset":5,"xadvance":70,"chnl":15,"x":311,"y":188,"page":0},{"id":78,"index":50,"char":"N","width":48,"height":61,"xoffset":5,"yoffset":5,"xadvance":57,"chnl":15,"x":334,"y":124,"page":0},{"id":80,"index":52,"char":"P","width":45,"height":61,"xoffset":5,"yoffset":5,"xadvance":50,"chnl":15,"x":356,"y":62,"page":0},{"id":82,"index":54,"char":"R","width":45,"height":61,"xoffset":5,"yoffset":5,"xadvance":49,"chnl":15,"x":368,"y":0,"page":0},{"id":84,"index":56,"char":"T","width":48,"height":61,"xoffset":0,"yoffset":5,"xadvance":48,"chnl":15,"x":348,"y":250,"page":0},{"id":86,"index":58,"char":"V","width":53,"height":61,"xoffset":-1,"yoffset":5,"xadvance":51,"chnl":15,"x":373,"y":186,"page":0},{"id":88,"index":60,"char":"X","width":50,"height":61,"xoffset":0,"yoffset":5,"xadvance":50,"chnl":15,"x":383,"y":124,"page":0},{"id":89,"index":61,"char":"Y","width":51,"height":61,"xoffset":-1,"yoffset":5,"xadvance":48,"chnl":15,"x":402,"y":62,"page":0},{"id":90,"index":62,"char":"Z","width":45,"height":61,"xoffset":1,"yoffset":5,"xadvance":48,"chnl":15,"x":414,"y":0,"page":0},{"id":119,"index":91,"char":"w","width":61,"height":46,"xoffset":0,"yoffset":20,"xadvance":60,"chnl":15,"x":348,"y":312,"page":0},{"id":59,"index":31,"char":";","width":16,"height":58,"xoffset":0,"yoffset":19,"xadvance":17,"chnl":15,"x":363,"y":359,"page":0},{"id":116,"index":88,"char":"t","width":27,"height":57,"xoffset":-2,"yoffset":10,"xadvance":26,"chnl":15,"x":397,"y":248,"page":0},{"id":164,"index":102,"char":"¤","width":53,"height":54,"xoffset":2,"yoffset":13,"xadvance":57,"chnl":15,"x":454,"y":62,"page":0},{"id":97,"index":69,"char":"a","width":39,"height":48,"xoffset":2,"yoffset":19,"xadvance":44,"chnl":15,"x":460,"y":0,"page":0},{"id":99,"index":71,"char":"c","width":40,"height":48,"xoffset":2,"yoffset":19,"xadvance":42,"chnl":15,"x":380,"y":359,"page":0},{"id":101,"index":73,"char":"e","width":40,"height":48,"xoffset":2,"yoffset":19,"xadvance":42,"chnl":15,"x":410,"y":306,"page":0},{"id":111,"index":83,"char":"o","width":42,"height":48,"xoffset":2,"yoffset":19,"xadvance":46,"chnl":15,"x":425,"y":248,"page":0},{"id":115,"index":87,"char":"s","width":38,"height":48,"xoffset":2,"yoffset":19,"xadvance":41,"chnl":15,"x":468,"y":117,"page":0},{"id":126,"index":98,"char":"~","width":48,"height":20,"xoffset":3,"yoffset":31,"xadvance":54,"chnl":15,"x":342,"y":485,"page":0},{"id":58,"index":30,"char":":","width":13,"height":47,"xoffset":3,"yoffset":19,"xadvance":19,"chnl":15,"x":193,"y":0,"page":0},{"id":110,"index":82,"char":"n","width":37,"height":47,"xoffset":3,"yoffset":19,"xadvance":44,"chnl":15,"x":468,"y":166,"page":0},{"id":114,"index":86,"char":"r","width":24,"height":47,"xoffset":3,"yoffset":19,"xadvance":27,"chnl":15,"x":223,"y":63,"page":0},{"id":117,"index":89,"char":"u","width":37,"height":47,"xoffset":3,"yoffset":20,"xadvance":44,"chnl":15,"x":427,"y":186,"page":0},{"id":118,"index":90,"char":"v","width":40,"height":46,"xoffset":-1,"yoffset":20,"xadvance":39,"chnl":15,"x":468,"y":214,"page":0},{"id":120,"index":92,"char":"x","width":40,"height":46,"xoffset":0,"yoffset":20,"xadvance":40,"chnl":15,"x":468,"y":261,"page":0},{"id":122,"index":94,"char":"z","width":38,"height":46,"xoffset":1,"yoffset":20,"xadvance":40,"chnl":15,"x":451,"y":308,"page":0},{"id":43,"index":15,"char":"+","width":43,"height":45,"xoffset":1,"yoffset":15,"xadvance":45,"chnl":15,"x":152,"y":467,"page":0},{"id":95,"index":67,"char":"_","width":40,"height":10,"xoffset":-2,"yoffset":62,"xadvance":36,"chnl":15,"x":29,"y":467,"page":0},{"id":60,"index":32,"char":"<","width":36,"height":39,"xoffset":1,"yoffset":19,"xadvance":41,"chnl":15,"x":248,"y":126,"page":0},{"id":62,"index":34,"char":">","width":37,"height":39,"xoffset":3,"yoffset":19,"xadvance":42,"chnl":15,"x":111,"y":471,"page":0},{"id":42,"index":14,"char":"*","width":36,"height":37,"xoffset":-1,"yoffset":5,"xadvance":34,"chnl":15,"x":311,"y":250,"page":0},{"id":61,"index":33,"char":"=","width":37,"height":27,"xoffset":4,"yoffset":24,"xadvance":44,"chnl":15,"x":70,"y":474,"page":0},{"id":171,"index":109,"char":"«","width":34,"height":35,"xoffset":2,"yoffset":25,"xadvance":38,"chnl":15,"x":196,"y":467,"page":0},{"id":94,"index":66,"char":"^","width":32,"height":32,"xoffset":1,"yoffset":5,"xadvance":33,"chnl":15,"x":434,"y":124,"page":0},{"id":44,"index":16,"char":",","width":15,"height":24,"xoffset":-1,"yoffset":53,"xadvance":16,"chnl":15,"x":207,"y":0,"page":0},{"id":34,"index":6,"char":"\\"","width":20,"height":23,"xoffset":3,"yoffset":2,"xadvance":26,"chnl":15,"x":490,"y":308,"page":0},{"id":39,"index":11,"char":"\'","width":10,"height":23,"xoffset":2,"yoffset":2,"xadvance":14,"chnl":15,"x":26,"y":151,"page":0},{"id":45,"index":17,"char":"-","width":23,"height":10,"xoffset":-1,"yoffset":35,"xadvance":22,"chnl":15,"x":311,"y":288,"page":0},{"id":96,"index":68,"char":"`","width":20,"height":15,"xoffset":0,"yoffset":2,"xadvance":25,"chnl":15,"x":490,"y":332,"page":0},{"id":46,"index":18,"char":".","width":13,"height":13,"xoffset":4,"yoffset":54,"xadvance":21,"chnl":15,"x":427,"y":234,"page":0},{"id":32,"index":4,"char":" ","width":0,"height":0,"xoffset":-2,"yoffset":62,"xadvance":20,"chnl":15,"x":124,"y":131,"page":0}]'),SP={face:"Roboto-Regular",size:80,bold:0,italic:0,charset:["«","¢","£","¤","¥","¡","!","\\",'"',"#","$","%","&","'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~"," "],unicode:1,stretchH:100,smooth:1,aa:1,padding:[2,2,2,2],spacing:[0,0]},EP={lineHeight:84,base:62,scaleW:512,scaleH:512,pages:1,packed:0,alphaChnl:0,redChnl:0,greenChnl:0,blueChnl:0},bP={fieldType:"msdf",distanceRange:4},TP=JSON.parse('[{"first":34,"second":34,"amount":-4},{"first":34,"second":39,"amount":-4},{"first":34,"second":65,"amount":-5},{"first":34,"second":97,"amount":-2},{"first":34,"second":99,"amount":-2},{"first":34,"second":100,"amount":-2},{"first":34,"second":101,"amount":-2},{"first":34,"second":103,"amount":-2},{"first":34,"second":109,"amount":-1},{"first":34,"second":110,"amount":-1},{"first":34,"second":111,"amount":-2},{"first":34,"second":112,"amount":-1},{"first":34,"second":113,"amount":-2},{"first":34,"second":115,"amount":-3},{"first":34,"second":119,"amount":0},{"first":39,"second":34,"amount":-4},{"first":39,"second":39,"amount":-4},{"first":39,"second":65,"amount":-5},{"first":39,"second":97,"amount":-2},{"first":39,"second":99,"amount":-2},{"first":39,"second":100,"amount":-2},{"first":39,"second":101,"amount":-2},{"first":39,"second":103,"amount":-2},{"first":39,"second":109,"amount":-1},{"first":39,"second":110,"amount":-1},{"first":39,"second":111,"amount":-2},{"first":39,"second":112,"amount":-1},{"first":39,"second":113,"amount":-2},{"first":39,"second":115,"amount":-3},{"first":39,"second":119,"amount":0},{"first":40,"second":86,"amount":1},{"first":40,"second":87,"amount":1},{"first":40,"second":89,"amount":1},{"first":44,"second":34,"amount":-7},{"first":44,"second":39,"amount":-7},{"first":46,"second":34,"amount":-7},{"first":46,"second":39,"amount":-7},{"first":47,"second":47,"amount":-9},{"first":65,"second":34,"amount":-5},{"first":65,"second":39,"amount":-5},{"first":65,"second":63,"amount":-2},{"first":65,"second":67,"amount":0},{"first":65,"second":71,"amount":0},{"first":65,"second":79,"amount":0},{"first":65,"second":81,"amount":0},{"first":65,"second":84,"amount":-5},{"first":65,"second":85,"amount":-1},{"first":65,"second":86,"amount":-3},{"first":65,"second":87,"amount":-3},{"first":65,"second":89,"amount":-4},{"first":65,"second":111,"amount":0},{"first":65,"second":116,"amount":-1},{"first":65,"second":117,"amount":0},{"first":65,"second":118,"amount":-2},{"first":65,"second":119,"amount":-1},{"first":65,"second":121,"amount":-2},{"first":65,"second":122,"amount":0},{"first":66,"second":84,"amount":-1},{"first":66,"second":86,"amount":-1},{"first":66,"second":89,"amount":-2},{"first":67,"second":41,"amount":-1},{"first":67,"second":84,"amount":-1},{"first":67,"second":93,"amount":0},{"first":67,"second":125,"amount":-1},{"first":68,"second":44,"amount":-4},{"first":68,"second":46,"amount":-4},{"first":68,"second":65,"amount":-1},{"first":68,"second":84,"amount":-1},{"first":68,"second":86,"amount":-1},{"first":68,"second":88,"amount":-1},{"first":68,"second":89,"amount":-2},{"first":68,"second":90,"amount":-1},{"first":69,"second":84,"amount":1},{"first":69,"second":99,"amount":-1},{"first":69,"second":100,"amount":-1},{"first":69,"second":101,"amount":-1},{"first":69,"second":102,"amount":-1},{"first":69,"second":103,"amount":-1},{"first":69,"second":111,"amount":-1},{"first":69,"second":113,"amount":-1},{"first":69,"second":117,"amount":-1},{"first":69,"second":118,"amount":-1},{"first":69,"second":119,"amount":-1},{"first":69,"second":121,"amount":-1},{"first":70,"second":44,"amount":-9},{"first":70,"second":46,"amount":-9},{"first":70,"second":65,"amount":-7},{"first":70,"second":74,"amount":-10},{"first":70,"second":84,"amount":1},{"first":70,"second":97,"amount":-1},{"first":70,"second":99,"amount":-1},{"first":70,"second":100,"amount":-1},{"first":70,"second":101,"amount":-1},{"first":70,"second":103,"amount":-1},{"first":70,"second":111,"amount":-1},{"first":70,"second":113,"amount":-1},{"first":70,"second":114,"amount":-1},{"first":70,"second":117,"amount":-1},{"first":70,"second":118,"amount":-1},{"first":70,"second":121,"amount":-1},{"first":72,"second":65,"amount":1},{"first":72,"second":84,"amount":-1},{"first":72,"second":88,"amount":1},{"first":72,"second":89,"amount":-1},{"first":73,"second":65,"amount":1},{"first":73,"second":84,"amount":-1},{"first":73,"second":88,"amount":1},{"first":73,"second":89,"amount":-1},{"first":74,"second":65,"amount":-1},{"first":75,"second":45,"amount":-2},{"first":75,"second":67,"amount":-1},{"first":75,"second":71,"amount":-1},{"first":75,"second":79,"amount":-1},{"first":75,"second":81,"amount":-1},{"first":75,"second":99,"amount":-1},{"first":75,"second":100,"amount":-1},{"first":75,"second":101,"amount":-1},{"first":75,"second":103,"amount":-1},{"first":75,"second":109,"amount":-1},{"first":75,"second":110,"amount":-1},{"first":75,"second":111,"amount":-1},{"first":75,"second":112,"amount":-1},{"first":75,"second":113,"amount":-1},{"first":75,"second":117,"amount":-1},{"first":75,"second":118,"amount":-2},{"first":75,"second":119,"amount":-2},{"first":75,"second":121,"amount":-2},{"first":76,"second":34,"amount":-13},{"first":76,"second":39,"amount":-13},{"first":76,"second":65,"amount":1},{"first":76,"second":67,"amount":-3},{"first":76,"second":71,"amount":-3},{"first":76,"second":79,"amount":-3},{"first":76,"second":81,"amount":-3},{"first":76,"second":84,"amount":-11},{"first":76,"second":85,"amount":-2},{"first":76,"second":86,"amount":-7},{"first":76,"second":87,"amount":-6},{"first":76,"second":89,"amount":-9},{"first":76,"second":117,"amount":-2},{"first":76,"second":118,"amount":-5},{"first":76,"second":119,"amount":-4},{"first":76,"second":121,"amount":-5},{"first":77,"second":65,"amount":1},{"first":77,"second":84,"amount":-1},{"first":77,"second":88,"amount":1},{"first":77,"second":89,"amount":-1},{"first":78,"second":65,"amount":1},{"first":78,"second":84,"amount":-1},{"first":78,"second":88,"amount":1},{"first":78,"second":89,"amount":-1},{"first":79,"second":44,"amount":-4},{"first":79,"second":46,"amount":-4},{"first":79,"second":65,"amount":-1},{"first":79,"second":84,"amount":-1},{"first":79,"second":86,"amount":-1},{"first":79,"second":88,"amount":-1},{"first":79,"second":89,"amount":-2},{"first":79,"second":90,"amount":-1},{"first":80,"second":44,"amount":-13},{"first":80,"second":46,"amount":-13},{"first":80,"second":65,"amount":-5},{"first":80,"second":74,"amount":-8},{"first":80,"second":88,"amount":-1},{"first":80,"second":90,"amount":-1},{"first":80,"second":97,"amount":0},{"first":80,"second":99,"amount":-1},{"first":80,"second":100,"amount":-1},{"first":80,"second":101,"amount":-1},{"first":80,"second":103,"amount":-1},{"first":80,"second":111,"amount":-1},{"first":80,"second":113,"amount":-1},{"first":80,"second":116,"amount":1},{"first":80,"second":118,"amount":1},{"first":80,"second":121,"amount":1},{"first":81,"second":84,"amount":-2},{"first":81,"second":86,"amount":-1},{"first":81,"second":87,"amount":-1},{"first":81,"second":89,"amount":-1},{"first":82,"second":84,"amount":-3},{"first":82,"second":86,"amount":-1},{"first":82,"second":89,"amount":-2},{"first":84,"second":171,"amount":-13},{"first":84,"second":44,"amount":-9},{"first":84,"second":45,"amount":-9},{"first":84,"second":46,"amount":-9},{"first":84,"second":65,"amount":-3},{"first":84,"second":67,"amount":-1},{"first":84,"second":71,"amount":-1},{"first":84,"second":74,"amount":-9},{"first":84,"second":79,"amount":-1},{"first":84,"second":81,"amount":-1},{"first":84,"second":83,"amount":-1},{"first":84,"second":84,"amount":1},{"first":84,"second":86,"amount":1},{"first":84,"second":87,"amount":1},{"first":84,"second":89,"amount":1},{"first":84,"second":97,"amount":-4},{"first":84,"second":99,"amount":-4},{"first":84,"second":100,"amount":-4},{"first":84,"second":101,"amount":-4},{"first":84,"second":103,"amount":-4},{"first":84,"second":109,"amount":-4},{"first":84,"second":110,"amount":-4},{"first":84,"second":111,"amount":-4},{"first":84,"second":112,"amount":-4},{"first":84,"second":113,"amount":-4},{"first":84,"second":114,"amount":-3},{"first":84,"second":115,"amount":-5},{"first":84,"second":117,"amount":-4},{"first":84,"second":118,"amount":-3},{"first":84,"second":119,"amount":-2},{"first":84,"second":120,"amount":-3},{"first":84,"second":121,"amount":-3},{"first":84,"second":122,"amount":-2},{"first":84,"second":32,"amount":-2},{"first":85,"second":65,"amount":-1},{"first":86,"second":41,"amount":1},{"first":86,"second":44,"amount":-9},{"first":86,"second":45,"amount":-1},{"first":86,"second":46,"amount":-9},{"first":86,"second":65,"amount":-3},{"first":86,"second":67,"amount":-1},{"first":86,"second":71,"amount":-1},{"first":86,"second":79,"amount":-1},{"first":86,"second":81,"amount":-1},{"first":86,"second":93,"amount":1},{"first":86,"second":97,"amount":-2},{"first":86,"second":99,"amount":-2},{"first":86,"second":100,"amount":-2},{"first":86,"second":101,"amount":-2},{"first":86,"second":103,"amount":-2},{"first":86,"second":111,"amount":-2},{"first":86,"second":113,"amount":-2},{"first":86,"second":114,"amount":-1},{"first":86,"second":117,"amount":-1},{"first":86,"second":118,"amount":0},{"first":86,"second":121,"amount":0},{"first":86,"second":125,"amount":1},{"first":87,"second":41,"amount":1},{"first":87,"second":44,"amount":-5},{"first":87,"second":45,"amount":-2},{"first":87,"second":46,"amount":-5},{"first":87,"second":65,"amount":-2},{"first":87,"second":84,"amount":1},{"first":87,"second":93,"amount":0},{"first":87,"second":97,"amount":-1},{"first":87,"second":99,"amount":-1},{"first":87,"second":100,"amount":-1},{"first":87,"second":101,"amount":-1},{"first":87,"second":103,"amount":-1},{"first":87,"second":111,"amount":-1},{"first":87,"second":113,"amount":-1},{"first":87,"second":114,"amount":-1},{"first":87,"second":117,"amount":-1},{"first":87,"second":125,"amount":1},{"first":88,"second":45,"amount":-2},{"first":88,"second":67,"amount":-1},{"first":88,"second":71,"amount":-1},{"first":88,"second":79,"amount":-1},{"first":88,"second":81,"amount":-1},{"first":88,"second":86,"amount":1},{"first":88,"second":99,"amount":-1},{"first":88,"second":100,"amount":-1},{"first":88,"second":101,"amount":-1},{"first":88,"second":103,"amount":-1},{"first":88,"second":111,"amount":-1},{"first":88,"second":113,"amount":-1},{"first":88,"second":117,"amount":-1},{"first":88,"second":118,"amount":-1},{"first":88,"second":121,"amount":-1},{"first":89,"second":171,"amount":-3},{"first":89,"second":38,"amount":-1},{"first":89,"second":41,"amount":1},{"first":89,"second":42,"amount":-2},{"first":89,"second":44,"amount":-8},{"first":89,"second":45,"amount":-2},{"first":89,"second":46,"amount":-8},{"first":89,"second":65,"amount":-4},{"first":89,"second":67,"amount":-1},{"first":89,"second":71,"amount":-1},{"first":89,"second":74,"amount":-4},{"first":89,"second":79,"amount":-1},{"first":89,"second":81,"amount":-1},{"first":89,"second":83,"amount":-1},{"first":89,"second":84,"amount":1},{"first":89,"second":85,"amount":-4},{"first":89,"second":86,"amount":1},{"first":89,"second":87,"amount":1},{"first":89,"second":88,"amount":1},{"first":89,"second":89,"amount":1},{"first":89,"second":93,"amount":1},{"first":89,"second":97,"amount":-3},{"first":89,"second":99,"amount":-3},{"first":89,"second":100,"amount":-3},{"first":89,"second":101,"amount":-3},{"first":89,"second":102,"amount":-1},{"first":89,"second":103,"amount":-3},{"first":89,"second":109,"amount":-2},{"first":89,"second":110,"amount":-2},{"first":89,"second":111,"amount":-3},{"first":89,"second":112,"amount":-2},{"first":89,"second":113,"amount":-3},{"first":89,"second":114,"amount":-2},{"first":89,"second":115,"amount":-2},{"first":89,"second":116,"amount":-1},{"first":89,"second":117,"amount":-2},{"first":89,"second":118,"amount":-1},{"first":89,"second":120,"amount":-1},{"first":89,"second":121,"amount":-1},{"first":89,"second":122,"amount":-1},{"first":89,"second":125,"amount":1},{"first":90,"second":65,"amount":1},{"first":90,"second":67,"amount":-1},{"first":90,"second":71,"amount":-1},{"first":90,"second":79,"amount":-1},{"first":90,"second":81,"amount":-1},{"first":90,"second":99,"amount":-1},{"first":90,"second":100,"amount":-1},{"first":90,"second":101,"amount":-1},{"first":90,"second":103,"amount":-1},{"first":90,"second":111,"amount":-1},{"first":90,"second":113,"amount":-1},{"first":90,"second":117,"amount":-1},{"first":90,"second":118,"amount":-1},{"first":90,"second":119,"amount":-1},{"first":90,"second":121,"amount":-1},{"first":91,"second":74,"amount":-1},{"first":91,"second":85,"amount":-1},{"first":97,"second":34,"amount":-3},{"first":97,"second":39,"amount":-3},{"first":97,"second":118,"amount":-1},{"first":97,"second":121,"amount":-1},{"first":98,"second":34,"amount":-1},{"first":98,"second":39,"amount":-1},{"first":98,"second":118,"amount":0},{"first":98,"second":120,"amount":-1},{"first":98,"second":121,"amount":0},{"first":98,"second":122,"amount":-1},{"first":99,"second":34,"amount":0},{"first":99,"second":39,"amount":0},{"first":101,"second":34,"amount":-1},{"first":101,"second":39,"amount":-1},{"first":101,"second":118,"amount":-1},{"first":101,"second":121,"amount":-1},{"first":102,"second":34,"amount":1},{"first":102,"second":39,"amount":1},{"first":102,"second":41,"amount":1},{"first":102,"second":93,"amount":1},{"first":102,"second":99,"amount":-1},{"first":102,"second":100,"amount":-1},{"first":102,"second":101,"amount":-1},{"first":102,"second":103,"amount":-1},{"first":102,"second":113,"amount":-1},{"first":102,"second":125,"amount":1},{"first":104,"second":34,"amount":-4},{"first":104,"second":39,"amount":-4},{"first":107,"second":99,"amount":-1},{"first":107,"second":100,"amount":-1},{"first":107,"second":101,"amount":-1},{"first":107,"second":103,"amount":-1},{"first":107,"second":113,"amount":-1},{"first":109,"second":34,"amount":-4},{"first":109,"second":39,"amount":-4},{"first":110,"second":34,"amount":-4},{"first":110,"second":39,"amount":-4},{"first":111,"second":34,"amount":-5},{"first":111,"second":39,"amount":-5},{"first":111,"second":118,"amount":-1},{"first":111,"second":120,"amount":-1},{"first":111,"second":121,"amount":-1},{"first":111,"second":122,"amount":-1},{"first":112,"second":34,"amount":-1},{"first":112,"second":39,"amount":-1},{"first":112,"second":118,"amount":0},{"first":112,"second":120,"amount":-1},{"first":112,"second":121,"amount":0},{"first":112,"second":122,"amount":-1},{"first":114,"second":34,"amount":1},{"first":114,"second":39,"amount":1},{"first":114,"second":44,"amount":-5},{"first":114,"second":46,"amount":-5},{"first":114,"second":97,"amount":-2},{"first":114,"second":99,"amount":-1},{"first":114,"second":100,"amount":-1},{"first":114,"second":101,"amount":-1},{"first":114,"second":102,"amount":1},{"first":114,"second":103,"amount":-1},{"first":114,"second":111,"amount":-1},{"first":114,"second":113,"amount":-1},{"first":114,"second":116,"amount":2},{"first":114,"second":118,"amount":1},{"first":114,"second":119,"amount":1},{"first":114,"second":121,"amount":1},{"first":116,"second":111,"amount":-1},{"first":118,"second":34,"amount":1},{"first":118,"second":39,"amount":1},{"first":118,"second":44,"amount":-4},{"first":118,"second":46,"amount":-4},{"first":118,"second":97,"amount":-1},{"first":118,"second":99,"amount":-1},{"first":118,"second":100,"amount":-1},{"first":118,"second":101,"amount":-1},{"first":118,"second":102,"amount":1},{"first":118,"second":103,"amount":-1},{"first":118,"second":111,"amount":-1},{"first":118,"second":113,"amount":-1},{"first":119,"second":44,"amount":-5},{"first":119,"second":46,"amount":-5},{"first":120,"second":99,"amount":-1},{"first":120,"second":100,"amount":-1},{"first":120,"second":101,"amount":-1},{"first":120,"second":103,"amount":-1},{"first":120,"second":111,"amount":-1},{"first":120,"second":113,"amount":-1},{"first":121,"second":34,"amount":1},{"first":121,"second":39,"amount":1},{"first":121,"second":44,"amount":-4},{"first":121,"second":46,"amount":-4},{"first":121,"second":97,"amount":-1},{"first":121,"second":99,"amount":-1},{"first":121,"second":100,"amount":-1},{"first":121,"second":101,"amount":-1},{"first":121,"second":102,"amount":1},{"first":121,"second":103,"amount":-1},{"first":121,"second":111,"amount":-1},{"first":121,"second":113,"amount":-1},{"first":122,"second":99,"amount":-1},{"first":122,"second":100,"amount":-1},{"first":122,"second":101,"amount":-1},{"first":122,"second":103,"amount":-1},{"first":122,"second":111,"amount":-1},{"first":122,"second":113,"amount":-1},{"first":123,"second":74,"amount":-1},{"first":123,"second":85,"amount":-1},{"first":32,"second":84,"amount":-2}]'),AP={pages:yP,chars:MP,info:SP,common:EP,distanceField:bP,kernings:TP},wP="/assets/roboto-regular-UGOCllx3.png";var dl={exports:{}},L={};/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */var q0;function CP(){if(q0)return L;q0=1;const u="171",n={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},s={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},l=0,d=1,m=2,v=3,M=0,T=1,A=2,C=3,P=0,I=1,F=2,W=0,Y=1,U=2,R=3,oe=4,se=5,ee=100,xe=101,de=102,le=103,ve=104,K=200,q=201,he=202,Ne=203,Ie=204,Je=205,Qe=206,Ze=207,rt=208,Oe=209,wt=210,kt=211,an=212,Cn=213,ei=214,Ge=0,pt=1,Kt=2,ce=3,ye=4,Ee=5,Ue=6,ot=7,ht=0,Qt=1,ie=2,Dt=0,bt=1,Tt=2,gt=3,ln=4,ut=5,X=6,B=7,ue="attached",Le="detached",we=300,Pe=301,yt=302,We=303,ct=304,je=306,ze=1e3,it=1001,Ct=1002,Nt=1003,Rt=1004,On=1004,pn=1005,Zn=1005,ae=1006,_t=1007,Fe=1007,Xe=1008,Bt=1008,St=1009,Mn=1010,pi=1011,vi=1012,Wn=1013,wi=1014,_i=1015,fs=1016,da=1017,Pr=1018,zr=1020,ao=35902,oo=1021,zs=1022,zi=1023,Vs=1024,co=1025,rs=1026,ps=1027,lo=1028,fa=1029,vc=1030,ho=1031,k=1032,fe=1033,be=33776,Te=33777,me=33778,lt=33779,At=35840,zt=35841,qt=35842,mn=35843,gn=36196,on=37492,Bn=37496,kn=37808,gi=37809,fi=37810,zn=37811,hn=37812,Si=37813,Hn=37814,Yi=37815,Vr=37816,Vi=37817,ss=37818,oi=37819,Gi=37820,Wi=37821,Ci=36492,Ui=36494,ks=36495,kr=36283,yl=36284,Ml=36285,Sl=36286,Fp=2200,Op=2201,Bp=2202,yc=2300,El=2301,bl=2302,pa=2400,ma=2401,Mc=2402,Tl=2500,Cu=2501,Cx=0,Rx=1,Px=2,zp=3200,Vp=3201,Ix=3202,Lx=3203,Hs=0,kp=1,ms="",ur="srgb",ga="srgb-linear",Sc="linear",ci="srgb",Dx=0,_a=7680,Ux=7681,Nx=7682,Fx=7683,Ox=34055,Bx=34056,zx=5386,Vx=512,kx=513,Hx=514,Gx=515,Wx=516,Xx=517,qx=518,Ru=519,Hp=512,Gp=513,Wp=514,Pu=515,Xp=516,qp=517,Yp=518,Zp=519,Ec=35044,Yx=35048,Zx=35040,$x=35045,Kx=35049,Jx=35041,jx=35046,Qx=35050,ev=35042,tv="100",Iu="300 es",as=2e3,bc=2001;class os{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[e]===void 0&&(i[e]=[]),i[e].indexOf(t)===-1&&i[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const i=this._listeners;return i[e]!==void 0&&i[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const r=this._listeners[e];if(r!==void 0){const a=r.indexOf(t);a!==-1&&r.splice(a,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const i=this._listeners[e.type];if(i!==void 0){e.target=this;const r=i.slice(0);for(let a=0,c=r.length;a<c;a++)r[a].call(this,e);e.target=null}}}const Zi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let $p=1234567;const xa=Math.PI/180,uo=180/Math.PI;function Mr(){const o=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Zi[o&255]+Zi[o>>8&255]+Zi[o>>16&255]+Zi[o>>24&255]+"-"+Zi[e&255]+Zi[e>>8&255]+"-"+Zi[e>>16&15|64]+Zi[e>>24&255]+"-"+Zi[t&63|128]+Zi[t>>8&255]+"-"+Zi[t>>16&255]+Zi[t>>24&255]+Zi[i&255]+Zi[i>>8&255]+Zi[i>>16&255]+Zi[i>>24&255]).toLowerCase()}function bn(o,e,t){return Math.max(e,Math.min(t,o))}function Lu(o,e){return(o%e+e)%e}function nv(o,e,t,i,r){return i+(o-e)*(r-i)/(t-e)}function iv(o,e,t){return o!==e?(t-o)/(e-o):0}function Tc(o,e,t){return(1-t)*o+t*e}function rv(o,e,t,i){return Tc(o,e,1-Math.exp(-t*i))}function sv(o,e=1){return e-Math.abs(Lu(o,e*2)-e)}function av(o,e,t){return o<=e?0:o>=t?1:(o=(o-e)/(t-e),o*o*(3-2*o))}function ov(o,e,t){return o<=e?0:o>=t?1:(o=(o-e)/(t-e),o*o*o*(o*(o*6-15)+10))}function cv(o,e){return o+Math.floor(Math.random()*(e-o+1))}function lv(o,e){return o+Math.random()*(e-o)}function hv(o){return o*(.5-Math.random())}function uv(o){o!==void 0&&($p=o);let e=$p+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function dv(o){return o*xa}function fv(o){return o*uo}function pv(o){return(o&o-1)===0&&o!==0}function mv(o){return Math.pow(2,Math.ceil(Math.log(o)/Math.LN2))}function gv(o){return Math.pow(2,Math.floor(Math.log(o)/Math.LN2))}function _v(o,e,t,i,r){const a=Math.cos,c=Math.sin,h=a(t/2),f=c(t/2),p=a((e+i)/2),g=c((e+i)/2),_=a((e-i)/2),x=c((e-i)/2),y=a((i-e)/2),E=c((i-e)/2);switch(r){case"XYX":o.set(h*g,f*_,f*x,h*p);break;case"YZY":o.set(f*x,h*g,f*_,h*p);break;case"ZXZ":o.set(f*_,f*x,h*g,h*p);break;case"XZX":o.set(h*g,f*E,f*y,h*p);break;case"YXY":o.set(f*y,h*g,f*E,h*p);break;case"ZYZ":o.set(f*E,f*y,h*g,h*p);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}function rr(o,e){switch(e.constructor){case Float32Array:return o;case Uint32Array:return o/4294967295;case Uint16Array:return o/65535;case Uint8Array:return o/255;case Int32Array:return Math.max(o/2147483647,-1);case Int16Array:return Math.max(o/32767,-1);case Int8Array:return Math.max(o/127,-1);default:throw new Error("Invalid component type.")}}function Rn(o,e){switch(e.constructor){case Float32Array:return o;case Uint32Array:return Math.round(o*4294967295);case Uint16Array:return Math.round(o*65535);case Uint8Array:return Math.round(o*255);case Int32Array:return Math.round(o*2147483647);case Int16Array:return Math.round(o*32767);case Int8Array:return Math.round(o*127);default:throw new Error("Invalid component type.")}}const xv={DEG2RAD:xa,RAD2DEG:uo,generateUUID:Mr,clamp:bn,euclideanModulo:Lu,mapLinear:nv,inverseLerp:iv,lerp:Tc,damp:rv,pingpong:sv,smoothstep:av,smootherstep:ov,randInt:cv,randFloat:lv,randFloatSpread:hv,seededRandom:uv,degToRad:dv,radToDeg:fv,isPowerOfTwo:pv,ceilPowerOfTwo:mv,floorPowerOfTwo:gv,setQuaternionFromProperEuler:_v,normalize:Rn,denormalize:rr};class et{constructor(e=0,t=0){et.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,i=this.y,r=e.elements;return this.x=r[0]*t+r[3]*i+r[6],this.y=r[1]*t+r[4]*i+r[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=bn(this.x,e.x,t.x),this.y=bn(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=bn(this.x,e,t),this.y=bn(this.y,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(bn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(bn(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y;return t*t+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const i=Math.cos(t),r=Math.sin(t),a=this.x-e.x,c=this.y-e.y;return this.x=a*i-c*r+e.x,this.y=a*r+c*i+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class wn{constructor(e,t,i,r,a,c,h,f,p){wn.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,i,r,a,c,h,f,p)}set(e,t,i,r,a,c,h,f,p){const g=this.elements;return g[0]=e,g[1]=r,g[2]=h,g[3]=t,g[4]=a,g[5]=f,g[6]=i,g[7]=c,g[8]=p,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this}extractBasis(e,t,i){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,r=t.elements,a=this.elements,c=i[0],h=i[3],f=i[6],p=i[1],g=i[4],_=i[7],x=i[2],y=i[5],E=i[8],w=r[0],b=r[3],S=r[6],O=r[1],N=r[4],D=r[7],te=r[2],$=r[5],j=r[8];return a[0]=c*w+h*O+f*te,a[3]=c*b+h*N+f*$,a[6]=c*S+h*D+f*j,a[1]=p*w+g*O+_*te,a[4]=p*b+g*N+_*$,a[7]=p*S+g*D+_*j,a[2]=x*w+y*O+E*te,a[5]=x*b+y*N+E*$,a[8]=x*S+y*D+E*j,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[1],r=e[2],a=e[3],c=e[4],h=e[5],f=e[6],p=e[7],g=e[8];return t*c*g-t*h*p-i*a*g+i*h*f+r*a*p-r*c*f}invert(){const e=this.elements,t=e[0],i=e[1],r=e[2],a=e[3],c=e[4],h=e[5],f=e[6],p=e[7],g=e[8],_=g*c-h*p,x=h*f-g*a,y=p*a-c*f,E=t*_+i*x+r*y;if(E===0)return this.set(0,0,0,0,0,0,0,0,0);const w=1/E;return e[0]=_*w,e[1]=(r*p-g*i)*w,e[2]=(h*i-r*c)*w,e[3]=x*w,e[4]=(g*t-r*f)*w,e[5]=(r*a-h*t)*w,e[6]=y*w,e[7]=(i*f-p*t)*w,e[8]=(c*t-i*a)*w,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,i,r,a,c,h){const f=Math.cos(a),p=Math.sin(a);return this.set(i*f,i*p,-i*(f*c+p*h)+c+e,-r*p,r*f,-r*(-p*c+f*h)+h+t,0,0,1),this}scale(e,t){return this.premultiply(Du.makeScale(e,t)),this}rotate(e){return this.premultiply(Du.makeRotation(-e)),this}translate(e,t){return this.premultiply(Du.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,i,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,i=e.elements;for(let r=0;r<9;r++)if(t[r]!==i[r])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const Du=new wn;function Kp(o){for(let e=o.length-1;e>=0;--e)if(o[e]>=65535)return!0;return!1}const vv={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function fo(o,e){return new vv[o](e)}function Ac(o){return document.createElementNS("http://www.w3.org/1999/xhtml",o)}function Jp(){const o=Ac("canvas");return o.style.display="block",o}const jp={};function po(o){o in jp||(jp[o]=!0,console.warn(o))}function yv(o,e,t){return new Promise(function(i,r){function a(){switch(o.clientWaitSync(e,o.SYNC_FLUSH_COMMANDS_BIT,0)){case o.WAIT_FAILED:r();break;case o.TIMEOUT_EXPIRED:setTimeout(a,t);break;default:i()}}setTimeout(a,t)})}function Mv(o){const e=o.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function Sv(o){const e=o.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const Qp=new wn().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),em=new wn().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function Ev(){const o={enabled:!0,workingColorSpace:ga,spaces:{},convert:function(r,a,c){return this.enabled===!1||a===c||!a||!c||(this.spaces[a].transfer===ci&&(r.r=gs(r.r),r.g=gs(r.g),r.b=gs(r.b)),this.spaces[a].primaries!==this.spaces[c].primaries&&(r.applyMatrix3(this.spaces[a].toXYZ),r.applyMatrix3(this.spaces[c].fromXYZ)),this.spaces[c].transfer===ci&&(r.r=mo(r.r),r.g=mo(r.g),r.b=mo(r.b))),r},fromWorkingColorSpace:function(r,a){return this.convert(r,this.workingColorSpace,a)},toWorkingColorSpace:function(r,a){return this.convert(r,a,this.workingColorSpace)},getPrimaries:function(r){return this.spaces[r].primaries},getTransfer:function(r){return r===ms?Sc:this.spaces[r].transfer},getLuminanceCoefficients:function(r,a=this.workingColorSpace){return r.fromArray(this.spaces[a].luminanceCoefficients)},define:function(r){Object.assign(this.spaces,r)},_getMatrix:function(r,a,c){return r.copy(this.spaces[a].toXYZ).multiply(this.spaces[c].fromXYZ)},_getDrawingBufferColorSpace:function(r){return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(r=this.workingColorSpace){return this.spaces[r].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],i=[.3127,.329];return o.define({[ga]:{primaries:e,whitePoint:i,transfer:Sc,toXYZ:Qp,fromXYZ:em,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:ur},outputColorSpaceConfig:{drawingBufferColorSpace:ur}},[ur]:{primaries:e,whitePoint:i,transfer:ci,toXYZ:Qp,fromXYZ:em,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:ur}}}),o}const Xn=Ev();function gs(o){return o<.04045?o*.0773993808:Math.pow(o*.9478672986+.0521327014,2.4)}function mo(o){return o<.0031308?o*12.92:1.055*Math.pow(o,.41666)-.055}let go;class tm{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{go===void 0&&(go=Ac("canvas")),go.width=e.width,go.height=e.height;const i=go.getContext("2d");e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0,e.width,e.height),t=go}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Ac("canvas");t.width=e.width,t.height=e.height;const i=t.getContext("2d");i.drawImage(e,0,0,e.width,e.height);const r=i.getImageData(0,0,e.width,e.height),a=r.data;for(let c=0;c<a.length;c++)a[c]=gs(a[c]/255)*255;return i.putImageData(r,0,0),t}else if(e.data){const t=e.data.slice(0);for(let i=0;i<t.length;i++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[i]=Math.floor(gs(t[i]/255)*255):t[i]=gs(t[i]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let bv=0;class va{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:bv++}),this.uuid=Mr(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const i={uuid:this.uuid,url:""},r=this.data;if(r!==null){let a;if(Array.isArray(r)){a=[];for(let c=0,h=r.length;c<h;c++)r[c].isDataTexture?a.push(Uu(r[c].image)):a.push(Uu(r[c]))}else a=Uu(r);i.url=a}return t||(e.images[this.uuid]=i),i}}function Uu(o){return typeof HTMLImageElement<"u"&&o instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&o instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&o instanceof ImageBitmap?tm.getDataURL(o):o.data?{data:Array.from(o.data),width:o.width,height:o.height,type:o.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Tv=0;class Ei extends os{constructor(e=Ei.DEFAULT_IMAGE,t=Ei.DEFAULT_MAPPING,i=it,r=it,a=ae,c=Xe,h=zi,f=St,p=Ei.DEFAULT_ANISOTROPY,g=ms){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Tv++}),this.uuid=Mr(),this.name="",this.source=new va(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=i,this.wrapT=r,this.magFilter=a,this.minFilter=c,this.anisotropy=p,this.format=h,this.internalFormat=null,this.type=f,this.offset=new et(0,0),this.repeat=new et(1,1),this.center=new et(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new wn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=g,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),t||(e.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==we)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case ze:e.x=e.x-Math.floor(e.x);break;case it:e.x=e.x<0?0:1;break;case Ct:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case ze:e.y=e.y-Math.floor(e.y);break;case it:e.y=e.y<0?0:1;break;case Ct:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}Ei.DEFAULT_IMAGE=null,Ei.DEFAULT_MAPPING=we,Ei.DEFAULT_ANISOTROPY=1;class $n{constructor(e=0,t=0,i=0,r=1){$n.prototype.isVector4=!0,this.x=e,this.y=t,this.z=i,this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,i,r){return this.x=e,this.y=t,this.z=i,this.w=r,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,i=this.y,r=this.z,a=this.w,c=e.elements;return this.x=c[0]*t+c[4]*i+c[8]*r+c[12]*a,this.y=c[1]*t+c[5]*i+c[9]*r+c[13]*a,this.z=c[2]*t+c[6]*i+c[10]*r+c[14]*a,this.w=c[3]*t+c[7]*i+c[11]*r+c[15]*a,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,i,r,a;const f=e.elements,p=f[0],g=f[4],_=f[8],x=f[1],y=f[5],E=f[9],w=f[2],b=f[6],S=f[10];if(Math.abs(g-x)<.01&&Math.abs(_-w)<.01&&Math.abs(E-b)<.01){if(Math.abs(g+x)<.1&&Math.abs(_+w)<.1&&Math.abs(E+b)<.1&&Math.abs(p+y+S-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const N=(p+1)/2,D=(y+1)/2,te=(S+1)/2,$=(g+x)/4,j=(_+w)/4,ne=(E+b)/4;return N>D&&N>te?N<.01?(i=0,r=.707106781,a=.707106781):(i=Math.sqrt(N),r=$/i,a=j/i):D>te?D<.01?(i=.707106781,r=0,a=.707106781):(r=Math.sqrt(D),i=$/r,a=ne/r):te<.01?(i=.707106781,r=.707106781,a=0):(a=Math.sqrt(te),i=j/a,r=ne/a),this.set(i,r,a,t),this}let O=Math.sqrt((b-E)*(b-E)+(_-w)*(_-w)+(x-g)*(x-g));return Math.abs(O)<.001&&(O=1),this.x=(b-E)/O,this.y=(_-w)/O,this.z=(x-g)/O,this.w=Math.acos((p+y+S-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=bn(this.x,e.x,t.x),this.y=bn(this.y,e.y,t.y),this.z=bn(this.z,e.z,t.z),this.w=bn(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=bn(this.x,e,t),this.y=bn(this.y,e,t),this.z=bn(this.z,e,t),this.w=bn(this.w,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(bn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this.w=e.w+(t.w-e.w)*i,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class nm extends os{constructor(e=1,t=1,i={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new $n(0,0,e,t),this.scissorTest=!1,this.viewport=new $n(0,0,e,t);const r={width:e,height:t,depth:1};i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ae,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i);const a=new Ei(r,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);a.flipY=!1,a.generateMipmaps=i.generateMipmaps,a.internalFormat=i.internalFormat,this.textures=[];const c=i.count;for(let h=0;h<c;h++)this.textures[h]=a.clone(),this.textures[h].isRenderTargetTexture=!0;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}setSize(e,t,i=1){if(this.width!==e||this.height!==t||this.depth!==i){this.width=e,this.height=t,this.depth=i;for(let r=0,a=this.textures.length;r<a;r++)this.textures[r].image.width=e,this.textures[r].image.height=t,this.textures[r].image.depth=i;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let i=0,r=e.textures.length;i<r;i++)this.textures[i]=e.textures[i].clone(),this.textures[i].isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new va(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Hr extends nm{constructor(e=1,t=1,i={}){super(e,t,i),this.isWebGLRenderTarget=!0}}class Al extends Ei{constructor(e=null,t=1,i=1,r=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:i,depth:r},this.magFilter=Nt,this.minFilter=Nt,this.wrapR=it,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class Av extends Hr{constructor(e=1,t=1,i=1,r={}){super(e,t,r),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new Al(null,e,t,i),this.texture.isRenderTargetTexture=!0}}class Nu extends Ei{constructor(e=null,t=1,i=1,r=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:i,depth:r},this.magFilter=Nt,this.minFilter=Nt,this.wrapR=it,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class wv extends Hr{constructor(e=1,t=1,i=1,r={}){super(e,t,r),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new Nu(null,e,t,i),this.texture.isRenderTargetTexture=!0}}class dr{constructor(e=0,t=0,i=0,r=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=i,this._w=r}static slerpFlat(e,t,i,r,a,c,h){let f=i[r+0],p=i[r+1],g=i[r+2],_=i[r+3];const x=a[c+0],y=a[c+1],E=a[c+2],w=a[c+3];if(h===0){e[t+0]=f,e[t+1]=p,e[t+2]=g,e[t+3]=_;return}if(h===1){e[t+0]=x,e[t+1]=y,e[t+2]=E,e[t+3]=w;return}if(_!==w||f!==x||p!==y||g!==E){let b=1-h;const S=f*x+p*y+g*E+_*w,O=S>=0?1:-1,N=1-S*S;if(N>Number.EPSILON){const te=Math.sqrt(N),$=Math.atan2(te,S*O);b=Math.sin(b*$)/te,h=Math.sin(h*$)/te}const D=h*O;if(f=f*b+x*D,p=p*b+y*D,g=g*b+E*D,_=_*b+w*D,b===1-h){const te=1/Math.sqrt(f*f+p*p+g*g+_*_);f*=te,p*=te,g*=te,_*=te}}e[t]=f,e[t+1]=p,e[t+2]=g,e[t+3]=_}static multiplyQuaternionsFlat(e,t,i,r,a,c){const h=i[r],f=i[r+1],p=i[r+2],g=i[r+3],_=a[c],x=a[c+1],y=a[c+2],E=a[c+3];return e[t]=h*E+g*_+f*y-p*x,e[t+1]=f*E+g*x+p*_-h*y,e[t+2]=p*E+g*y+h*x-f*_,e[t+3]=g*E-h*_-f*x-p*y,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,i,r){return this._x=e,this._y=t,this._z=i,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const i=e._x,r=e._y,a=e._z,c=e._order,h=Math.cos,f=Math.sin,p=h(i/2),g=h(r/2),_=h(a/2),x=f(i/2),y=f(r/2),E=f(a/2);switch(c){case"XYZ":this._x=x*g*_+p*y*E,this._y=p*y*_-x*g*E,this._z=p*g*E+x*y*_,this._w=p*g*_-x*y*E;break;case"YXZ":this._x=x*g*_+p*y*E,this._y=p*y*_-x*g*E,this._z=p*g*E-x*y*_,this._w=p*g*_+x*y*E;break;case"ZXY":this._x=x*g*_-p*y*E,this._y=p*y*_+x*g*E,this._z=p*g*E+x*y*_,this._w=p*g*_-x*y*E;break;case"ZYX":this._x=x*g*_-p*y*E,this._y=p*y*_+x*g*E,this._z=p*g*E-x*y*_,this._w=p*g*_+x*y*E;break;case"YZX":this._x=x*g*_+p*y*E,this._y=p*y*_+x*g*E,this._z=p*g*E-x*y*_,this._w=p*g*_-x*y*E;break;case"XZY":this._x=x*g*_-p*y*E,this._y=p*y*_-x*g*E,this._z=p*g*E+x*y*_,this._w=p*g*_+x*y*E;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+c)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const i=t/2,r=Math.sin(i);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,i=t[0],r=t[4],a=t[8],c=t[1],h=t[5],f=t[9],p=t[2],g=t[6],_=t[10],x=i+h+_;if(x>0){const y=.5/Math.sqrt(x+1);this._w=.25/y,this._x=(g-f)*y,this._y=(a-p)*y,this._z=(c-r)*y}else if(i>h&&i>_){const y=2*Math.sqrt(1+i-h-_);this._w=(g-f)/y,this._x=.25*y,this._y=(r+c)/y,this._z=(a+p)/y}else if(h>_){const y=2*Math.sqrt(1+h-i-_);this._w=(a-p)/y,this._x=(r+c)/y,this._y=.25*y,this._z=(f+g)/y}else{const y=2*Math.sqrt(1+_-i-h);this._w=(c-r)/y,this._x=(a+p)/y,this._y=(f+g)/y,this._z=.25*y}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let i=e.dot(t)+1;return i<Number.EPSILON?(i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=i):(this._x=0,this._y=-e.z,this._z=e.y,this._w=i)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=i),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(bn(this.dot(e),-1,1)))}rotateTowards(e,t){const i=this.angleTo(e);if(i===0)return this;const r=Math.min(1,t/i);return this.slerp(e,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const i=e._x,r=e._y,a=e._z,c=e._w,h=t._x,f=t._y,p=t._z,g=t._w;return this._x=i*g+c*h+r*p-a*f,this._y=r*g+c*f+a*h-i*p,this._z=a*g+c*p+i*f-r*h,this._w=c*g-i*h-r*f-a*p,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const i=this._x,r=this._y,a=this._z,c=this._w;let h=c*e._w+i*e._x+r*e._y+a*e._z;if(h<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,h=-h):this.copy(e),h>=1)return this._w=c,this._x=i,this._y=r,this._z=a,this;const f=1-h*h;if(f<=Number.EPSILON){const y=1-t;return this._w=y*c+t*this._w,this._x=y*i+t*this._x,this._y=y*r+t*this._y,this._z=y*a+t*this._z,this.normalize(),this}const p=Math.sqrt(f),g=Math.atan2(p,h),_=Math.sin((1-t)*g)/p,x=Math.sin(t*g)/p;return this._w=c*_+this._w*x,this._x=i*_+this._x*x,this._y=r*_+this._y*x,this._z=a*_+this._z*x,this._onChangeCallback(),this}slerpQuaternions(e,t,i){return this.copy(e).slerp(t,i)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),i=Math.random(),r=Math.sqrt(1-i),a=Math.sqrt(i);return this.set(r*Math.sin(e),r*Math.cos(e),a*Math.sin(t),a*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class J{constructor(e=0,t=0,i=0){J.prototype.isVector3=!0,this.x=e,this.y=t,this.z=i}set(e,t,i){return i===void 0&&(i=this.z),this.x=e,this.y=t,this.z=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(im.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(im.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,i=this.y,r=this.z,a=e.elements;return this.x=a[0]*t+a[3]*i+a[6]*r,this.y=a[1]*t+a[4]*i+a[7]*r,this.z=a[2]*t+a[5]*i+a[8]*r,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,i=this.y,r=this.z,a=e.elements,c=1/(a[3]*t+a[7]*i+a[11]*r+a[15]);return this.x=(a[0]*t+a[4]*i+a[8]*r+a[12])*c,this.y=(a[1]*t+a[5]*i+a[9]*r+a[13])*c,this.z=(a[2]*t+a[6]*i+a[10]*r+a[14])*c,this}applyQuaternion(e){const t=this.x,i=this.y,r=this.z,a=e.x,c=e.y,h=e.z,f=e.w,p=2*(c*r-h*i),g=2*(h*t-a*r),_=2*(a*i-c*t);return this.x=t+f*p+c*_-h*g,this.y=i+f*g+h*p-a*_,this.z=r+f*_+a*g-c*p,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,i=this.y,r=this.z,a=e.elements;return this.x=a[0]*t+a[4]*i+a[8]*r,this.y=a[1]*t+a[5]*i+a[9]*r,this.z=a[2]*t+a[6]*i+a[10]*r,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=bn(this.x,e.x,t.x),this.y=bn(this.y,e.y,t.y),this.z=bn(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=bn(this.x,e,t),this.y=bn(this.y,e,t),this.z=bn(this.z,e,t),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(bn(i,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const i=e.x,r=e.y,a=e.z,c=t.x,h=t.y,f=t.z;return this.x=r*f-a*h,this.y=a*c-i*f,this.z=i*h-r*c,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const i=e.dot(this)/t;return this.copy(e).multiplyScalar(i)}projectOnPlane(e){return Fu.copy(this).projectOnVector(e),this.sub(Fu)}reflect(e){return this.sub(Fu.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(bn(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y,r=this.z-e.z;return t*t+i*i+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,i){const r=Math.sin(t)*e;return this.x=r*Math.sin(i),this.y=Math.cos(t)*e,this.z=r*Math.cos(i),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,i){return this.x=e*Math.sin(t),this.y=i,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),r=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=r,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,i=Math.sqrt(1-t*t);return this.x=i*Math.cos(e),this.y=t,this.z=i*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Fu=new J,im=new dr;class sr{constructor(e=new J(1/0,1/0,1/0),t=new J(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t+=3)this.expandByPoint(Gr.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,i=e.count;t<i;t++)this.expandByPoint(Gr.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=Gr.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const i=e.geometry;if(i!==void 0){const a=i.getAttribute("position");if(t===!0&&a!==void 0&&e.isInstancedMesh!==!0)for(let c=0,h=a.count;c<h;c++)e.isMesh===!0?e.getVertexPosition(c,Gr):Gr.fromBufferAttribute(a,c),Gr.applyMatrix4(e.matrixWorld),this.expandByPoint(Gr);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),wl.copy(e.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),wl.copy(i.boundingBox)),wl.applyMatrix4(e.matrixWorld),this.union(wl)}const r=e.children;for(let a=0,c=r.length;a<c;a++)this.expandByObject(r[a],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,Gr),Gr.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=-e.constant&&i>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(wc),Cl.subVectors(this.max,wc),_o.subVectors(e.a,wc),xo.subVectors(e.b,wc),vo.subVectors(e.c,wc),Gs.subVectors(xo,_o),Ws.subVectors(vo,xo),ya.subVectors(_o,vo);let t=[0,-Gs.z,Gs.y,0,-Ws.z,Ws.y,0,-ya.z,ya.y,Gs.z,0,-Gs.x,Ws.z,0,-Ws.x,ya.z,0,-ya.x,-Gs.y,Gs.x,0,-Ws.y,Ws.x,0,-ya.y,ya.x,0];return!Ou(t,_o,xo,vo,Cl)||(t=[1,0,0,0,1,0,0,0,1],!Ou(t,_o,xo,vo,Cl))?!1:(Rl.crossVectors(Gs,Ws),t=[Rl.x,Rl.y,Rl.z],Ou(t,_o,xo,vo,Cl))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Gr).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(Gr).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(_s[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),_s[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),_s[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),_s[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),_s[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),_s[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),_s[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),_s[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(_s),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const _s=[new J,new J,new J,new J,new J,new J,new J,new J],Gr=new J,wl=new sr,_o=new J,xo=new J,vo=new J,Gs=new J,Ws=new J,ya=new J,wc=new J,Cl=new J,Rl=new J,Ma=new J;function Ou(o,e,t,i,r){for(let a=0,c=o.length-3;a<=c;a+=3){Ma.fromArray(o,a);const h=r.x*Math.abs(Ma.x)+r.y*Math.abs(Ma.y)+r.z*Math.abs(Ma.z),f=e.dot(Ma),p=t.dot(Ma),g=i.dot(Ma);if(Math.max(-Math.max(f,p,g),Math.min(f,p,g))>h)return!1}return!0}const Cv=new sr,Cc=new J,Bu=new J;class $i{constructor(e=new J,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const i=this.center;t!==void 0?i.copy(t):Cv.setFromPoints(e).getCenter(i);let r=0;for(let a=0,c=e.length;a<c;a++)r=Math.max(r,i.distanceToSquared(e[a]));return this.radius=Math.sqrt(r),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const i=this.center.distanceToSquared(e);return t.copy(e),i>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Cc.subVectors(e,this.center);const t=Cc.lengthSq();if(t>this.radius*this.radius){const i=Math.sqrt(t),r=(i-this.radius)*.5;this.center.addScaledVector(Cc,r/i),this.radius+=r}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Bu.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Cc.copy(e.center).add(Bu)),this.expandByPoint(Cc.copy(e.center).sub(Bu))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const xs=new J,zu=new J,Pl=new J,Xs=new J,Vu=new J,Il=new J,ku=new J;class yo{constructor(e=new J,t=new J(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,xs)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const i=t.dot(this.direction);return i<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=xs.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(xs.copy(this.origin).addScaledVector(this.direction,t),xs.distanceToSquared(e))}distanceSqToSegment(e,t,i,r){zu.copy(e).add(t).multiplyScalar(.5),Pl.copy(t).sub(e).normalize(),Xs.copy(this.origin).sub(zu);const a=e.distanceTo(t)*.5,c=-this.direction.dot(Pl),h=Xs.dot(this.direction),f=-Xs.dot(Pl),p=Xs.lengthSq(),g=Math.abs(1-c*c);let _,x,y,E;if(g>0)if(_=c*f-h,x=c*h-f,E=a*g,_>=0)if(x>=-E)if(x<=E){const w=1/g;_*=w,x*=w,y=_*(_+c*x+2*h)+x*(c*_+x+2*f)+p}else x=a,_=Math.max(0,-(c*x+h)),y=-_*_+x*(x+2*f)+p;else x=-a,_=Math.max(0,-(c*x+h)),y=-_*_+x*(x+2*f)+p;else x<=-E?(_=Math.max(0,-(-c*a+h)),x=_>0?-a:Math.min(Math.max(-a,-f),a),y=-_*_+x*(x+2*f)+p):x<=E?(_=0,x=Math.min(Math.max(-a,-f),a),y=x*(x+2*f)+p):(_=Math.max(0,-(c*a+h)),x=_>0?a:Math.min(Math.max(-a,-f),a),y=-_*_+x*(x+2*f)+p);else x=c>0?-a:a,_=Math.max(0,-(c*x+h)),y=-_*_+x*(x+2*f)+p;return i&&i.copy(this.origin).addScaledVector(this.direction,_),r&&r.copy(zu).addScaledVector(Pl,x),y}intersectSphere(e,t){xs.subVectors(e.center,this.origin);const i=xs.dot(this.direction),r=xs.dot(xs)-i*i,a=e.radius*e.radius;if(r>a)return null;const c=Math.sqrt(a-r),h=i-c,f=i+c;return f<0?null:h<0?this.at(f,t):this.at(h,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null}intersectPlane(e,t){const i=this.distanceToPlane(e);return i===null?null:this.at(i,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let i,r,a,c,h,f;const p=1/this.direction.x,g=1/this.direction.y,_=1/this.direction.z,x=this.origin;return p>=0?(i=(e.min.x-x.x)*p,r=(e.max.x-x.x)*p):(i=(e.max.x-x.x)*p,r=(e.min.x-x.x)*p),g>=0?(a=(e.min.y-x.y)*g,c=(e.max.y-x.y)*g):(a=(e.max.y-x.y)*g,c=(e.min.y-x.y)*g),i>c||a>r||((a>i||isNaN(i))&&(i=a),(c<r||isNaN(r))&&(r=c),_>=0?(h=(e.min.z-x.z)*_,f=(e.max.z-x.z)*_):(h=(e.max.z-x.z)*_,f=(e.min.z-x.z)*_),i>f||h>r)||((h>i||i!==i)&&(i=h),(f<r||r!==r)&&(r=f),r<0)?null:this.at(i>=0?i:r,t)}intersectsBox(e){return this.intersectBox(e,xs)!==null}intersectTriangle(e,t,i,r,a){Vu.subVectors(t,e),Il.subVectors(i,e),ku.crossVectors(Vu,Il);let c=this.direction.dot(ku),h;if(c>0){if(r)return null;h=1}else if(c<0)h=-1,c=-c;else return null;Xs.subVectors(this.origin,e);const f=h*this.direction.dot(Il.crossVectors(Xs,Il));if(f<0)return null;const p=h*this.direction.dot(Vu.cross(Xs));if(p<0||f+p>c)return null;const g=-h*Xs.dot(ku);return g<0?null:this.at(g/c,a)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class xn{constructor(e,t,i,r,a,c,h,f,p,g,_,x,y,E,w,b){xn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,i,r,a,c,h,f,p,g,_,x,y,E,w,b)}set(e,t,i,r,a,c,h,f,p,g,_,x,y,E,w,b){const S=this.elements;return S[0]=e,S[4]=t,S[8]=i,S[12]=r,S[1]=a,S[5]=c,S[9]=h,S[13]=f,S[2]=p,S[6]=g,S[10]=_,S[14]=x,S[3]=y,S[7]=E,S[11]=w,S[15]=b,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new xn().fromArray(this.elements)}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this}copyPosition(e){const t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,i=e.elements,r=1/Mo.setFromMatrixColumn(e,0).length(),a=1/Mo.setFromMatrixColumn(e,1).length(),c=1/Mo.setFromMatrixColumn(e,2).length();return t[0]=i[0]*r,t[1]=i[1]*r,t[2]=i[2]*r,t[3]=0,t[4]=i[4]*a,t[5]=i[5]*a,t[6]=i[6]*a,t[7]=0,t[8]=i[8]*c,t[9]=i[9]*c,t[10]=i[10]*c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,i=e.x,r=e.y,a=e.z,c=Math.cos(i),h=Math.sin(i),f=Math.cos(r),p=Math.sin(r),g=Math.cos(a),_=Math.sin(a);if(e.order==="XYZ"){const x=c*g,y=c*_,E=h*g,w=h*_;t[0]=f*g,t[4]=-f*_,t[8]=p,t[1]=y+E*p,t[5]=x-w*p,t[9]=-h*f,t[2]=w-x*p,t[6]=E+y*p,t[10]=c*f}else if(e.order==="YXZ"){const x=f*g,y=f*_,E=p*g,w=p*_;t[0]=x+w*h,t[4]=E*h-y,t[8]=c*p,t[1]=c*_,t[5]=c*g,t[9]=-h,t[2]=y*h-E,t[6]=w+x*h,t[10]=c*f}else if(e.order==="ZXY"){const x=f*g,y=f*_,E=p*g,w=p*_;t[0]=x-w*h,t[4]=-c*_,t[8]=E+y*h,t[1]=y+E*h,t[5]=c*g,t[9]=w-x*h,t[2]=-c*p,t[6]=h,t[10]=c*f}else if(e.order==="ZYX"){const x=c*g,y=c*_,E=h*g,w=h*_;t[0]=f*g,t[4]=E*p-y,t[8]=x*p+w,t[1]=f*_,t[5]=w*p+x,t[9]=y*p-E,t[2]=-p,t[6]=h*f,t[10]=c*f}else if(e.order==="YZX"){const x=c*f,y=c*p,E=h*f,w=h*p;t[0]=f*g,t[4]=w-x*_,t[8]=E*_+y,t[1]=_,t[5]=c*g,t[9]=-h*g,t[2]=-p*g,t[6]=y*_+E,t[10]=x-w*_}else if(e.order==="XZY"){const x=c*f,y=c*p,E=h*f,w=h*p;t[0]=f*g,t[4]=-_,t[8]=p*g,t[1]=x*_+w,t[5]=c*g,t[9]=y*_-E,t[2]=E*_-y,t[6]=h*g,t[10]=w*_+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(Rv,e,Pv)}lookAt(e,t,i){const r=this.elements;return Sr.subVectors(e,t),Sr.lengthSq()===0&&(Sr.z=1),Sr.normalize(),qs.crossVectors(i,Sr),qs.lengthSq()===0&&(Math.abs(i.z)===1?Sr.x+=1e-4:Sr.z+=1e-4,Sr.normalize(),qs.crossVectors(i,Sr)),qs.normalize(),Ll.crossVectors(Sr,qs),r[0]=qs.x,r[4]=Ll.x,r[8]=Sr.x,r[1]=qs.y,r[5]=Ll.y,r[9]=Sr.y,r[2]=qs.z,r[6]=Ll.z,r[10]=Sr.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,r=t.elements,a=this.elements,c=i[0],h=i[4],f=i[8],p=i[12],g=i[1],_=i[5],x=i[9],y=i[13],E=i[2],w=i[6],b=i[10],S=i[14],O=i[3],N=i[7],D=i[11],te=i[15],$=r[0],j=r[4],ne=r[8],H=r[12],z=r[1],re=r[5],De=r[9],Ae=r[13],He=r[2],Ke=r[6],ke=r[10],st=r[14],Be=r[3],It=r[7],Xt=r[11],en=r[15];return a[0]=c*$+h*z+f*He+p*Be,a[4]=c*j+h*re+f*Ke+p*It,a[8]=c*ne+h*De+f*ke+p*Xt,a[12]=c*H+h*Ae+f*st+p*en,a[1]=g*$+_*z+x*He+y*Be,a[5]=g*j+_*re+x*Ke+y*It,a[9]=g*ne+_*De+x*ke+y*Xt,a[13]=g*H+_*Ae+x*st+y*en,a[2]=E*$+w*z+b*He+S*Be,a[6]=E*j+w*re+b*Ke+S*It,a[10]=E*ne+w*De+b*ke+S*Xt,a[14]=E*H+w*Ae+b*st+S*en,a[3]=O*$+N*z+D*He+te*Be,a[7]=O*j+N*re+D*Ke+te*It,a[11]=O*ne+N*De+D*ke+te*Xt,a[15]=O*H+N*Ae+D*st+te*en,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[4],r=e[8],a=e[12],c=e[1],h=e[5],f=e[9],p=e[13],g=e[2],_=e[6],x=e[10],y=e[14],E=e[3],w=e[7],b=e[11],S=e[15];return E*(+a*f*_-r*p*_-a*h*x+i*p*x+r*h*y-i*f*y)+w*(+t*f*y-t*p*x+a*c*x-r*c*y+r*p*g-a*f*g)+b*(+t*p*_-t*h*y-a*c*_+i*c*y+a*h*g-i*p*g)+S*(-r*h*g-t*f*_+t*h*x+r*c*_-i*c*x+i*f*g)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,i){const r=this.elements;return e.isVector3?(r[12]=e.x,r[13]=e.y,r[14]=e.z):(r[12]=e,r[13]=t,r[14]=i),this}invert(){const e=this.elements,t=e[0],i=e[1],r=e[2],a=e[3],c=e[4],h=e[5],f=e[6],p=e[7],g=e[8],_=e[9],x=e[10],y=e[11],E=e[12],w=e[13],b=e[14],S=e[15],O=_*b*p-w*x*p+w*f*y-h*b*y-_*f*S+h*x*S,N=E*x*p-g*b*p-E*f*y+c*b*y+g*f*S-c*x*S,D=g*w*p-E*_*p+E*h*y-c*w*y-g*h*S+c*_*S,te=E*_*f-g*w*f-E*h*x+c*w*x+g*h*b-c*_*b,$=t*O+i*N+r*D+a*te;if($===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const j=1/$;return e[0]=O*j,e[1]=(w*x*a-_*b*a-w*r*y+i*b*y+_*r*S-i*x*S)*j,e[2]=(h*b*a-w*f*a+w*r*p-i*b*p-h*r*S+i*f*S)*j,e[3]=(_*f*a-h*x*a-_*r*p+i*x*p+h*r*y-i*f*y)*j,e[4]=N*j,e[5]=(g*b*a-E*x*a+E*r*y-t*b*y-g*r*S+t*x*S)*j,e[6]=(E*f*a-c*b*a-E*r*p+t*b*p+c*r*S-t*f*S)*j,e[7]=(c*x*a-g*f*a+g*r*p-t*x*p-c*r*y+t*f*y)*j,e[8]=D*j,e[9]=(E*_*a-g*w*a-E*i*y+t*w*y+g*i*S-t*_*S)*j,e[10]=(c*w*a-E*h*a+E*i*p-t*w*p-c*i*S+t*h*S)*j,e[11]=(g*h*a-c*_*a-g*i*p+t*_*p+c*i*y-t*h*y)*j,e[12]=te*j,e[13]=(g*w*r-E*_*r+E*i*x-t*w*x-g*i*b+t*_*b)*j,e[14]=(E*h*r-c*w*r-E*i*f+t*w*f+c*i*b-t*h*b)*j,e[15]=(c*_*r-g*h*r+g*i*f-t*_*f-c*i*x+t*h*x)*j,this}scale(e){const t=this.elements,i=e.x,r=e.y,a=e.z;return t[0]*=i,t[4]*=r,t[8]*=a,t[1]*=i,t[5]*=r,t[9]*=a,t[2]*=i,t[6]*=r,t[10]*=a,t[3]*=i,t[7]*=r,t[11]*=a,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,r))}makeTranslation(e,t,i){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const i=Math.cos(t),r=Math.sin(t),a=1-i,c=e.x,h=e.y,f=e.z,p=a*c,g=a*h;return this.set(p*c+i,p*h-r*f,p*f+r*h,0,p*h+r*f,g*h+i,g*f-r*c,0,p*f-r*h,g*f+r*c,a*f*f+i,0,0,0,0,1),this}makeScale(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this}makeShear(e,t,i,r,a,c){return this.set(1,i,a,0,e,1,c,0,t,r,1,0,0,0,0,1),this}compose(e,t,i){const r=this.elements,a=t._x,c=t._y,h=t._z,f=t._w,p=a+a,g=c+c,_=h+h,x=a*p,y=a*g,E=a*_,w=c*g,b=c*_,S=h*_,O=f*p,N=f*g,D=f*_,te=i.x,$=i.y,j=i.z;return r[0]=(1-(w+S))*te,r[1]=(y+D)*te,r[2]=(E-N)*te,r[3]=0,r[4]=(y-D)*$,r[5]=(1-(x+S))*$,r[6]=(b+O)*$,r[7]=0,r[8]=(E+N)*j,r[9]=(b-O)*j,r[10]=(1-(x+w))*j,r[11]=0,r[12]=e.x,r[13]=e.y,r[14]=e.z,r[15]=1,this}decompose(e,t,i){const r=this.elements;let a=Mo.set(r[0],r[1],r[2]).length();const c=Mo.set(r[4],r[5],r[6]).length(),h=Mo.set(r[8],r[9],r[10]).length();this.determinant()<0&&(a=-a),e.x=r[12],e.y=r[13],e.z=r[14],Wr.copy(this);const p=1/a,g=1/c,_=1/h;return Wr.elements[0]*=p,Wr.elements[1]*=p,Wr.elements[2]*=p,Wr.elements[4]*=g,Wr.elements[5]*=g,Wr.elements[6]*=g,Wr.elements[8]*=_,Wr.elements[9]*=_,Wr.elements[10]*=_,t.setFromRotationMatrix(Wr),i.x=a,i.y=c,i.z=h,this}makePerspective(e,t,i,r,a,c,h=as){const f=this.elements,p=2*a/(t-e),g=2*a/(i-r),_=(t+e)/(t-e),x=(i+r)/(i-r);let y,E;if(h===as)y=-(c+a)/(c-a),E=-2*c*a/(c-a);else if(h===bc)y=-c/(c-a),E=-c*a/(c-a);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+h);return f[0]=p,f[4]=0,f[8]=_,f[12]=0,f[1]=0,f[5]=g,f[9]=x,f[13]=0,f[2]=0,f[6]=0,f[10]=y,f[14]=E,f[3]=0,f[7]=0,f[11]=-1,f[15]=0,this}makeOrthographic(e,t,i,r,a,c,h=as){const f=this.elements,p=1/(t-e),g=1/(i-r),_=1/(c-a),x=(t+e)*p,y=(i+r)*g;let E,w;if(h===as)E=(c+a)*_,w=-2*_;else if(h===bc)E=a*_,w=-1*_;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+h);return f[0]=2*p,f[4]=0,f[8]=0,f[12]=-x,f[1]=0,f[5]=2*g,f[9]=0,f[13]=-y,f[2]=0,f[6]=0,f[10]=w,f[14]=-E,f[3]=0,f[7]=0,f[11]=0,f[15]=1,this}equals(e){const t=this.elements,i=e.elements;for(let r=0;r<16;r++)if(t[r]!==i[r])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}const Mo=new J,Wr=new xn,Rv=new J(0,0,0),Pv=new J(1,1,1),qs=new J,Ll=new J,Sr=new J,rm=new xn,sm=new dr;class Er{constructor(e=0,t=0,i=0,r=Er.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=i,this._order=r}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,i,r=this._order){return this._x=e,this._y=t,this._z=i,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,i=!0){const r=e.elements,a=r[0],c=r[4],h=r[8],f=r[1],p=r[5],g=r[9],_=r[2],x=r[6],y=r[10];switch(t){case"XYZ":this._y=Math.asin(bn(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(-g,y),this._z=Math.atan2(-c,a)):(this._x=Math.atan2(x,p),this._z=0);break;case"YXZ":this._x=Math.asin(-bn(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(h,y),this._z=Math.atan2(f,p)):(this._y=Math.atan2(-_,a),this._z=0);break;case"ZXY":this._x=Math.asin(bn(x,-1,1)),Math.abs(x)<.9999999?(this._y=Math.atan2(-_,y),this._z=Math.atan2(-c,p)):(this._y=0,this._z=Math.atan2(f,a));break;case"ZYX":this._y=Math.asin(-bn(_,-1,1)),Math.abs(_)<.9999999?(this._x=Math.atan2(x,y),this._z=Math.atan2(f,a)):(this._x=0,this._z=Math.atan2(-c,p));break;case"YZX":this._z=Math.asin(bn(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(-g,p),this._y=Math.atan2(-_,a)):(this._x=0,this._y=Math.atan2(h,y));break;case"XZY":this._z=Math.asin(-bn(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(x,p),this._y=Math.atan2(h,a)):(this._x=Math.atan2(-g,y),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,i===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,i){return rm.makeRotationFromQuaternion(e),this.setFromRotationMatrix(rm,t,i)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return sm.setFromEuler(this),this.setFromQuaternion(sm,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Er.DEFAULT_ORDER="XYZ";class Dl{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let Iv=0;const am=new J,So=new dr,vs=new xn,Ul=new J,Rc=new J,Lv=new J,Dv=new dr,om=new J(1,0,0),cm=new J(0,1,0),lm=new J(0,0,1),hm={type:"added"},Uv={type:"removed"},Eo={type:"childadded",child:null},Hu={type:"childremoved",child:null};class Kn extends os{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Iv++}),this.uuid=Mr(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Kn.DEFAULT_UP.clone();const e=new J,t=new Er,i=new dr,r=new J(1,1,1);function a(){i.setFromEuler(t,!1)}function c(){t.setFromQuaternion(i,void 0,!1)}t._onChange(a),i._onChange(c),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new xn},normalMatrix:{value:new wn}}),this.matrix=new xn,this.matrixWorld=new xn,this.matrixAutoUpdate=Kn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Kn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Dl,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return So.setFromAxisAngle(e,t),this.quaternion.multiply(So),this}rotateOnWorldAxis(e,t){return So.setFromAxisAngle(e,t),this.quaternion.premultiply(So),this}rotateX(e){return this.rotateOnAxis(om,e)}rotateY(e){return this.rotateOnAxis(cm,e)}rotateZ(e){return this.rotateOnAxis(lm,e)}translateOnAxis(e,t){return am.copy(e).applyQuaternion(this.quaternion),this.position.add(am.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(om,e)}translateY(e){return this.translateOnAxis(cm,e)}translateZ(e){return this.translateOnAxis(lm,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(vs.copy(this.matrixWorld).invert())}lookAt(e,t,i){e.isVector3?Ul.copy(e):Ul.set(e,t,i);const r=this.parent;this.updateWorldMatrix(!0,!1),Rc.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?vs.lookAt(Rc,Ul,this.up):vs.lookAt(Ul,Rc,this.up),this.quaternion.setFromRotationMatrix(vs),r&&(vs.extractRotation(r.matrixWorld),So.setFromRotationMatrix(vs),this.quaternion.premultiply(So.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(hm),Eo.child=e,this.dispatchEvent(Eo),Eo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Uv),Hu.child=e,this.dispatchEvent(Hu),Hu.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),vs.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),vs.multiply(e.parent.matrixWorld)),e.applyMatrix4(vs),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(hm),Eo.child=e,this.dispatchEvent(Eo),Eo.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,r=this.children.length;i<r;i++){const c=this.children[i].getObjectByProperty(e,t);if(c!==void 0)return c}}getObjectsByProperty(e,t,i=[]){this[e]===t&&i.push(this);const r=this.children;for(let a=0,c=r.length;a<c;a++)r[a].getObjectsByProperty(e,t,i);return i}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Rc,e,Lv),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Rc,Dv,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let i=0,r=t.length;i<r;i++)t[i].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let i=0,r=t.length;i<r;i++)t[i].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let i=0,r=t.length;i<r;i++)t[i].updateMatrixWorld(e)}updateWorldMatrix(e,t){const i=this.parent;if(e===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const r=this.children;for(let a=0,c=r.length;a<c;a++)r[a].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",i={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const r={};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.castShadow===!0&&(r.castShadow=!0),this.receiveShadow===!0&&(r.receiveShadow=!0),this.visible===!1&&(r.visible=!1),this.frustumCulled===!1&&(r.frustumCulled=!1),this.renderOrder!==0&&(r.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),r.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(r.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(r.type="BatchedMesh",r.perObjectFrustumCulled=this.perObjectFrustumCulled,r.sortObjects=this.sortObjects,r.drawRanges=this._drawRanges,r.reservedRanges=this._reservedRanges,r.visibility=this._visibility,r.active=this._active,r.bounds=this._bounds.map(h=>({boxInitialized:h.boxInitialized,boxMin:h.box.min.toArray(),boxMax:h.box.max.toArray(),sphereInitialized:h.sphereInitialized,sphereRadius:h.sphere.radius,sphereCenter:h.sphere.center.toArray()})),r.maxInstanceCount=this._maxInstanceCount,r.maxVertexCount=this._maxVertexCount,r.maxIndexCount=this._maxIndexCount,r.geometryInitialized=this._geometryInitialized,r.geometryCount=this._geometryCount,r.matricesTexture=this._matricesTexture.toJSON(e),this._colorsTexture!==null&&(r.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(r.boundingSphere={center:r.boundingSphere.center.toArray(),radius:r.boundingSphere.radius}),this.boundingBox!==null&&(r.boundingBox={min:r.boundingBox.min.toArray(),max:r.boundingBox.max.toArray()}));function a(h,f){return h[f.uuid]===void 0&&(h[f.uuid]=f.toJSON(e)),f.uuid}if(this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(r.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=a(e.geometries,this.geometry);const h=this.geometry.parameters;if(h!==void 0&&h.shapes!==void 0){const f=h.shapes;if(Array.isArray(f))for(let p=0,g=f.length;p<g;p++){const _=f[p];a(e.shapes,_)}else a(e.shapes,f)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(a(e.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const h=[];for(let f=0,p=this.material.length;f<p;f++)h.push(a(e.materials,this.material[f]));r.material=h}else r.material=a(e.materials,this.material);if(this.children.length>0){r.children=[];for(let h=0;h<this.children.length;h++)r.children.push(this.children[h].toJSON(e).object)}if(this.animations.length>0){r.animations=[];for(let h=0;h<this.animations.length;h++){const f=this.animations[h];r.animations.push(a(e.animations,f))}}if(t){const h=c(e.geometries),f=c(e.materials),p=c(e.textures),g=c(e.images),_=c(e.shapes),x=c(e.skeletons),y=c(e.animations),E=c(e.nodes);h.length>0&&(i.geometries=h),f.length>0&&(i.materials=f),p.length>0&&(i.textures=p),g.length>0&&(i.images=g),_.length>0&&(i.shapes=_),x.length>0&&(i.skeletons=x),y.length>0&&(i.animations=y),E.length>0&&(i.nodes=E)}return i.object=r,i;function c(h){const f=[];for(const p in h){const g=h[p];delete g.metadata,f.push(g)}return f}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let i=0;i<e.children.length;i++){const r=e.children[i];this.add(r.clone())}return this}}Kn.DEFAULT_UP=new J(0,1,0),Kn.DEFAULT_MATRIX_AUTO_UPDATE=!0,Kn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Xr=new J,ys=new J,Gu=new J,Ms=new J,bo=new J,To=new J,um=new J,Wu=new J,Xu=new J,qu=new J,Yu=new $n,Zu=new $n,$u=new $n;class fr{constructor(e=new J,t=new J,i=new J){this.a=e,this.b=t,this.c=i}static getNormal(e,t,i,r){r.subVectors(i,t),Xr.subVectors(e,t),r.cross(Xr);const a=r.lengthSq();return a>0?r.multiplyScalar(1/Math.sqrt(a)):r.set(0,0,0)}static getBarycoord(e,t,i,r,a){Xr.subVectors(r,t),ys.subVectors(i,t),Gu.subVectors(e,t);const c=Xr.dot(Xr),h=Xr.dot(ys),f=Xr.dot(Gu),p=ys.dot(ys),g=ys.dot(Gu),_=c*p-h*h;if(_===0)return a.set(0,0,0),null;const x=1/_,y=(p*f-h*g)*x,E=(c*g-h*f)*x;return a.set(1-y-E,E,y)}static containsPoint(e,t,i,r){return this.getBarycoord(e,t,i,r,Ms)===null?!1:Ms.x>=0&&Ms.y>=0&&Ms.x+Ms.y<=1}static getInterpolation(e,t,i,r,a,c,h,f){return this.getBarycoord(e,t,i,r,Ms)===null?(f.x=0,f.y=0,"z"in f&&(f.z=0),"w"in f&&(f.w=0),null):(f.setScalar(0),f.addScaledVector(a,Ms.x),f.addScaledVector(c,Ms.y),f.addScaledVector(h,Ms.z),f)}static getInterpolatedAttribute(e,t,i,r,a,c){return Yu.setScalar(0),Zu.setScalar(0),$u.setScalar(0),Yu.fromBufferAttribute(e,t),Zu.fromBufferAttribute(e,i),$u.fromBufferAttribute(e,r),c.setScalar(0),c.addScaledVector(Yu,a.x),c.addScaledVector(Zu,a.y),c.addScaledVector($u,a.z),c}static isFrontFacing(e,t,i,r){return Xr.subVectors(i,t),ys.subVectors(e,t),Xr.cross(ys).dot(r)<0}set(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this}setFromPointsAndIndices(e,t,i,r){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[r]),this}setFromAttributeAndIndices(e,t,i,r){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,i),this.c.fromBufferAttribute(e,r),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Xr.subVectors(this.c,this.b),ys.subVectors(this.a,this.b),Xr.cross(ys).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return fr.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return fr.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,i,r,a){return fr.getInterpolation(e,this.a,this.b,this.c,t,i,r,a)}containsPoint(e){return fr.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return fr.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const i=this.a,r=this.b,a=this.c;let c,h;bo.subVectors(r,i),To.subVectors(a,i),Wu.subVectors(e,i);const f=bo.dot(Wu),p=To.dot(Wu);if(f<=0&&p<=0)return t.copy(i);Xu.subVectors(e,r);const g=bo.dot(Xu),_=To.dot(Xu);if(g>=0&&_<=g)return t.copy(r);const x=f*_-g*p;if(x<=0&&f>=0&&g<=0)return c=f/(f-g),t.copy(i).addScaledVector(bo,c);qu.subVectors(e,a);const y=bo.dot(qu),E=To.dot(qu);if(E>=0&&y<=E)return t.copy(a);const w=y*p-f*E;if(w<=0&&p>=0&&E<=0)return h=p/(p-E),t.copy(i).addScaledVector(To,h);const b=g*E-y*_;if(b<=0&&_-g>=0&&y-E>=0)return um.subVectors(a,r),h=(_-g)/(_-g+(y-E)),t.copy(r).addScaledVector(um,h);const S=1/(b+w+x);return c=w*S,h=x*S,t.copy(i).addScaledVector(bo,c).addScaledVector(To,h)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const dm={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Ys={h:0,s:0,l:0},Nl={h:0,s:0,l:0};function Ku(o,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?o+(e-o)*6*t:t<1/2?e:t<2/3?o+(e-o)*6*(2/3-t):o}class Ht{constructor(e,t,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,i)}set(e,t,i){if(t===void 0&&i===void 0){const r=e;r&&r.isColor?this.copy(r):typeof r=="number"?this.setHex(r):typeof r=="string"&&this.setStyle(r)}else this.setRGB(e,t,i);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=ur){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Xn.toWorkingColorSpace(this,t),this}setRGB(e,t,i,r=Xn.workingColorSpace){return this.r=e,this.g=t,this.b=i,Xn.toWorkingColorSpace(this,r),this}setHSL(e,t,i,r=Xn.workingColorSpace){if(e=Lu(e,1),t=bn(t,0,1),i=bn(i,0,1),t===0)this.r=this.g=this.b=i;else{const a=i<=.5?i*(1+t):i+t-i*t,c=2*i-a;this.r=Ku(c,a,e+1/3),this.g=Ku(c,a,e),this.b=Ku(c,a,e-1/3)}return Xn.toWorkingColorSpace(this,r),this}setStyle(e,t=ur){function i(a){a!==void 0&&parseFloat(a)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(e)){let a;const c=r[1],h=r[2];switch(c){case"rgb":case"rgba":if(a=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))return i(a[4]),this.setRGB(Math.min(255,parseInt(a[1],10))/255,Math.min(255,parseInt(a[2],10))/255,Math.min(255,parseInt(a[3],10))/255,t);if(a=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))return i(a[4]),this.setRGB(Math.min(100,parseInt(a[1],10))/100,Math.min(100,parseInt(a[2],10))/100,Math.min(100,parseInt(a[3],10))/100,t);break;case"hsl":case"hsla":if(a=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))return i(a[4]),this.setHSL(parseFloat(a[1])/360,parseFloat(a[2])/100,parseFloat(a[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(e)){const a=r[1],c=a.length;if(c===3)return this.setRGB(parseInt(a.charAt(0),16)/15,parseInt(a.charAt(1),16)/15,parseInt(a.charAt(2),16)/15,t);if(c===6)return this.setHex(parseInt(a,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=ur){const i=dm[e.toLowerCase()];return i!==void 0?this.setHex(i,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=gs(e.r),this.g=gs(e.g),this.b=gs(e.b),this}copyLinearToSRGB(e){return this.r=mo(e.r),this.g=mo(e.g),this.b=mo(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=ur){return Xn.fromWorkingColorSpace(Ki.copy(this),e),Math.round(bn(Ki.r*255,0,255))*65536+Math.round(bn(Ki.g*255,0,255))*256+Math.round(bn(Ki.b*255,0,255))}getHexString(e=ur){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Xn.workingColorSpace){Xn.fromWorkingColorSpace(Ki.copy(this),t);const i=Ki.r,r=Ki.g,a=Ki.b,c=Math.max(i,r,a),h=Math.min(i,r,a);let f,p;const g=(h+c)/2;if(h===c)f=0,p=0;else{const _=c-h;switch(p=g<=.5?_/(c+h):_/(2-c-h),c){case i:f=(r-a)/_+(r<a?6:0);break;case r:f=(a-i)/_+2;break;case a:f=(i-r)/_+4;break}f/=6}return e.h=f,e.s=p,e.l=g,e}getRGB(e,t=Xn.workingColorSpace){return Xn.fromWorkingColorSpace(Ki.copy(this),t),e.r=Ki.r,e.g=Ki.g,e.b=Ki.b,e}getStyle(e=ur){Xn.fromWorkingColorSpace(Ki.copy(this),e);const t=Ki.r,i=Ki.g,r=Ki.b;return e!==ur?`color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${r.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(i*255)},${Math.round(r*255)})`}offsetHSL(e,t,i){return this.getHSL(Ys),this.setHSL(Ys.h+e,Ys.s+t,Ys.l+i)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,i){return this.r=e.r+(t.r-e.r)*i,this.g=e.g+(t.g-e.g)*i,this.b=e.b+(t.b-e.b)*i,this}lerpHSL(e,t){this.getHSL(Ys),e.getHSL(Nl);const i=Tc(Ys.h,Nl.h,t),r=Tc(Ys.s,Nl.s,t),a=Tc(Ys.l,Nl.l,t);return this.setHSL(i,r,a),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,i=this.g,r=this.b,a=e.elements;return this.r=a[0]*t+a[3]*i+a[6]*r,this.g=a[1]*t+a[4]*i+a[7]*r,this.b=a[2]*t+a[5]*i+a[8]*r,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Ki=new Ht;Ht.NAMES=dm;let Nv=0;class Ji extends os{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Nv++}),this.uuid=Mr(),this.name="",this.type="Material",this.blending=Y,this.side=P,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Ie,this.blendDst=Je,this.blendEquation=ee,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ht(0,0,0),this.blendAlpha=0,this.depthFunc=ce,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Ru,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=_a,this.stencilZFail=_a,this.stencilZPass=_a,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const i=e[t];if(i===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const r=this[t];if(r===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}r&&r.isColor?r.set(i):r&&r.isVector3&&i&&i.isVector3?r.copy(i):this[t]=i}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(i.dispersion=this.dispersion),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(e).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapRotation!==void 0&&(i.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Y&&(i.blending=this.blending),this.side!==P&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==Ie&&(i.blendSrc=this.blendSrc),this.blendDst!==Je&&(i.blendDst=this.blendDst),this.blendEquation!==ee&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==ce&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Ru&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==_a&&(i.stencilFail=this.stencilFail),this.stencilZFail!==_a&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==_a&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function r(a){const c=[];for(const h in a){const f=a[h];delete f.metadata,c.push(f)}return c}if(t){const a=r(e.textures),c=r(e.images);a.length>0&&(i.textures=a),c.length>0&&(i.images=c)}return i}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let i=null;if(t!==null){const r=t.length;i=new Array(r);for(let a=0;a!==r;++a)i[a]=t[a].clone()}return this.clippingPlanes=i,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class Zs extends Ji{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ht(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Er,this.combine=ht,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Ss=Fv();function Fv(){const o=new ArrayBuffer(4),e=new Float32Array(o),t=new Uint32Array(o),i=new Uint32Array(512),r=new Uint32Array(512);for(let f=0;f<256;++f){const p=f-127;p<-27?(i[f]=0,i[f|256]=32768,r[f]=24,r[f|256]=24):p<-14?(i[f]=1024>>-p-14,i[f|256]=1024>>-p-14|32768,r[f]=-p-1,r[f|256]=-p-1):p<=15?(i[f]=p+15<<10,i[f|256]=p+15<<10|32768,r[f]=13,r[f|256]=13):p<128?(i[f]=31744,i[f|256]=64512,r[f]=24,r[f|256]=24):(i[f]=31744,i[f|256]=64512,r[f]=13,r[f|256]=13)}const a=new Uint32Array(2048),c=new Uint32Array(64),h=new Uint32Array(64);for(let f=1;f<1024;++f){let p=f<<13,g=0;for(;!(p&8388608);)p<<=1,g-=8388608;p&=-8388609,g+=947912704,a[f]=p|g}for(let f=1024;f<2048;++f)a[f]=939524096+(f-1024<<13);for(let f=1;f<31;++f)c[f]=f<<23;c[31]=1199570944,c[32]=2147483648;for(let f=33;f<63;++f)c[f]=2147483648+(f-32<<23);c[63]=3347054592;for(let f=1;f<64;++f)f!==32&&(h[f]=1024);return{floatView:e,uint32View:t,baseTable:i,shiftTable:r,mantissaTable:a,exponentTable:c,offsetTable:h}}function pr(o){Math.abs(o)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),o=bn(o,-65504,65504),Ss.floatView[0]=o;const e=Ss.uint32View[0],t=e>>23&511;return Ss.baseTable[t]+((e&8388607)>>Ss.shiftTable[t])}function Pc(o){const e=o>>10;return Ss.uint32View[0]=Ss.mantissaTable[Ss.offsetTable[e]+(o&1023)]+Ss.exponentTable[e],Ss.floatView[0]}const Ov={toHalfFloat:pr,fromHalfFloat:Pc},Pi=new J,Fl=new et;class hi{constructor(e,t,i=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=i,this.usage=Ec,this.updateRanges=[],this.gpuType=_i,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,i){e*=this.itemSize,i*=t.itemSize;for(let r=0,a=this.itemSize;r<a;r++)this.array[e+r]=t.array[i+r];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,i=this.count;t<i;t++)Fl.fromBufferAttribute(this,t),Fl.applyMatrix3(e),this.setXY(t,Fl.x,Fl.y);else if(this.itemSize===3)for(let t=0,i=this.count;t<i;t++)Pi.fromBufferAttribute(this,t),Pi.applyMatrix3(e),this.setXYZ(t,Pi.x,Pi.y,Pi.z);return this}applyMatrix4(e){for(let t=0,i=this.count;t<i;t++)Pi.fromBufferAttribute(this,t),Pi.applyMatrix4(e),this.setXYZ(t,Pi.x,Pi.y,Pi.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)Pi.fromBufferAttribute(this,t),Pi.applyNormalMatrix(e),this.setXYZ(t,Pi.x,Pi.y,Pi.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)Pi.fromBufferAttribute(this,t),Pi.transformDirection(e),this.setXYZ(t,Pi.x,Pi.y,Pi.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let i=this.array[e*this.itemSize+t];return this.normalized&&(i=rr(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=Rn(i,this.array)),this.array[e*this.itemSize+t]=i,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=rr(t,this.array)),t}setX(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=rr(t,this.array)),t}setY(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=rr(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=rr(t,this.array)),t}setW(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array)),this.array[e+0]=t,this.array[e+1]=i,this}setXYZ(e,t,i,r){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=r,this}setXYZW(e,t,i,r,a){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array),a=Rn(a,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=r,this.array[e+3]=a,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Ec&&(e.usage=this.usage),e}}class Bv extends hi{constructor(e,t,i){super(new Int8Array(e),t,i)}}class zv extends hi{constructor(e,t,i){super(new Uint8Array(e),t,i)}}class Vv extends hi{constructor(e,t,i){super(new Uint8ClampedArray(e),t,i)}}class kv extends hi{constructor(e,t,i){super(new Int16Array(e),t,i)}}class Ju extends hi{constructor(e,t,i){super(new Uint16Array(e),t,i)}}class Hv extends hi{constructor(e,t,i){super(new Int32Array(e),t,i)}}class ju extends hi{constructor(e,t,i){super(new Uint32Array(e),t,i)}}class Gv extends hi{constructor(e,t,i){super(new Uint16Array(e),t,i),this.isFloat16BufferAttribute=!0}getX(e){let t=Pc(this.array[e*this.itemSize]);return this.normalized&&(t=rr(t,this.array)),t}setX(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize]=pr(t),this}getY(e){let t=Pc(this.array[e*this.itemSize+1]);return this.normalized&&(t=rr(t,this.array)),t}setY(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+1]=pr(t),this}getZ(e){let t=Pc(this.array[e*this.itemSize+2]);return this.normalized&&(t=rr(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+2]=pr(t),this}getW(e){let t=Pc(this.array[e*this.itemSize+3]);return this.normalized&&(t=rr(t,this.array)),t}setW(e,t){return this.normalized&&(t=Rn(t,this.array)),this.array[e*this.itemSize+3]=pr(t),this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array)),this.array[e+0]=pr(t),this.array[e+1]=pr(i),this}setXYZ(e,t,i,r){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array)),this.array[e+0]=pr(t),this.array[e+1]=pr(i),this.array[e+2]=pr(r),this}setXYZW(e,t,i,r,a){return e*=this.itemSize,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array),a=Rn(a,this.array)),this.array[e+0]=pr(t),this.array[e+1]=pr(i),this.array[e+2]=pr(r),this.array[e+3]=pr(a),this}}class tn extends hi{constructor(e,t,i){super(new Float32Array(e),t,i)}}let Wv=0;const Ir=new xn,Qu=new Kn,Ao=new J,br=new sr,Ic=new sr,ki=new J;class In extends os{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Wv++}),this.uuid=Mr(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(Kp(e)?ju:Ju)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,i=0){this.groups.push({start:e,count:t,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const a=new wn().getNormalMatrix(e);i.applyNormalMatrix(a),i.needsUpdate=!0}const r=this.attributes.tangent;return r!==void 0&&(r.transformDirection(e),r.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Ir.makeRotationFromQuaternion(e),this.applyMatrix4(Ir),this}rotateX(e){return Ir.makeRotationX(e),this.applyMatrix4(Ir),this}rotateY(e){return Ir.makeRotationY(e),this.applyMatrix4(Ir),this}rotateZ(e){return Ir.makeRotationZ(e),this.applyMatrix4(Ir),this}translate(e,t,i){return Ir.makeTranslation(e,t,i),this.applyMatrix4(Ir),this}scale(e,t,i){return Ir.makeScale(e,t,i),this.applyMatrix4(Ir),this}lookAt(e){return Qu.lookAt(e),Qu.updateMatrix(),this.applyMatrix4(Qu.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ao).negate(),this.translate(Ao.x,Ao.y,Ao.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const i=[];for(let r=0,a=e.length;r<a;r++){const c=e[r];i.push(c.x,c.y,c.z||0)}this.setAttribute("position",new tn(i,3))}else{const i=Math.min(e.length,t.count);for(let r=0;r<i;r++){const a=e[r];t.setXYZ(r,a.x,a.y,a.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new sr);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new J(-1/0,-1/0,-1/0),new J(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let i=0,r=t.length;i<r;i++){const a=t[i];br.setFromBufferAttribute(a),this.morphTargetsRelative?(ki.addVectors(this.boundingBox.min,br.min),this.boundingBox.expandByPoint(ki),ki.addVectors(this.boundingBox.max,br.max),this.boundingBox.expandByPoint(ki)):(this.boundingBox.expandByPoint(br.min),this.boundingBox.expandByPoint(br.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new $i);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new J,1/0);return}if(e){const i=this.boundingSphere.center;if(br.setFromBufferAttribute(e),t)for(let a=0,c=t.length;a<c;a++){const h=t[a];Ic.setFromBufferAttribute(h),this.morphTargetsRelative?(ki.addVectors(br.min,Ic.min),br.expandByPoint(ki),ki.addVectors(br.max,Ic.max),br.expandByPoint(ki)):(br.expandByPoint(Ic.min),br.expandByPoint(Ic.max))}br.getCenter(i);let r=0;for(let a=0,c=e.count;a<c;a++)ki.fromBufferAttribute(e,a),r=Math.max(r,i.distanceToSquared(ki));if(t)for(let a=0,c=t.length;a<c;a++){const h=t[a],f=this.morphTargetsRelative;for(let p=0,g=h.count;p<g;p++)ki.fromBufferAttribute(h,p),f&&(Ao.fromBufferAttribute(e,p),ki.add(Ao)),r=Math.max(r,i.distanceToSquared(ki))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=t.position,r=t.normal,a=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new hi(new Float32Array(4*i.count),4));const c=this.getAttribute("tangent"),h=[],f=[];for(let ne=0;ne<i.count;ne++)h[ne]=new J,f[ne]=new J;const p=new J,g=new J,_=new J,x=new et,y=new et,E=new et,w=new J,b=new J;function S(ne,H,z){p.fromBufferAttribute(i,ne),g.fromBufferAttribute(i,H),_.fromBufferAttribute(i,z),x.fromBufferAttribute(a,ne),y.fromBufferAttribute(a,H),E.fromBufferAttribute(a,z),g.sub(p),_.sub(p),y.sub(x),E.sub(x);const re=1/(y.x*E.y-E.x*y.y);isFinite(re)&&(w.copy(g).multiplyScalar(E.y).addScaledVector(_,-y.y).multiplyScalar(re),b.copy(_).multiplyScalar(y.x).addScaledVector(g,-E.x).multiplyScalar(re),h[ne].add(w),h[H].add(w),h[z].add(w),f[ne].add(b),f[H].add(b),f[z].add(b))}let O=this.groups;O.length===0&&(O=[{start:0,count:e.count}]);for(let ne=0,H=O.length;ne<H;++ne){const z=O[ne],re=z.start,De=z.count;for(let Ae=re,He=re+De;Ae<He;Ae+=3)S(e.getX(Ae+0),e.getX(Ae+1),e.getX(Ae+2))}const N=new J,D=new J,te=new J,$=new J;function j(ne){te.fromBufferAttribute(r,ne),$.copy(te);const H=h[ne];N.copy(H),N.sub(te.multiplyScalar(te.dot(H))).normalize(),D.crossVectors($,H);const re=D.dot(f[ne])<0?-1:1;c.setXYZW(ne,N.x,N.y,N.z,re)}for(let ne=0,H=O.length;ne<H;++ne){const z=O[ne],re=z.start,De=z.count;for(let Ae=re,He=re+De;Ae<He;Ae+=3)j(e.getX(Ae+0)),j(e.getX(Ae+1)),j(e.getX(Ae+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new hi(new Float32Array(t.count*3),3),this.setAttribute("normal",i);else for(let x=0,y=i.count;x<y;x++)i.setXYZ(x,0,0,0);const r=new J,a=new J,c=new J,h=new J,f=new J,p=new J,g=new J,_=new J;if(e)for(let x=0,y=e.count;x<y;x+=3){const E=e.getX(x+0),w=e.getX(x+1),b=e.getX(x+2);r.fromBufferAttribute(t,E),a.fromBufferAttribute(t,w),c.fromBufferAttribute(t,b),g.subVectors(c,a),_.subVectors(r,a),g.cross(_),h.fromBufferAttribute(i,E),f.fromBufferAttribute(i,w),p.fromBufferAttribute(i,b),h.add(g),f.add(g),p.add(g),i.setXYZ(E,h.x,h.y,h.z),i.setXYZ(w,f.x,f.y,f.z),i.setXYZ(b,p.x,p.y,p.z)}else for(let x=0,y=t.count;x<y;x+=3)r.fromBufferAttribute(t,x+0),a.fromBufferAttribute(t,x+1),c.fromBufferAttribute(t,x+2),g.subVectors(c,a),_.subVectors(r,a),g.cross(_),i.setXYZ(x+0,g.x,g.y,g.z),i.setXYZ(x+1,g.x,g.y,g.z),i.setXYZ(x+2,g.x,g.y,g.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,i=e.count;t<i;t++)ki.fromBufferAttribute(e,t),ki.normalize(),e.setXYZ(t,ki.x,ki.y,ki.z)}toNonIndexed(){function e(h,f){const p=h.array,g=h.itemSize,_=h.normalized,x=new p.constructor(f.length*g);let y=0,E=0;for(let w=0,b=f.length;w<b;w++){h.isInterleavedBufferAttribute?y=f[w]*h.data.stride+h.offset:y=f[w]*g;for(let S=0;S<g;S++)x[E++]=p[y++]}return new hi(x,g,_)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new In,i=this.index.array,r=this.attributes;for(const h in r){const f=r[h],p=e(f,i);t.setAttribute(h,p)}const a=this.morphAttributes;for(const h in a){const f=[],p=a[h];for(let g=0,_=p.length;g<_;g++){const x=p[g],y=e(x,i);f.push(y)}t.morphAttributes[h]=f}t.morphTargetsRelative=this.morphTargetsRelative;const c=this.groups;for(let h=0,f=c.length;h<f;h++){const p=c[h];t.addGroup(p.start,p.count,p.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const f=this.parameters;for(const p in f)f[p]!==void 0&&(e[p]=f[p]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const i=this.attributes;for(const f in i){const p=i[f];e.data.attributes[f]=p.toJSON(e.data)}const r={};let a=!1;for(const f in this.morphAttributes){const p=this.morphAttributes[f],g=[];for(let _=0,x=p.length;_<x;_++){const y=p[_];g.push(y.toJSON(e.data))}g.length>0&&(r[f]=g,a=!0)}a&&(e.data.morphAttributes=r,e.data.morphTargetsRelative=this.morphTargetsRelative);const c=this.groups;c.length>0&&(e.data.groups=JSON.parse(JSON.stringify(c)));const h=this.boundingSphere;return h!==null&&(e.data.boundingSphere={center:h.center.toArray(),radius:h.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const i=e.index;i!==null&&this.setIndex(i.clone(t));const r=e.attributes;for(const p in r){const g=r[p];this.setAttribute(p,g.clone(t))}const a=e.morphAttributes;for(const p in a){const g=[],_=a[p];for(let x=0,y=_.length;x<y;x++)g.push(_[x].clone(t));this.morphAttributes[p]=g}this.morphTargetsRelative=e.morphTargetsRelative;const c=e.groups;for(let p=0,g=c.length;p<g;p++){const _=c[p];this.addGroup(_.start,_.count,_.materialIndex)}const h=e.boundingBox;h!==null&&(this.boundingBox=h.clone());const f=e.boundingSphere;return f!==null&&(this.boundingSphere=f.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const fm=new xn,Sa=new yo,Ol=new $i,pm=new J,Bl=new J,zl=new J,Vl=new J,ed=new J,kl=new J,mm=new J,Hl=new J;class Ii extends Kn{constructor(e=new In,t=new Zs){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const r=t[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,c=r.length;a<c;a++){const h=r[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}getVertexPosition(e,t){const i=this.geometry,r=i.attributes.position,a=i.morphAttributes.position,c=i.morphTargetsRelative;t.fromBufferAttribute(r,e);const h=this.morphTargetInfluences;if(a&&h){kl.set(0,0,0);for(let f=0,p=a.length;f<p;f++){const g=h[f],_=a[f];g!==0&&(ed.fromBufferAttribute(_,e),c?kl.addScaledVector(ed,g):kl.addScaledVector(ed.sub(t),g))}t.add(kl)}return t}raycast(e,t){const i=this.geometry,r=this.material,a=this.matrixWorld;r!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),Ol.copy(i.boundingSphere),Ol.applyMatrix4(a),Sa.copy(e.ray).recast(e.near),!(Ol.containsPoint(Sa.origin)===!1&&(Sa.intersectSphere(Ol,pm)===null||Sa.origin.distanceToSquared(pm)>(e.far-e.near)**2))&&(fm.copy(a).invert(),Sa.copy(e.ray).applyMatrix4(fm),!(i.boundingBox!==null&&Sa.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(e,t,Sa)))}_computeIntersections(e,t,i){let r;const a=this.geometry,c=this.material,h=a.index,f=a.attributes.position,p=a.attributes.uv,g=a.attributes.uv1,_=a.attributes.normal,x=a.groups,y=a.drawRange;if(h!==null)if(Array.isArray(c))for(let E=0,w=x.length;E<w;E++){const b=x[E],S=c[b.materialIndex],O=Math.max(b.start,y.start),N=Math.min(h.count,Math.min(b.start+b.count,y.start+y.count));for(let D=O,te=N;D<te;D+=3){const $=h.getX(D),j=h.getX(D+1),ne=h.getX(D+2);r=Gl(this,S,e,i,p,g,_,$,j,ne),r&&(r.faceIndex=Math.floor(D/3),r.face.materialIndex=b.materialIndex,t.push(r))}}else{const E=Math.max(0,y.start),w=Math.min(h.count,y.start+y.count);for(let b=E,S=w;b<S;b+=3){const O=h.getX(b),N=h.getX(b+1),D=h.getX(b+2);r=Gl(this,c,e,i,p,g,_,O,N,D),r&&(r.faceIndex=Math.floor(b/3),t.push(r))}}else if(f!==void 0)if(Array.isArray(c))for(let E=0,w=x.length;E<w;E++){const b=x[E],S=c[b.materialIndex],O=Math.max(b.start,y.start),N=Math.min(f.count,Math.min(b.start+b.count,y.start+y.count));for(let D=O,te=N;D<te;D+=3){const $=D,j=D+1,ne=D+2;r=Gl(this,S,e,i,p,g,_,$,j,ne),r&&(r.faceIndex=Math.floor(D/3),r.face.materialIndex=b.materialIndex,t.push(r))}}else{const E=Math.max(0,y.start),w=Math.min(f.count,y.start+y.count);for(let b=E,S=w;b<S;b+=3){const O=b,N=b+1,D=b+2;r=Gl(this,c,e,i,p,g,_,O,N,D),r&&(r.faceIndex=Math.floor(b/3),t.push(r))}}}}function Xv(o,e,t,i,r,a,c,h){let f;if(e.side===I?f=i.intersectTriangle(c,a,r,!0,h):f=i.intersectTriangle(r,a,c,e.side===P,h),f===null)return null;Hl.copy(h),Hl.applyMatrix4(o.matrixWorld);const p=t.ray.origin.distanceTo(Hl);return p<t.near||p>t.far?null:{distance:p,point:Hl.clone(),object:o}}function Gl(o,e,t,i,r,a,c,h,f,p){o.getVertexPosition(h,Bl),o.getVertexPosition(f,zl),o.getVertexPosition(p,Vl);const g=Xv(o,e,t,i,Bl,zl,Vl,mm);if(g){const _=new J;fr.getBarycoord(mm,Bl,zl,Vl,_),r&&(g.uv=fr.getInterpolatedAttribute(r,h,f,p,_,new et)),a&&(g.uv1=fr.getInterpolatedAttribute(a,h,f,p,_,new et)),c&&(g.normal=fr.getInterpolatedAttribute(c,h,f,p,_,new J),g.normal.dot(i.direction)>0&&g.normal.multiplyScalar(-1));const x={a:h,b:f,c:p,normal:new J,materialIndex:0};fr.getNormal(Bl,zl,Vl,x.normal),g.face=x,g.barycoord=_}return g}class Ea extends In{constructor(e=1,t=1,i=1,r=1,a=1,c=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:i,widthSegments:r,heightSegments:a,depthSegments:c};const h=this;r=Math.floor(r),a=Math.floor(a),c=Math.floor(c);const f=[],p=[],g=[],_=[];let x=0,y=0;E("z","y","x",-1,-1,i,t,e,c,a,0),E("z","y","x",1,-1,i,t,-e,c,a,1),E("x","z","y",1,1,e,i,t,r,c,2),E("x","z","y",1,-1,e,i,-t,r,c,3),E("x","y","z",1,-1,e,t,i,r,a,4),E("x","y","z",-1,-1,e,t,-i,r,a,5),this.setIndex(f),this.setAttribute("position",new tn(p,3)),this.setAttribute("normal",new tn(g,3)),this.setAttribute("uv",new tn(_,2));function E(w,b,S,O,N,D,te,$,j,ne,H){const z=D/j,re=te/ne,De=D/2,Ae=te/2,He=$/2,Ke=j+1,ke=ne+1;let st=0,Be=0;const It=new J;for(let Xt=0;Xt<ke;Xt++){const en=Xt*re-Ae;for(let Pn=0;Pn<Ke;Pn++){const ri=Pn*z-De;It[w]=ri*O,It[b]=en*N,It[S]=He,p.push(It.x,It.y,It.z),It[w]=0,It[b]=0,It[S]=$>0?1:-1,g.push(It.x,It.y,It.z),_.push(Pn/j),_.push(1-Xt/ne),st+=1}}for(let Xt=0;Xt<ne;Xt++)for(let en=0;en<j;en++){const Pn=x+en+Ke*Xt,ri=x+en+Ke*(Xt+1),$e=x+(en+1)+Ke*(Xt+1),vt=x+(en+1)+Ke*Xt;f.push(Pn,ri,vt),f.push(ri,$e,vt),Be+=6}h.addGroup(y,Be,H),y+=Be,x+=st}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ea(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function wo(o){const e={};for(const t in o){e[t]={};for(const i in o[t]){const r=o[t][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][i]=null):e[t][i]=r.clone():Array.isArray(r)?e[t][i]=r.slice():e[t][i]=r}}return e}function ar(o){const e={};for(let t=0;t<o.length;t++){const i=wo(o[t]);for(const r in i)e[r]=i[r]}return e}function qv(o){const e=[];for(let t=0;t<o.length;t++)e.push(o[t].clone());return e}function gm(o){const e=o.getRenderTarget();return e===null?o.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:Xn.workingColorSpace}const _m={clone:wo,merge:ar};var Yv=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Zv=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class qr extends Ji{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=Yv,this.fragmentShader=Zv,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=wo(e.uniforms),this.uniformsGroups=qv(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const r in this.uniforms){const c=this.uniforms[r].value;c&&c.isTexture?t.uniforms[r]={type:"t",value:c.toJSON(e).uuid}:c&&c.isColor?t.uniforms[r]={type:"c",value:c.getHex()}:c&&c.isVector2?t.uniforms[r]={type:"v2",value:c.toArray()}:c&&c.isVector3?t.uniforms[r]={type:"v3",value:c.toArray()}:c&&c.isVector4?t.uniforms[r]={type:"v4",value:c.toArray()}:c&&c.isMatrix3?t.uniforms[r]={type:"m3",value:c.toArray()}:c&&c.isMatrix4?t.uniforms[r]={type:"m4",value:c.toArray()}:t.uniforms[r]={value:c}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const i={};for(const r in this.extensions)this.extensions[r]===!0&&(i[r]=!0);return Object.keys(i).length>0&&(t.extensions=i),t}}class Wl extends Kn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new xn,this.projectionMatrix=new xn,this.projectionMatrixInverse=new xn,this.coordinateSystem=as}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const $s=new J,xm=new et,vm=new et;class Xi extends Wl{constructor(e=50,t=1,i=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=i,this.far=r,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=uo*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(xa*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return uo*2*Math.atan(Math.tan(xa*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,i){$s.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set($s.x,$s.y).multiplyScalar(-e/$s.z),$s.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set($s.x,$s.y).multiplyScalar(-e/$s.z)}getViewSize(e,t){return this.getViewBounds(e,xm,vm),t.subVectors(vm,xm)}setViewOffset(e,t,i,r,a,c){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=r,this.view.width=a,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(xa*.5*this.fov)/this.zoom,i=2*t,r=this.aspect*i,a=-.5*r;const c=this.view;if(this.view!==null&&this.view.enabled){const f=c.fullWidth,p=c.fullHeight;a+=c.offsetX*r/f,t-=c.offsetY*i/p,r*=c.width/f,i*=c.height/p}const h=this.filmOffset;h!==0&&(a+=e*h/this.getFilmWidth()),this.projectionMatrix.makePerspective(a,a+r,t,t-i,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Co=-90,Ro=1;class ym extends Kn{constructor(e,t,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const r=new Xi(Co,Ro,e,t);r.layers=this.layers,this.add(r);const a=new Xi(Co,Ro,e,t);a.layers=this.layers,this.add(a);const c=new Xi(Co,Ro,e,t);c.layers=this.layers,this.add(c);const h=new Xi(Co,Ro,e,t);h.layers=this.layers,this.add(h);const f=new Xi(Co,Ro,e,t);f.layers=this.layers,this.add(f);const p=new Xi(Co,Ro,e,t);p.layers=this.layers,this.add(p)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[i,r,a,c,h,f]=t;for(const p of t)this.remove(p);if(e===as)i.up.set(0,1,0),i.lookAt(1,0,0),r.up.set(0,1,0),r.lookAt(-1,0,0),a.up.set(0,0,-1),a.lookAt(0,1,0),c.up.set(0,0,1),c.lookAt(0,-1,0),h.up.set(0,1,0),h.lookAt(0,0,1),f.up.set(0,1,0),f.lookAt(0,0,-1);else if(e===bc)i.up.set(0,-1,0),i.lookAt(-1,0,0),r.up.set(0,-1,0),r.lookAt(1,0,0),a.up.set(0,0,1),a.lookAt(0,1,0),c.up.set(0,0,-1),c.lookAt(0,-1,0),h.up.set(0,-1,0),h.lookAt(0,0,1),f.up.set(0,-1,0),f.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const p of t)this.add(p),p.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:r}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[a,c,h,f,p,g]=this.children,_=e.getRenderTarget(),x=e.getActiveCubeFace(),y=e.getActiveMipmapLevel(),E=e.xr.enabled;e.xr.enabled=!1;const w=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0,r),e.render(t,a),e.setRenderTarget(i,1,r),e.render(t,c),e.setRenderTarget(i,2,r),e.render(t,h),e.setRenderTarget(i,3,r),e.render(t,f),e.setRenderTarget(i,4,r),e.render(t,p),i.texture.generateMipmaps=w,e.setRenderTarget(i,5,r),e.render(t,g),e.setRenderTarget(_,x,y),e.xr.enabled=E,i.texture.needsPMREMUpdate=!0}}class Lc extends Ei{constructor(e,t,i,r,a,c,h,f,p,g){e=e!==void 0?e:[],t=t!==void 0?t:Pe,super(e,t,i,r,a,c,h,f,p,g),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Mm extends Hr{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const i={width:e,height:e,depth:1},r=[i,i,i,i,i,i];this.texture=new Lc(r,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:ae}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},r=new Ea(5,5,5),a=new qr({name:"CubemapFromEquirect",uniforms:wo(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:I,blending:W});a.uniforms.tEquirect.value=t;const c=new Ii(r,a),h=t.minFilter;return t.minFilter===Xe&&(t.minFilter=ae),new ym(1,10,this).update(e,c),t.minFilter=h,c.geometry.dispose(),c.material.dispose(),this}clear(e,t,i,r){const a=e.getRenderTarget();for(let c=0;c<6;c++)e.setRenderTarget(this,c),e.clear(t,i,r);e.setRenderTarget(a)}}class Xl{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Ht(e),this.density=t}clone(){return new Xl(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class ql{constructor(e,t=1,i=1e3){this.isFog=!0,this.name="",this.color=new Ht(e),this.near=t,this.far=i}clone(){return new ql(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Sm extends Kn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Er,this.environmentIntensity=1,this.environmentRotation=new Er,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}class Yl{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Ec,this.updateRanges=[],this.version=0,this.uuid=Mr()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,i){e*=this.stride,i*=t.stride;for(let r=0,a=this.stride;r<a;r++)this.array[e+r]=t.array[i+r];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Mr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(t,this.stride);return i.setUsage(this.usage),i}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Mr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const or=new J;class ba{constructor(e,t,i,r=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=i,this.normalized=r}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,i=this.data.count;t<i;t++)or.fromBufferAttribute(this,t),or.applyMatrix4(e),this.setXYZ(t,or.x,or.y,or.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)or.fromBufferAttribute(this,t),or.applyNormalMatrix(e),this.setXYZ(t,or.x,or.y,or.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)or.fromBufferAttribute(this,t),or.transformDirection(e),this.setXYZ(t,or.x,or.y,or.z);return this}getComponent(e,t){let i=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(i=rr(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=Rn(i,this.array)),this.data.array[e*this.data.stride+this.offset+t]=i,this}setX(e,t){return this.normalized&&(t=Rn(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=Rn(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=Rn(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=Rn(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=rr(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=rr(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=rr(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=rr(t,this.array)),t}setXY(e,t,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this}setXYZ(e,t,i,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=r,this}setXYZW(e,t,i,r,a){return e=e*this.data.stride+this.offset,this.normalized&&(t=Rn(t,this.array),i=Rn(i,this.array),r=Rn(r,this.array),a=Rn(a,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=r,this.data.array[e+3]=a,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let a=0;a<this.itemSize;a++)t.push(this.data.array[r+a])}return new hi(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new ba(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let a=0;a<this.itemSize;a++)t.push(this.data.array[r+a])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class td extends Ji{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Ht(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let Po;const Dc=new J,Io=new J,Lo=new J,Do=new et,Uc=new et,Em=new xn,Zl=new J,Nc=new J,$l=new J,bm=new et,nd=new et,Tm=new et;class Am extends Kn{constructor(e=new td){if(super(),this.isSprite=!0,this.type="Sprite",Po===void 0){Po=new In;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new Yl(t,5);Po.setIndex([0,1,2,0,2,3]),Po.setAttribute("position",new ba(i,3,0,!1)),Po.setAttribute("uv",new ba(i,2,3,!1))}this.geometry=Po,this.material=e,this.center=new et(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Io.setFromMatrixScale(this.matrixWorld),Em.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Lo.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Io.multiplyScalar(-Lo.z);const i=this.material.rotation;let r,a;i!==0&&(a=Math.cos(i),r=Math.sin(i));const c=this.center;Kl(Zl.set(-.5,-.5,0),Lo,c,Io,r,a),Kl(Nc.set(.5,-.5,0),Lo,c,Io,r,a),Kl($l.set(.5,.5,0),Lo,c,Io,r,a),bm.set(0,0),nd.set(1,0),Tm.set(1,1);let h=e.ray.intersectTriangle(Zl,Nc,$l,!1,Dc);if(h===null&&(Kl(Nc.set(-.5,.5,0),Lo,c,Io,r,a),nd.set(0,1),h=e.ray.intersectTriangle(Zl,$l,Nc,!1,Dc),h===null))return;const f=e.ray.origin.distanceTo(Dc);f<e.near||f>e.far||t.push({distance:f,point:Dc.clone(),uv:fr.getInterpolation(Dc,Zl,Nc,$l,bm,nd,Tm,new et),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function Kl(o,e,t,i,r,a){Do.subVectors(o,t).addScalar(.5).multiply(i),r!==void 0?(Uc.x=a*Do.x-r*Do.y,Uc.y=r*Do.x+a*Do.y):Uc.copy(Do),o.copy(e),o.x+=Uc.x,o.y+=Uc.y,o.applyMatrix4(Em)}const Jl=new J,wm=new J;class Cm extends Kn{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let i=0,r=t.length;i<r;i++){const a=t[i];this.addLevel(a.object.clone(),a.distance,a.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0,i=0){t=Math.abs(t);const r=this.levels;let a;for(a=0;a<r.length&&!(t<r[a].distance);a++);return r.splice(a,0,{distance:t,hysteresis:i,object:e}),this.add(e),this}removeLevel(e){const t=this.levels;for(let i=0;i<t.length;i++)if(t[i].distance===e){const r=t.splice(i,1);return this.remove(r[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let i,r;for(i=1,r=t.length;i<r;i++){let a=t[i].distance;if(t[i].object.visible&&(a-=a*t[i].hysteresis),e<a)break}return t[i-1].object}return null}raycast(e,t){if(this.levels.length>0){Jl.setFromMatrixPosition(this.matrixWorld);const r=e.ray.origin.distanceTo(Jl);this.getObjectForDistance(r).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){Jl.setFromMatrixPosition(e.matrixWorld),wm.setFromMatrixPosition(this.matrixWorld);const i=Jl.distanceTo(wm)/e.zoom;t[0].object.visible=!0;let r,a;for(r=1,a=t.length;r<a;r++){let c=t[r].distance;if(t[r].object.visible&&(c-=c*t[r].hysteresis),i>=c)t[r-1].object.visible=!1,t[r].object.visible=!0;else break}for(this._currentLevel=r-1;r<a;r++)t[r].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const i=this.levels;for(let r=0,a=i.length;r<a;r++){const c=i[r];t.object.levels.push({object:c.object.uuid,distance:c.distance,hysteresis:c.hysteresis})}return t}}const Rm=new J,Pm=new $n,Im=new $n,$v=new J,Lm=new xn,jl=new J,id=new $i,Dm=new xn,rd=new yo;class Um extends Ii{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=ue,this.bindMatrix=new xn,this.bindMatrixInverse=new xn,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new sr),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,jl),this.boundingBox.expandByPoint(jl)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new $i),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,jl),this.boundingSphere.expandByPoint(jl)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const i=this.material,r=this.matrixWorld;i!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),id.copy(this.boundingSphere),id.applyMatrix4(r),e.ray.intersectsSphere(id)!==!1&&(Dm.copy(r).invert(),rd.copy(e.ray).applyMatrix4(Dm),!(this.boundingBox!==null&&rd.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,rd)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new $n,t=this.geometry.attributes.skinWeight;for(let i=0,r=t.count;i<r;i++){e.fromBufferAttribute(t,i);const a=1/e.manhattanLength();a!==1/0?e.multiplyScalar(a):e.set(1,0,0,0),t.setXYZW(i,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===ue?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===Le?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const i=this.skeleton,r=this.geometry;Pm.fromBufferAttribute(r.attributes.skinIndex,e),Im.fromBufferAttribute(r.attributes.skinWeight,e),Rm.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let a=0;a<4;a++){const c=Im.getComponent(a);if(c!==0){const h=Pm.getComponent(a);Lm.multiplyMatrices(i.bones[h].matrixWorld,i.boneInverses[h]),t.addScaledVector($v.copy(Rm).applyMatrix4(Lm),c)}}return t.applyMatrix4(this.bindMatrixInverse)}}class sd extends Kn{constructor(){super(),this.isBone=!0,this.type="Bone"}}class cs extends Ei{constructor(e=null,t=1,i=1,r,a,c,h,f,p=Nt,g=Nt,_,x){super(null,c,h,f,p,g,r,a,_,x),this.isDataTexture=!0,this.image={data:e,width:t,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Nm=new xn,Kv=new xn;class Ql{constructor(e=[],t=[]){this.uuid=Mr(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let i=0,r=this.bones.length;i<r;i++)this.boneInverses.push(new xn)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const i=new xn;this.bones[e]&&i.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(i)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&i.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&(i.parent&&i.parent.isBone?(i.matrix.copy(i.parent.matrixWorld).invert(),i.matrix.multiply(i.matrixWorld)):i.matrix.copy(i.matrixWorld),i.matrix.decompose(i.position,i.quaternion,i.scale))}}update(){const e=this.bones,t=this.boneInverses,i=this.boneMatrices,r=this.boneTexture;for(let a=0,c=e.length;a<c;a++){const h=e[a]?e[a].matrixWorld:Kv;Nm.multiplyMatrices(h,t[a]),Nm.toArray(i,a*16)}r!==null&&(r.needsUpdate=!0)}clone(){return new Ql(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const i=new cs(t,e,e,zi,_i);return i.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=i,this}getBoneByName(e){for(let t=0,i=this.bones.length;t<i;t++){const r=this.bones[t];if(r.name===e)return r}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let i=0,r=e.bones.length;i<r;i++){const a=e.bones[i];let c=t[a];c===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",a),c=new sd),this.bones.push(c),this.boneInverses.push(new xn().fromArray(e.boneInverses[i]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,i=this.boneInverses;for(let r=0,a=t.length;r<a;r++){const c=t[r];e.bones.push(c.uuid);const h=i[r];e.boneInverses.push(h.toArray())}return e}}class Uo extends hi{constructor(e,t,i,r=1){super(e,t,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=r}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const No=new xn,Fm=new xn,eh=[],Om=new sr,Jv=new xn,Fc=new Ii,Oc=new $i;class Bm extends Ii{constructor(e,t,i){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new Uo(new Float32Array(i*16),16),this.instanceColor=null,this.morphTexture=null,this.count=i,this.boundingBox=null,this.boundingSphere=null;for(let r=0;r<i;r++)this.setMatrixAt(r,Jv)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new sr),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,No),Om.copy(e.boundingBox).applyMatrix4(No),this.boundingBox.union(Om)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new $i),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,No),Oc.copy(e.boundingSphere).applyMatrix4(No),this.boundingSphere.union(Oc)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const i=t.morphTargetInfluences,r=this.morphTexture.source.data.data,a=i.length+1,c=e*a+1;for(let h=0;h<i.length;h++)i[h]=r[c+h]}raycast(e,t){const i=this.matrixWorld,r=this.count;if(Fc.geometry=this.geometry,Fc.material=this.material,Fc.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Oc.copy(this.boundingSphere),Oc.applyMatrix4(i),e.ray.intersectsSphere(Oc)!==!1))for(let a=0;a<r;a++){this.getMatrixAt(a,No),Fm.multiplyMatrices(i,No),Fc.matrixWorld=Fm,Fc.raycast(e,eh);for(let c=0,h=eh.length;c<h;c++){const f=eh[c];f.instanceId=a,f.object=this,t.push(f)}eh.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new Uo(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const i=t.morphTargetInfluences,r=i.length+1;this.morphTexture===null&&(this.morphTexture=new cs(new Float32Array(r*this.count),r,this.count,lo,_i));const a=this.morphTexture.source.data.data;let c=0;for(let p=0;p<i.length;p++)c+=i[p];const h=this.geometry.morphTargetsRelative?1:1-c,f=r*e;a[f]=h,a.set(i,f+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null),this}}const ad=new J,jv=new J,Qv=new wn;class Ks{constructor(e=new J(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,i,r){return this.normal.set(e,t,i),this.constant=r,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,i){const r=ad.subVectors(i,t).cross(jv.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(r,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const i=e.delta(ad),r=this.normal.dot(i);if(r===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const a=-(e.start.dot(this.normal)+this.constant)/r;return a<0||a>1?null:t.copy(e.start).addScaledVector(i,a)}intersectsLine(e){const t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const i=t||Qv.getNormalMatrix(e),r=this.coplanarPoint(ad).applyMatrix4(e),a=this.normal.applyMatrix3(i).normalize();return this.constant=-r.dot(a),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Ta=new $i,th=new J;class Bc{constructor(e=new Ks,t=new Ks,i=new Ks,r=new Ks,a=new Ks,c=new Ks){this.planes=[e,t,i,r,a,c]}set(e,t,i,r,a,c){const h=this.planes;return h[0].copy(e),h[1].copy(t),h[2].copy(i),h[3].copy(r),h[4].copy(a),h[5].copy(c),this}copy(e){const t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e,t=as){const i=this.planes,r=e.elements,a=r[0],c=r[1],h=r[2],f=r[3],p=r[4],g=r[5],_=r[6],x=r[7],y=r[8],E=r[9],w=r[10],b=r[11],S=r[12],O=r[13],N=r[14],D=r[15];if(i[0].setComponents(f-a,x-p,b-y,D-S).normalize(),i[1].setComponents(f+a,x+p,b+y,D+S).normalize(),i[2].setComponents(f+c,x+g,b+E,D+O).normalize(),i[3].setComponents(f-c,x-g,b-E,D-O).normalize(),i[4].setComponents(f-h,x-_,b-w,D-N).normalize(),t===as)i[5].setComponents(f+h,x+_,b+w,D+N).normalize();else if(t===bc)i[5].setComponents(h,_,w,N).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Ta.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),Ta.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Ta)}intersectsSprite(e){return Ta.center.set(0,0,0),Ta.radius=.7071067811865476,Ta.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ta)}intersectsSphere(e){const t=this.planes,i=e.center,r=-e.radius;for(let a=0;a<6;a++)if(t[a].distanceToPoint(i)<r)return!1;return!0}intersectsBox(e){const t=this.planes;for(let i=0;i<6;i++){const r=t[i];if(th.x=r.normal.x>0?e.max.x:e.min.x,th.y=r.normal.y>0?e.max.y:e.min.y,th.z=r.normal.z>0?e.max.z:e.min.z,r.distanceToPoint(th)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let i=0;i<6;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function od(o,e){return o-e}function ey(o,e){return o.z-e.z}function ty(o,e){return e.z-o.z}class ny{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,t,i,r){const a=this.pool,c=this.list;this.index>=a.length&&a.push({start:-1,count:-1,z:-1,index:-1});const h=a[this.index];c.push(h),this.index++,h.start=e,h.count=t,h.z=i,h.index=r}reset(){this.list.length=0,this.index=0}}const mr=new xn,iy=new Ht(1,1,1),cd=new Bc,nh=new sr,Aa=new $i,zc=new J,zm=new J,ry=new J,ld=new ny,ji=new Ii,ih=[];function sy(o,e,t=0){const i=e.itemSize;if(o.isInterleavedBufferAttribute||o.array.constructor!==e.array.constructor){const r=o.count;for(let a=0;a<r;a++)for(let c=0;c<i;c++)e.setComponent(a+t,c,o.getComponent(a,c))}else e.array.set(o.array,t*i);e.needsUpdate=!0}function wa(o,e){if(o.constructor!==e.constructor){const t=Math.min(o.length,e.length);for(let i=0;i<t;i++)e[i]=o[i]}else{const t=Math.min(o.length,e.length);e.set(new o.constructor(o.buffer,0,t))}}class Vm extends Ii{get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}constructor(e,t,i=t*2,r){super(new In,r),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=e,this._maxVertexCount=t,this._maxIndexCount=i,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let e=Math.sqrt(this._maxInstanceCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4),i=new cs(t,e,e,zi,_i);this._matricesTexture=i}_initIndirectTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Uint32Array(e*e),i=new cs(t,e,e,fa,wi);this._indirectTexture=i}_initColorsTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Float32Array(e*e*4).fill(1),i=new cs(t,e,e,zi,_i);i.colorSpace=Xn.workingColorSpace,this._colorsTexture=i}_initializeGeometry(e){const t=this.geometry,i=this._maxVertexCount,r=this._maxIndexCount;if(this._geometryInitialized===!1){for(const a in e.attributes){const c=e.getAttribute(a),{array:h,itemSize:f,normalized:p}=c,g=new h.constructor(i*f),_=new hi(g,f,p);t.setAttribute(a,_)}if(e.getIndex()!==null){const a=i>65535?new Uint32Array(r):new Uint16Array(r);t.setIndex(new hi(a,1))}this._geometryInitialized=!0}}_validateGeometry(e){const t=this.geometry;if(!!e.getIndex()!=!!t.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const i in t.attributes){if(!e.hasAttribute(i))throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);const r=e.getAttribute(i),a=t.getAttribute(i);if(r.itemSize!==a.itemSize||r.normalized!==a.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(e){const t=this._instanceInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`)}validateGeometryId(e){const t=this._geometryInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`)}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new sr);const e=this.boundingBox,t=this._instanceInfo;e.makeEmpty();for(let i=0,r=t.length;i<r;i++){if(t[i].active===!1)continue;const a=t[i].geometryIndex;this.getMatrixAt(i,mr),this.getBoundingBoxAt(a,nh).applyMatrix4(mr),e.union(nh)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new $i);const e=this.boundingSphere,t=this._instanceInfo;e.makeEmpty();for(let i=0,r=t.length;i<r;i++){if(t[i].active===!1)continue;const a=t[i].geometryIndex;this.getMatrixAt(i,mr),this.getBoundingSphereAt(a,Aa).applyMatrix4(mr),e.union(Aa)}}addInstance(e){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const i={visible:!0,active:!0,geometryIndex:e};let r=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(od),r=this._availableInstanceIds.shift(),this._instanceInfo[r]=i):(r=this._instanceInfo.length,this._instanceInfo.push(i));const a=this._matricesTexture;mr.identity().toArray(a.image.data,r*16),a.needsUpdate=!0;const c=this._colorsTexture;return c&&(iy.toArray(c.image.data,r*4),c.needsUpdate=!0),this._visibilityChanged=!0,r}addGeometry(e,t=-1,i=-1){this._initializeGeometry(e),this._validateGeometry(e);const r={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},a=this._geometryInfo;r.vertexStart=this._nextVertexStart,r.reservedVertexCount=t===-1?e.getAttribute("position").count:t;const c=e.getIndex();if(c!==null&&(r.indexStart=this._nextIndexStart,r.reservedIndexCount=i===-1?c.count:i),r.indexStart!==-1&&r.indexStart+r.reservedIndexCount>this._maxIndexCount||r.vertexStart+r.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let f;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(od),f=this._availableGeometryIds.shift(),a[f]=r):(f=this._geometryCount,this._geometryCount++,a.push(r)),this.setGeometryAt(f,e),this._nextIndexStart=r.indexStart+r.reservedIndexCount,this._nextVertexStart=r.vertexStart+r.reservedVertexCount,f}setGeometryAt(e,t){if(e>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(t);const i=this.geometry,r=i.getIndex()!==null,a=i.getIndex(),c=t.getIndex(),h=this._geometryInfo[e];if(r&&c.count>h.reservedIndexCount||t.attributes.position.count>h.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const f=h.vertexStart,p=h.reservedVertexCount;h.vertexCount=t.getAttribute("position").count;for(const g in i.attributes){const _=t.getAttribute(g),x=i.getAttribute(g);sy(_,x,f);const y=_.itemSize;for(let E=_.count,w=p;E<w;E++){const b=f+E;for(let S=0;S<y;S++)x.setComponent(b,S,0)}x.needsUpdate=!0,x.addUpdateRange(f*y,p*y)}if(r){const g=h.indexStart,_=h.reservedIndexCount;h.indexCount=t.getIndex().count;for(let x=0;x<c.count;x++)a.setX(g+x,f+c.getX(x));for(let x=c.count,y=_;x<y;x++)a.setX(g+x,f);a.needsUpdate=!0,a.addUpdateRange(g,h.reservedIndexCount)}return h.start=r?h.indexStart:h.vertexStart,h.count=r?h.indexCount:h.vertexCount,h.boundingBox=null,t.boundingBox!==null&&(h.boundingBox=t.boundingBox.clone()),h.boundingSphere=null,t.boundingSphere!==null&&(h.boundingSphere=t.boundingSphere.clone()),this._visibilityChanged=!0,e}deleteGeometry(e){const t=this._geometryInfo;if(e>=t.length||t[e].active===!1)return this;const i=this._instanceInfo;for(let r=0,a=i.length;r<a;r++)i[r].geometryIndex===e&&this.deleteInstance(r);return t[e].active=!1,this._availableGeometryIds.push(e),this._visibilityChanged=!0,this}deleteInstance(e){return this.validateInstanceId(e),this._instanceInfo[e].active=!1,this._availableInstanceIds.push(e),this._visibilityChanged=!0,this}optimize(){let e=0,t=0;const i=this._geometryInfo,r=i.map((c,h)=>h).sort((c,h)=>i[c].vertexStart-i[h].vertexStart),a=this.geometry;for(let c=0,h=i.length;c<h;c++){const f=r[c],p=i[f];if(p.active!==!1){if(a.index!==null){if(p.indexStart!==t){const{indexStart:g,vertexStart:_,reservedIndexCount:x}=p,y=a.index,E=y.array,w=e-_;for(let b=g;b<g+x;b++)E[b]=E[b]+w;y.array.copyWithin(t,g,g+x),y.addUpdateRange(t,x),p.indexStart=t}t+=p.reservedIndexCount}if(p.vertexStart!==e){const{vertexStart:g,reservedVertexCount:_}=p,x=a.attributes;for(const y in x){const E=x[y],{array:w,itemSize:b}=E;w.copyWithin(e*b,g*b,(g+_)*b),E.addUpdateRange(e*b,_*b)}p.vertexStart=e}e+=p.reservedVertexCount,p.start=a.index?p.indexStart:p.vertexStart,this._nextIndexStart=a.index?p.indexStart+p.reservedIndexCount:0,this._nextVertexStart=p.vertexStart+p.reservedVertexCount}}return this}getBoundingBoxAt(e,t){if(e>=this._geometryCount)return null;const i=this.geometry,r=this._geometryInfo[e];if(r.boundingBox===null){const a=new sr,c=i.index,h=i.attributes.position;for(let f=r.start,p=r.start+r.count;f<p;f++){let g=f;c&&(g=c.getX(g)),a.expandByPoint(zc.fromBufferAttribute(h,g))}r.boundingBox=a}return t.copy(r.boundingBox),t}getBoundingSphereAt(e,t){if(e>=this._geometryCount)return null;const i=this.geometry,r=this._geometryInfo[e];if(r.boundingSphere===null){const a=new $i;this.getBoundingBoxAt(e,nh),nh.getCenter(a.center);const c=i.index,h=i.attributes.position;let f=0;for(let p=r.start,g=r.start+r.count;p<g;p++){let _=p;c&&(_=c.getX(_)),zc.fromBufferAttribute(h,_),f=Math.max(f,a.center.distanceToSquared(zc))}a.radius=Math.sqrt(f),r.boundingSphere=a}return t.copy(r.boundingSphere),t}setMatrixAt(e,t){this.validateInstanceId(e);const i=this._matricesTexture,r=this._matricesTexture.image.data;return t.toArray(r,e*16),i.needsUpdate=!0,this}getMatrixAt(e,t){return this.validateInstanceId(e),t.fromArray(this._matricesTexture.image.data,e*16)}setColorAt(e,t){return this.validateInstanceId(e),this._colorsTexture===null&&this._initColorsTexture(),t.toArray(this._colorsTexture.image.data,e*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(e,t){return this.validateInstanceId(e),t.fromArray(this._colorsTexture.image.data,e*4)}setVisibleAt(e,t){return this.validateInstanceId(e),this._instanceInfo[e].visible===t?this:(this._instanceInfo[e].visible=t,this._visibilityChanged=!0,this)}getVisibleAt(e){return this.validateInstanceId(e),this._instanceInfo[e].visible}setGeometryIdAt(e,t){return this.validateInstanceId(e),this.validateGeometryId(t),this._instanceInfo[e].geometryIndex=t,this}getGeometryIdAt(e){return this.validateInstanceId(e),this._instanceInfo[e].geometryIndex}getGeometryRangeAt(e,t={}){this.validateGeometryId(e);const i=this._geometryInfo[e];return t.vertexStart=i.vertexStart,t.vertexCount=i.vertexCount,t.reservedVertexCount=i.reservedVertexCount,t.indexStart=i.indexStart,t.indexCount=i.indexCount,t.reservedIndexCount=i.reservedIndexCount,t.start=i.start,t.count=i.count,t}setInstanceCount(e){const t=this._availableInstanceIds,i=this._instanceInfo;for(t.sort(od);t[t.length-1]===i.length;)i.pop(),t.pop();if(e<i.length)throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);const r=new Int32Array(e),a=new Int32Array(e);wa(this._multiDrawCounts,r),wa(this._multiDrawStarts,a),this._multiDrawCounts=r,this._multiDrawStarts=a,this._maxInstanceCount=e;const c=this._indirectTexture,h=this._matricesTexture,f=this._colorsTexture;c.dispose(),this._initIndirectTexture(),wa(c.image.data,this._indirectTexture.image.data),h.dispose(),this._initMatricesTexture(),wa(h.image.data,this._matricesTexture.image.data),f&&(f.dispose(),this._initColorsTexture(),wa(f.image.data,this._colorsTexture.image.data))}setGeometrySize(e,t){const i=[...this._geometryInfo].filter(h=>h.active);if(Math.max(...i.map(h=>h.vertexStart+h.reservedVertexCount))>e)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...i.map(f=>f.indexStart+f.reservedIndexCount))>t)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);const a=this.geometry;a.dispose(),this._maxVertexCount=e,this._maxIndexCount=t,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new In,this._initializeGeometry(a));const c=this.geometry;a.index&&wa(a.index.array,c.index.array);for(const h in a.attributes)wa(a.attributes[h].array,c.attributes[h].array)}raycast(e,t){const i=this._instanceInfo,r=this._geometryInfo,a=this.matrixWorld,c=this.geometry;ji.material=this.material,ji.geometry.index=c.index,ji.geometry.attributes=c.attributes,ji.geometry.boundingBox===null&&(ji.geometry.boundingBox=new sr),ji.geometry.boundingSphere===null&&(ji.geometry.boundingSphere=new $i);for(let h=0,f=i.length;h<f;h++){if(!i[h].visible||!i[h].active)continue;const p=i[h].geometryIndex,g=r[p];ji.geometry.setDrawRange(g.start,g.count),this.getMatrixAt(h,ji.matrixWorld).premultiply(a),this.getBoundingBoxAt(p,ji.geometry.boundingBox),this.getBoundingSphereAt(p,ji.geometry.boundingSphere),ji.raycast(e,ih);for(let _=0,x=ih.length;_<x;_++){const y=ih[_];y.object=this,y.batchId=h,t.push(y)}ih.length=0}ji.material=null,ji.geometry.index=null,ji.geometry.attributes={},ji.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._geometryInfo=e._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox!==null?t.boundingBox.clone():null,boundingSphere:t.boundingSphere!==null?t.boundingSphere.clone():null})),this._instanceInfo=e._instanceInfo.map(t=>({...t})),this._maxInstanceCount=e._maxInstanceCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._geometryCount=e._geometryCount,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=e._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(e,t,i,r,a){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const c=r.getIndex(),h=c===null?1:c.array.BYTES_PER_ELEMENT,f=this._instanceInfo,p=this._multiDrawStarts,g=this._multiDrawCounts,_=this._geometryInfo,x=this.perObjectFrustumCulled,y=this._indirectTexture,E=y.image.data;x&&(mr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse).multiply(this.matrixWorld),cd.setFromProjectionMatrix(mr,e.coordinateSystem));let w=0;if(this.sortObjects){mr.copy(this.matrixWorld).invert(),zc.setFromMatrixPosition(i.matrixWorld).applyMatrix4(mr),zm.set(0,0,-1).transformDirection(i.matrixWorld).transformDirection(mr);for(let O=0,N=f.length;O<N;O++)if(f[O].visible&&f[O].active){const D=f[O].geometryIndex;this.getMatrixAt(O,mr),this.getBoundingSphereAt(D,Aa).applyMatrix4(mr);let te=!1;if(x&&(te=!cd.intersectsSphere(Aa)),!te){const $=_[D],j=ry.subVectors(Aa.center,zc).dot(zm);ld.push($.start,$.count,j,O)}}const b=ld.list,S=this.customSort;S===null?b.sort(a.transparent?ty:ey):S.call(this,b,i);for(let O=0,N=b.length;O<N;O++){const D=b[O];p[w]=D.start*h,g[w]=D.count,E[w]=D.index,w++}ld.reset()}else for(let b=0,S=f.length;b<S;b++)if(f[b].visible&&f[b].active){const O=f[b].geometryIndex;let N=!1;if(x&&(this.getMatrixAt(b,mr),this.getBoundingSphereAt(O,Aa).applyMatrix4(mr),N=!cd.intersectsSphere(Aa)),!N){const D=_[O];p[w]=D.start*h,g[w]=D.count,E[w]=b,w++}}y.needsUpdate=!0,this._multiDrawCount=w,this._visibilityChanged=!1}onBeforeShadow(e,t,i,r,a,c){this.onBeforeRender(e,null,r,a,c)}}class cr extends Ji{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Ht(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const rh=new J,sh=new J,km=new xn,Vc=new yo,ah=new $i,hd=new J,Hm=new J;class Js extends Kn{constructor(e=new In,t=new cr){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[0];for(let r=1,a=t.count;r<a;r++)rh.fromBufferAttribute(t,r-1),sh.fromBufferAttribute(t,r),i[r]=i[r-1],i[r]+=rh.distanceTo(sh);e.setAttribute("lineDistance",new tn(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const i=this.geometry,r=this.matrixWorld,a=e.params.Line.threshold,c=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),ah.copy(i.boundingSphere),ah.applyMatrix4(r),ah.radius+=a,e.ray.intersectsSphere(ah)===!1)return;km.copy(r).invert(),Vc.copy(e.ray).applyMatrix4(km);const h=a/((this.scale.x+this.scale.y+this.scale.z)/3),f=h*h,p=this.isLineSegments?2:1,g=i.index,x=i.attributes.position;if(g!==null){const y=Math.max(0,c.start),E=Math.min(g.count,c.start+c.count);for(let w=y,b=E-1;w<b;w+=p){const S=g.getX(w),O=g.getX(w+1),N=oh(this,e,Vc,f,S,O);N&&t.push(N)}if(this.isLineLoop){const w=g.getX(E-1),b=g.getX(y),S=oh(this,e,Vc,f,w,b);S&&t.push(S)}}else{const y=Math.max(0,c.start),E=Math.min(x.count,c.start+c.count);for(let w=y,b=E-1;w<b;w+=p){const S=oh(this,e,Vc,f,w,w+1);S&&t.push(S)}if(this.isLineLoop){const w=oh(this,e,Vc,f,E-1,y);w&&t.push(w)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const r=t[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,c=r.length;a<c;a++){const h=r[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}}function oh(o,e,t,i,r,a){const c=o.geometry.attributes.position;if(rh.fromBufferAttribute(c,r),sh.fromBufferAttribute(c,a),t.distanceSqToSegment(rh,sh,hd,Hm)>i)return;hd.applyMatrix4(o.matrixWorld);const f=e.ray.origin.distanceTo(hd);if(!(f<e.near||f>e.far))return{distance:f,point:Hm.clone().applyMatrix4(o.matrixWorld),index:r,face:null,faceIndex:null,barycoord:null,object:o}}const Gm=new J,Wm=new J;class ls extends Js{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[];for(let r=0,a=t.count;r<a;r+=2)Gm.fromBufferAttribute(t,r),Wm.fromBufferAttribute(t,r+1),i[r]=r===0?0:i[r-1],i[r+1]=i[r]+Gm.distanceTo(Wm);e.setAttribute("lineDistance",new tn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Xm extends Js{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class ud extends Ji{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Ht(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const qm=new xn,dd=new yo,ch=new $i,lh=new J;class Ym extends Kn{constructor(e=new In,t=new ud){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const i=this.geometry,r=this.matrixWorld,a=e.params.Points.threshold,c=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),ch.copy(i.boundingSphere),ch.applyMatrix4(r),ch.radius+=a,e.ray.intersectsSphere(ch)===!1)return;qm.copy(r).invert(),dd.copy(e.ray).applyMatrix4(qm);const h=a/((this.scale.x+this.scale.y+this.scale.z)/3),f=h*h,p=i.index,_=i.attributes.position;if(p!==null){const x=Math.max(0,c.start),y=Math.min(p.count,c.start+c.count);for(let E=x,w=y;E<w;E++){const b=p.getX(E);lh.fromBufferAttribute(_,b),Zm(lh,b,f,r,e,t,this)}}else{const x=Math.max(0,c.start),y=Math.min(_.count,c.start+c.count);for(let E=x,w=y;E<w;E++)lh.fromBufferAttribute(_,E),Zm(lh,E,f,r,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const r=t[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,c=r.length;a<c;a++){const h=r[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}}function Zm(o,e,t,i,r,a,c){const h=dd.distanceSqToPoint(o);if(h<t){const f=new J;dd.closestPointToPoint(o,f),f.applyMatrix4(i);const p=r.ray.origin.distanceTo(f);if(p<r.near||p>r.far)return;a.push({distance:p,distanceToRay:Math.sqrt(h),point:f,index:e,face:null,faceIndex:null,barycoord:null,object:c})}}class Fo extends Kn{constructor(){super(),this.isGroup=!0,this.type="Group"}}class ay extends Ei{constructor(e,t,i,r,a,c,h,f,p){super(e,t,i,r,a,c,h,f,p),this.isVideoTexture=!0,this.minFilter=c!==void 0?c:ae,this.magFilter=a!==void 0?a:ae,this.generateMipmaps=!1;const g=this;function _(){g.needsUpdate=!0,e.requestVideoFrameCallback(_)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(_)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class oy extends Ei{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=Nt,this.minFilter=Nt,this.generateMipmaps=!1,this.needsUpdate=!0}}class hh extends Ei{constructor(e,t,i,r,a,c,h,f,p,g,_,x){super(null,c,h,f,p,g,r,a,_,x),this.isCompressedTexture=!0,this.image={width:t,height:i},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class cy extends hh{constructor(e,t,i,r,a,c){super(e,t,i,a,c),this.isCompressedArrayTexture=!0,this.image.depth=r,this.wrapR=it,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class ly extends hh{constructor(e,t,i){super(void 0,e[0].width,e[0].height,t,i,Pe),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}class hy extends Ei{constructor(e,t,i,r,a,c,h,f,p){super(e,t,i,r,a,c,h,f,p),this.isCanvasTexture=!0,this.needsUpdate=!0}}class fd extends Ei{constructor(e,t,i,r,a,c,h,f,p,g=rs){if(g!==rs&&g!==ps)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&g===rs&&(i=wi),i===void 0&&g===ps&&(i=zr),super(null,r,a,c,h,f,g,i,p),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=h!==void 0?h:Nt,this.minFilter=f!==void 0?f:Nt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class Yr{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const i=this.getUtoTmapping(e);return this.getPoint(i,t)}getPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return t}getSpacedPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let i,r=this.getPoint(0),a=0;t.push(0);for(let c=1;c<=e;c++)i=this.getPoint(c/e),a+=i.distanceTo(r),t.push(a),r=i;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const i=this.getLengths();let r=0;const a=i.length;let c;t?c=t:c=e*i[a-1];let h=0,f=a-1,p;for(;h<=f;)if(r=Math.floor(h+(f-h)/2),p=i[r]-c,p<0)h=r+1;else if(p>0)f=r-1;else{f=r;break}if(r=f,i[r]===c)return r/(a-1);const g=i[r],x=i[r+1]-g,y=(c-g)/x;return(r+y)/(a-1)}getTangent(e,t){let r=e-1e-4,a=e+1e-4;r<0&&(r=0),a>1&&(a=1);const c=this.getPoint(r),h=this.getPoint(a),f=t||(c.isVector2?new et:new J);return f.copy(h).sub(c).normalize(),f}getTangentAt(e,t){const i=this.getUtoTmapping(e);return this.getTangent(i,t)}computeFrenetFrames(e,t){const i=new J,r=[],a=[],c=[],h=new J,f=new xn;for(let y=0;y<=e;y++){const E=y/e;r[y]=this.getTangentAt(E,new J)}a[0]=new J,c[0]=new J;let p=Number.MAX_VALUE;const g=Math.abs(r[0].x),_=Math.abs(r[0].y),x=Math.abs(r[0].z);g<=p&&(p=g,i.set(1,0,0)),_<=p&&(p=_,i.set(0,1,0)),x<=p&&i.set(0,0,1),h.crossVectors(r[0],i).normalize(),a[0].crossVectors(r[0],h),c[0].crossVectors(r[0],a[0]);for(let y=1;y<=e;y++){if(a[y]=a[y-1].clone(),c[y]=c[y-1].clone(),h.crossVectors(r[y-1],r[y]),h.length()>Number.EPSILON){h.normalize();const E=Math.acos(bn(r[y-1].dot(r[y]),-1,1));a[y].applyMatrix4(f.makeRotationAxis(h,E))}c[y].crossVectors(r[y],a[y])}if(t===!0){let y=Math.acos(bn(a[0].dot(a[e]),-1,1));y/=e,r[0].dot(h.crossVectors(a[0],a[e]))>0&&(y=-y);for(let E=1;E<=e;E++)a[E].applyMatrix4(f.makeRotationAxis(r[E],y*E)),c[E].crossVectors(r[E],a[E])}return{tangents:r,normals:a,binormals:c}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class uh extends Yr{constructor(e=0,t=0,i=1,r=1,a=0,c=Math.PI*2,h=!1,f=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=r,this.aStartAngle=a,this.aEndAngle=c,this.aClockwise=h,this.aRotation=f}getPoint(e,t=new et){const i=t,r=Math.PI*2;let a=this.aEndAngle-this.aStartAngle;const c=Math.abs(a)<Number.EPSILON;for(;a<0;)a+=r;for(;a>r;)a-=r;a<Number.EPSILON&&(c?a=0:a=r),this.aClockwise===!0&&!c&&(a===r?a=-r:a=a-r);const h=this.aStartAngle+e*a;let f=this.aX+this.xRadius*Math.cos(h),p=this.aY+this.yRadius*Math.sin(h);if(this.aRotation!==0){const g=Math.cos(this.aRotation),_=Math.sin(this.aRotation),x=f-this.aX,y=p-this.aY;f=x*g-y*_+this.aX,p=x*_+y*g+this.aY}return i.set(f,p)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class $m extends uh{constructor(e,t,i,r,a,c){super(e,t,i,i,r,a,c),this.isArcCurve=!0,this.type="ArcCurve"}}function pd(){let o=0,e=0,t=0,i=0;function r(a,c,h,f){o=a,e=h,t=-3*a+3*c-2*h-f,i=2*a-2*c+h+f}return{initCatmullRom:function(a,c,h,f,p){r(c,h,p*(h-a),p*(f-c))},initNonuniformCatmullRom:function(a,c,h,f,p,g,_){let x=(c-a)/p-(h-a)/(p+g)+(h-c)/g,y=(h-c)/g-(f-c)/(g+_)+(f-h)/_;x*=g,y*=g,r(c,h,x,y)},calc:function(a){const c=a*a,h=c*a;return o+e*a+t*c+i*h}}}const dh=new J,md=new pd,gd=new pd,_d=new pd;class Km extends Yr{constructor(e=[],t=!1,i="centripetal",r=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=i,this.tension=r}getPoint(e,t=new J){const i=t,r=this.points,a=r.length,c=(a-(this.closed?0:1))*e;let h=Math.floor(c),f=c-h;this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/a)+1)*a:f===0&&h===a-1&&(h=a-2,f=1);let p,g;this.closed||h>0?p=r[(h-1)%a]:(dh.subVectors(r[0],r[1]).add(r[0]),p=dh);const _=r[h%a],x=r[(h+1)%a];if(this.closed||h+2<a?g=r[(h+2)%a]:(dh.subVectors(r[a-1],r[a-2]).add(r[a-1]),g=dh),this.curveType==="centripetal"||this.curveType==="chordal"){const y=this.curveType==="chordal"?.5:.25;let E=Math.pow(p.distanceToSquared(_),y),w=Math.pow(_.distanceToSquared(x),y),b=Math.pow(x.distanceToSquared(g),y);w<1e-4&&(w=1),E<1e-4&&(E=w),b<1e-4&&(b=w),md.initNonuniformCatmullRom(p.x,_.x,x.x,g.x,E,w,b),gd.initNonuniformCatmullRom(p.y,_.y,x.y,g.y,E,w,b),_d.initNonuniformCatmullRom(p.z,_.z,x.z,g.z,E,w,b)}else this.curveType==="catmullrom"&&(md.initCatmullRom(p.x,_.x,x.x,g.x,this.tension),gd.initCatmullRom(p.y,_.y,x.y,g.y,this.tension),_d.initCatmullRom(p.z,_.z,x.z,g.z,this.tension));return i.set(md.calc(f),gd.calc(f),_d.calc(f)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const r=e.points[t];this.points.push(r.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const r=this.points[t];e.points.push(r.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const r=e.points[t];this.points.push(new J().fromArray(r))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function Jm(o,e,t,i,r){const a=(i-e)*.5,c=(r-t)*.5,h=o*o,f=o*h;return(2*t-2*i+a+c)*f+(-3*t+3*i-2*a-c)*h+a*o+t}function uy(o,e){const t=1-o;return t*t*e}function dy(o,e){return 2*(1-o)*o*e}function fy(o,e){return o*o*e}function kc(o,e,t,i){return uy(o,e)+dy(o,t)+fy(o,i)}function py(o,e){const t=1-o;return t*t*t*e}function my(o,e){const t=1-o;return 3*t*t*o*e}function gy(o,e){return 3*(1-o)*o*o*e}function _y(o,e){return o*o*o*e}function Hc(o,e,t,i,r){return py(o,e)+my(o,t)+gy(o,i)+_y(o,r)}class xd extends Yr{constructor(e=new et,t=new et,i=new et,r=new et){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=i,this.v3=r}getPoint(e,t=new et){const i=t,r=this.v0,a=this.v1,c=this.v2,h=this.v3;return i.set(Hc(e,r.x,a.x,c.x,h.x),Hc(e,r.y,a.y,c.y,h.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class jm extends Yr{constructor(e=new J,t=new J,i=new J,r=new J){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=i,this.v3=r}getPoint(e,t=new J){const i=t,r=this.v0,a=this.v1,c=this.v2,h=this.v3;return i.set(Hc(e,r.x,a.x,c.x,h.x),Hc(e,r.y,a.y,c.y,h.y),Hc(e,r.z,a.z,c.z,h.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class vd extends Yr{constructor(e=new et,t=new et){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new et){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new et){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Qm extends Yr{constructor(e=new J,t=new J){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new J){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new J){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class yd extends Yr{constructor(e=new et,t=new et,i=new et){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new et){const i=t,r=this.v0,a=this.v1,c=this.v2;return i.set(kc(e,r.x,a.x,c.x),kc(e,r.y,a.y,c.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Md extends Yr{constructor(e=new J,t=new J,i=new J){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new J){const i=t,r=this.v0,a=this.v1,c=this.v2;return i.set(kc(e,r.x,a.x,c.x),kc(e,r.y,a.y,c.y),kc(e,r.z,a.z,c.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Sd extends Yr{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new et){const i=t,r=this.points,a=(r.length-1)*e,c=Math.floor(a),h=a-c,f=r[c===0?c:c-1],p=r[c],g=r[c>r.length-2?r.length-1:c+1],_=r[c>r.length-3?r.length-1:c+2];return i.set(Jm(h,f.x,p.x,g.x,_.x),Jm(h,f.y,p.y,g.y,_.y)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const r=e.points[t];this.points.push(r.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const r=this.points[t];e.points.push(r.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const r=e.points[t];this.points.push(new et().fromArray(r))}return this}}var fh=Object.freeze({__proto__:null,ArcCurve:$m,CatmullRomCurve3:Km,CubicBezierCurve:xd,CubicBezierCurve3:jm,EllipseCurve:uh,LineCurve:vd,LineCurve3:Qm,QuadraticBezierCurve:yd,QuadraticBezierCurve3:Md,SplineCurve:Sd});class eg extends Yr{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const i=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new fh[i](t,e))}return this}getPoint(e,t){const i=e*this.getLength(),r=this.getCurveLengths();let a=0;for(;a<r.length;){if(r[a]>=i){const c=r[a]-i,h=this.curves[a],f=h.getLength(),p=f===0?0:1-c/f;return h.getPointAt(p,t)}a++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let i=0,r=this.curves.length;i<r;i++)t+=this.curves[i].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let i;for(let r=0,a=this.curves;r<a.length;r++){const c=a[r],h=c.isEllipseCurve?e*2:c.isLineCurve||c.isLineCurve3?1:c.isSplineCurve?e*c.points.length:e,f=c.getPoints(h);for(let p=0;p<f.length;p++){const g=f[p];i&&i.equals(g)||(t.push(g),i=g)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const r=e.curves[t];this.curves.push(r.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,i=this.curves.length;t<i;t++){const r=this.curves[t];e.curves.push(r.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const r=e.curves[t];this.curves.push(new fh[r.type]().fromJSON(r))}return this}}class Gc extends eg{constructor(e){super(),this.type="Path",this.currentPoint=new et,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const i=new vd(this.currentPoint.clone(),new et(e,t));return this.curves.push(i),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,i,r){const a=new yd(this.currentPoint.clone(),new et(e,t),new et(i,r));return this.curves.push(a),this.currentPoint.set(i,r),this}bezierCurveTo(e,t,i,r,a,c){const h=new xd(this.currentPoint.clone(),new et(e,t),new et(i,r),new et(a,c));return this.curves.push(h),this.currentPoint.set(a,c),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),i=new Sd(t);return this.curves.push(i),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,i,r,a,c){const h=this.currentPoint.x,f=this.currentPoint.y;return this.absarc(e+h,t+f,i,r,a,c),this}absarc(e,t,i,r,a,c){return this.absellipse(e,t,i,i,r,a,c),this}ellipse(e,t,i,r,a,c,h,f){const p=this.currentPoint.x,g=this.currentPoint.y;return this.absellipse(e+p,t+g,i,r,a,c,h,f),this}absellipse(e,t,i,r,a,c,h,f){const p=new uh(e,t,i,r,a,c,h,f);if(this.curves.length>0){const _=p.getPoint(0);_.equals(this.currentPoint)||this.lineTo(_.x,_.y)}this.curves.push(p);const g=p.getPoint(1);return this.currentPoint.copy(g),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Wc extends In{constructor(e=[new et(0,-.5),new et(.5,0),new et(0,.5)],t=12,i=0,r=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:i,phiLength:r},t=Math.floor(t),r=bn(r,0,Math.PI*2);const a=[],c=[],h=[],f=[],p=[],g=1/t,_=new J,x=new et,y=new J,E=new J,w=new J;let b=0,S=0;for(let O=0;O<=e.length-1;O++)switch(O){case 0:b=e[O+1].x-e[O].x,S=e[O+1].y-e[O].y,y.x=S*1,y.y=-b,y.z=S*0,w.copy(y),y.normalize(),f.push(y.x,y.y,y.z);break;case e.length-1:f.push(w.x,w.y,w.z);break;default:b=e[O+1].x-e[O].x,S=e[O+1].y-e[O].y,y.x=S*1,y.y=-b,y.z=S*0,E.copy(y),y.x+=w.x,y.y+=w.y,y.z+=w.z,y.normalize(),f.push(y.x,y.y,y.z),w.copy(E)}for(let O=0;O<=t;O++){const N=i+O*g*r,D=Math.sin(N),te=Math.cos(N);for(let $=0;$<=e.length-1;$++){_.x=e[$].x*D,_.y=e[$].y,_.z=e[$].x*te,c.push(_.x,_.y,_.z),x.x=O/t,x.y=$/(e.length-1),h.push(x.x,x.y);const j=f[3*$+0]*D,ne=f[3*$+1],H=f[3*$+0]*te;p.push(j,ne,H)}}for(let O=0;O<t;O++)for(let N=0;N<e.length-1;N++){const D=N+O*e.length,te=D,$=D+e.length,j=D+e.length+1,ne=D+1;a.push(te,$,ne),a.push(j,ne,$)}this.setIndex(a),this.setAttribute("position",new tn(c,3)),this.setAttribute("uv",new tn(h,2)),this.setAttribute("normal",new tn(p,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Wc(e.points,e.segments,e.phiStart,e.phiLength)}}class ph extends Wc{constructor(e=1,t=1,i=4,r=8){const a=new Gc;a.absarc(0,-t/2,e,Math.PI*1.5,0),a.absarc(0,t/2,e,0,Math.PI*.5),super(a.getPoints(i),r),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:i,radialSegments:r}}static fromJSON(e){return new ph(e.radius,e.length,e.capSegments,e.radialSegments)}}class mh extends In{constructor(e=1,t=32,i=0,r=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:r},t=Math.max(3,t);const a=[],c=[],h=[],f=[],p=new J,g=new et;c.push(0,0,0),h.push(0,0,1),f.push(.5,.5);for(let _=0,x=3;_<=t;_++,x+=3){const y=i+_/t*r;p.x=e*Math.cos(y),p.y=e*Math.sin(y),c.push(p.x,p.y,p.z),h.push(0,0,1),g.x=(c[x]/e+1)/2,g.y=(c[x+1]/e+1)/2,f.push(g.x,g.y)}for(let _=1;_<=t;_++)a.push(_,_+1,0);this.setIndex(a),this.setAttribute("position",new tn(c,3)),this.setAttribute("normal",new tn(h,3)),this.setAttribute("uv",new tn(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new mh(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class Oo extends In{constructor(e=1,t=1,i=1,r=32,a=1,c=!1,h=0,f=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:r,heightSegments:a,openEnded:c,thetaStart:h,thetaLength:f};const p=this;r=Math.floor(r),a=Math.floor(a);const g=[],_=[],x=[],y=[];let E=0;const w=[],b=i/2;let S=0;O(),c===!1&&(e>0&&N(!0),t>0&&N(!1)),this.setIndex(g),this.setAttribute("position",new tn(_,3)),this.setAttribute("normal",new tn(x,3)),this.setAttribute("uv",new tn(y,2));function O(){const D=new J,te=new J;let $=0;const j=(t-e)/i;for(let ne=0;ne<=a;ne++){const H=[],z=ne/a,re=z*(t-e)+e;for(let De=0;De<=r;De++){const Ae=De/r,He=Ae*f+h,Ke=Math.sin(He),ke=Math.cos(He);te.x=re*Ke,te.y=-z*i+b,te.z=re*ke,_.push(te.x,te.y,te.z),D.set(Ke,j,ke).normalize(),x.push(D.x,D.y,D.z),y.push(Ae,1-z),H.push(E++)}w.push(H)}for(let ne=0;ne<r;ne++)for(let H=0;H<a;H++){const z=w[H][ne],re=w[H+1][ne],De=w[H+1][ne+1],Ae=w[H][ne+1];(e>0||H!==0)&&(g.push(z,re,Ae),$+=3),(t>0||H!==a-1)&&(g.push(re,De,Ae),$+=3)}p.addGroup(S,$,0),S+=$}function N(D){const te=E,$=new et,j=new J;let ne=0;const H=D===!0?e:t,z=D===!0?1:-1;for(let De=1;De<=r;De++)_.push(0,b*z,0),x.push(0,z,0),y.push(.5,.5),E++;const re=E;for(let De=0;De<=r;De++){const He=De/r*f+h,Ke=Math.cos(He),ke=Math.sin(He);j.x=H*ke,j.y=b*z,j.z=H*Ke,_.push(j.x,j.y,j.z),x.push(0,z,0),$.x=Ke*.5+.5,$.y=ke*.5*z+.5,y.push($.x,$.y),E++}for(let De=0;De<r;De++){const Ae=te+De,He=re+De;D===!0?g.push(He,He+1,Ae):g.push(He+1,He,Ae),ne+=3}p.addGroup(S,ne,D===!0?1:2),S+=ne}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Oo(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class gh extends Oo{constructor(e=1,t=1,i=32,r=1,a=!1,c=0,h=Math.PI*2){super(0,e,t,i,r,a,c,h),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:c,thetaLength:h}}static fromJSON(e){return new gh(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class js extends In{constructor(e=[],t=[],i=1,r=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:i,detail:r};const a=[],c=[];h(r),p(i),g(),this.setAttribute("position",new tn(a,3)),this.setAttribute("normal",new tn(a.slice(),3)),this.setAttribute("uv",new tn(c,2)),r===0?this.computeVertexNormals():this.normalizeNormals();function h(O){const N=new J,D=new J,te=new J;for(let $=0;$<t.length;$+=3)y(t[$+0],N),y(t[$+1],D),y(t[$+2],te),f(N,D,te,O)}function f(O,N,D,te){const $=te+1,j=[];for(let ne=0;ne<=$;ne++){j[ne]=[];const H=O.clone().lerp(D,ne/$),z=N.clone().lerp(D,ne/$),re=$-ne;for(let De=0;De<=re;De++)De===0&&ne===$?j[ne][De]=H:j[ne][De]=H.clone().lerp(z,De/re)}for(let ne=0;ne<$;ne++)for(let H=0;H<2*($-ne)-1;H++){const z=Math.floor(H/2);H%2===0?(x(j[ne][z+1]),x(j[ne+1][z]),x(j[ne][z])):(x(j[ne][z+1]),x(j[ne+1][z+1]),x(j[ne+1][z]))}}function p(O){const N=new J;for(let D=0;D<a.length;D+=3)N.x=a[D+0],N.y=a[D+1],N.z=a[D+2],N.normalize().multiplyScalar(O),a[D+0]=N.x,a[D+1]=N.y,a[D+2]=N.z}function g(){const O=new J;for(let N=0;N<a.length;N+=3){O.x=a[N+0],O.y=a[N+1],O.z=a[N+2];const D=b(O)/2/Math.PI+.5,te=S(O)/Math.PI+.5;c.push(D,1-te)}E(),_()}function _(){for(let O=0;O<c.length;O+=6){const N=c[O+0],D=c[O+2],te=c[O+4],$=Math.max(N,D,te),j=Math.min(N,D,te);$>.9&&j<.1&&(N<.2&&(c[O+0]+=1),D<.2&&(c[O+2]+=1),te<.2&&(c[O+4]+=1))}}function x(O){a.push(O.x,O.y,O.z)}function y(O,N){const D=O*3;N.x=e[D+0],N.y=e[D+1],N.z=e[D+2]}function E(){const O=new J,N=new J,D=new J,te=new J,$=new et,j=new et,ne=new et;for(let H=0,z=0;H<a.length;H+=9,z+=6){O.set(a[H+0],a[H+1],a[H+2]),N.set(a[H+3],a[H+4],a[H+5]),D.set(a[H+6],a[H+7],a[H+8]),$.set(c[z+0],c[z+1]),j.set(c[z+2],c[z+3]),ne.set(c[z+4],c[z+5]),te.copy(O).add(N).add(D).divideScalar(3);const re=b(te);w($,z+0,O,re),w(j,z+2,N,re),w(ne,z+4,D,re)}}function w(O,N,D,te){te<0&&O.x===1&&(c[N]=O.x-1),D.x===0&&D.z===0&&(c[N]=te/2/Math.PI+.5)}function b(O){return Math.atan2(O.z,-O.x)}function S(O){return Math.atan2(-O.y,Math.sqrt(O.x*O.x+O.z*O.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new js(e.vertices,e.indices,e.radius,e.details)}}class _h extends js{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,r=1/i,a=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-i,0,-r,i,0,r,-i,0,r,i,-r,-i,0,-r,i,0,r,-i,0,r,i,0,-i,0,-r,i,0,-r,-i,0,r,i,0,r],c=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(a,c,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new _h(e.radius,e.detail)}}const xh=new J,vh=new J,Ed=new J,yh=new fr;class tg extends In{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const r=Math.pow(10,4),a=Math.cos(xa*t),c=e.getIndex(),h=e.getAttribute("position"),f=c?c.count:h.count,p=[0,0,0],g=["a","b","c"],_=new Array(3),x={},y=[];for(let E=0;E<f;E+=3){c?(p[0]=c.getX(E),p[1]=c.getX(E+1),p[2]=c.getX(E+2)):(p[0]=E,p[1]=E+1,p[2]=E+2);const{a:w,b,c:S}=yh;if(w.fromBufferAttribute(h,p[0]),b.fromBufferAttribute(h,p[1]),S.fromBufferAttribute(h,p[2]),yh.getNormal(Ed),_[0]=`${Math.round(w.x*r)},${Math.round(w.y*r)},${Math.round(w.z*r)}`,_[1]=`${Math.round(b.x*r)},${Math.round(b.y*r)},${Math.round(b.z*r)}`,_[2]=`${Math.round(S.x*r)},${Math.round(S.y*r)},${Math.round(S.z*r)}`,!(_[0]===_[1]||_[1]===_[2]||_[2]===_[0]))for(let O=0;O<3;O++){const N=(O+1)%3,D=_[O],te=_[N],$=yh[g[O]],j=yh[g[N]],ne=`${D}_${te}`,H=`${te}_${D}`;H in x&&x[H]?(Ed.dot(x[H].normal)<=a&&(y.push($.x,$.y,$.z),y.push(j.x,j.y,j.z)),x[H]=null):ne in x||(x[ne]={index0:p[O],index1:p[N],normal:Ed.clone()})}}for(const E in x)if(x[E]){const{index0:w,index1:b}=x[E];xh.fromBufferAttribute(h,w),vh.fromBufferAttribute(h,b),y.push(xh.x,xh.y,xh.z),y.push(vh.x,vh.y,vh.z)}this.setAttribute("position",new tn(y,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class Ca extends Gc{constructor(e){super(e),this.uuid=Mr(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let i=0,r=this.holes.length;i<r;i++)t[i]=this.holes[i].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const r=e.holes[t];this.holes.push(r.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,i=this.holes.length;t<i;t++){const r=this.holes[t];e.holes.push(r.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const r=e.holes[t];this.holes.push(new Gc().fromJSON(r))}return this}}const xy={triangulate:function(o,e,t=2){const i=e&&e.length,r=i?e[0]*t:o.length;let a=ng(o,0,r,t,!0);const c=[];if(!a||a.next===a.prev)return c;let h,f,p,g,_,x,y;if(i&&(a=Ey(o,e,a,t)),o.length>80*t){h=p=o[0],f=g=o[1];for(let E=t;E<r;E+=t)_=o[E],x=o[E+1],_<h&&(h=_),x<f&&(f=x),_>p&&(p=_),x>g&&(g=x);y=Math.max(p-h,g-f),y=y!==0?32767/y:0}return Xc(a,c,t,h,f,y,0),c}};function ng(o,e,t,i,r){let a,c;if(r===Uy(o,e,t,i)>0)for(a=e;a<t;a+=i)c=sg(a,o[a],o[a+1],c);else for(a=t-i;a>=e;a-=i)c=sg(a,o[a],o[a+1],c);return c&&Mh(c,c.next)&&(Yc(c),c=c.next),c}function Ra(o,e){if(!o)return o;e||(e=o);let t=o,i;do if(i=!1,!t.steiner&&(Mh(t,t.next)||yi(t.prev,t,t.next)===0)){if(Yc(t),t=e=t.prev,t===t.next)break;i=!0}else t=t.next;while(i||t!==e);return e}function Xc(o,e,t,i,r,a,c){if(!o)return;!c&&a&&Cy(o,i,r,a);let h=o,f,p;for(;o.prev!==o.next;){if(f=o.prev,p=o.next,a?yy(o,i,r,a):vy(o)){e.push(f.i/t|0),e.push(o.i/t|0),e.push(p.i/t|0),Yc(o),o=p.next,h=p.next;continue}if(o=p,o===h){c?c===1?(o=My(Ra(o),e,t),Xc(o,e,t,i,r,a,2)):c===2&&Sy(o,e,t,i,r,a):Xc(Ra(o),e,t,i,r,a,1);break}}}function vy(o){const e=o.prev,t=o,i=o.next;if(yi(e,t,i)>=0)return!1;const r=e.x,a=t.x,c=i.x,h=e.y,f=t.y,p=i.y,g=r<a?r<c?r:c:a<c?a:c,_=h<f?h<p?h:p:f<p?f:p,x=r>a?r>c?r:c:a>c?a:c,y=h>f?h>p?h:p:f>p?f:p;let E=i.next;for(;E!==e;){if(E.x>=g&&E.x<=x&&E.y>=_&&E.y<=y&&Bo(r,h,a,f,c,p,E.x,E.y)&&yi(E.prev,E,E.next)>=0)return!1;E=E.next}return!0}function yy(o,e,t,i){const r=o.prev,a=o,c=o.next;if(yi(r,a,c)>=0)return!1;const h=r.x,f=a.x,p=c.x,g=r.y,_=a.y,x=c.y,y=h<f?h<p?h:p:f<p?f:p,E=g<_?g<x?g:x:_<x?_:x,w=h>f?h>p?h:p:f>p?f:p,b=g>_?g>x?g:x:_>x?_:x,S=bd(y,E,e,t,i),O=bd(w,b,e,t,i);let N=o.prevZ,D=o.nextZ;for(;N&&N.z>=S&&D&&D.z<=O;){if(N.x>=y&&N.x<=w&&N.y>=E&&N.y<=b&&N!==r&&N!==c&&Bo(h,g,f,_,p,x,N.x,N.y)&&yi(N.prev,N,N.next)>=0||(N=N.prevZ,D.x>=y&&D.x<=w&&D.y>=E&&D.y<=b&&D!==r&&D!==c&&Bo(h,g,f,_,p,x,D.x,D.y)&&yi(D.prev,D,D.next)>=0))return!1;D=D.nextZ}for(;N&&N.z>=S;){if(N.x>=y&&N.x<=w&&N.y>=E&&N.y<=b&&N!==r&&N!==c&&Bo(h,g,f,_,p,x,N.x,N.y)&&yi(N.prev,N,N.next)>=0)return!1;N=N.prevZ}for(;D&&D.z<=O;){if(D.x>=y&&D.x<=w&&D.y>=E&&D.y<=b&&D!==r&&D!==c&&Bo(h,g,f,_,p,x,D.x,D.y)&&yi(D.prev,D,D.next)>=0)return!1;D=D.nextZ}return!0}function My(o,e,t){let i=o;do{const r=i.prev,a=i.next.next;!Mh(r,a)&&ig(r,i,i.next,a)&&qc(r,a)&&qc(a,r)&&(e.push(r.i/t|0),e.push(i.i/t|0),e.push(a.i/t|0),Yc(i),Yc(i.next),i=o=a),i=i.next}while(i!==o);return Ra(i)}function Sy(o,e,t,i,r,a){let c=o;do{let h=c.next.next;for(;h!==c.prev;){if(c.i!==h.i&&Iy(c,h)){let f=rg(c,h);c=Ra(c,c.next),f=Ra(f,f.next),Xc(c,e,t,i,r,a,0),Xc(f,e,t,i,r,a,0);return}h=h.next}c=c.next}while(c!==o)}function Ey(o,e,t,i){const r=[];let a,c,h,f,p;for(a=0,c=e.length;a<c;a++)h=e[a]*i,f=a<c-1?e[a+1]*i:o.length,p=ng(o,h,f,i,!1),p===p.next&&(p.steiner=!0),r.push(Py(p));for(r.sort(by),a=0;a<r.length;a++)t=Ty(r[a],t);return t}function by(o,e){return o.x-e.x}function Ty(o,e){const t=Ay(o,e);if(!t)return e;const i=rg(t,o);return Ra(i,i.next),Ra(t,t.next)}function Ay(o,e){let t=e,i=-1/0,r;const a=o.x,c=o.y;do{if(c<=t.y&&c>=t.next.y&&t.next.y!==t.y){const x=t.x+(c-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(x<=a&&x>i&&(i=x,r=t.x<t.next.x?t:t.next,x===a))return r}t=t.next}while(t!==e);if(!r)return null;const h=r,f=r.x,p=r.y;let g=1/0,_;t=r;do a>=t.x&&t.x>=f&&a!==t.x&&Bo(c<p?a:i,c,f,p,c<p?i:a,c,t.x,t.y)&&(_=Math.abs(c-t.y)/(a-t.x),qc(t,o)&&(_<g||_===g&&(t.x>r.x||t.x===r.x&&wy(r,t)))&&(r=t,g=_)),t=t.next;while(t!==h);return r}function wy(o,e){return yi(o.prev,o,e.prev)<0&&yi(e.next,o,o.next)<0}function Cy(o,e,t,i){let r=o;do r.z===0&&(r.z=bd(r.x,r.y,e,t,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;while(r!==o);r.prevZ.nextZ=null,r.prevZ=null,Ry(r)}function Ry(o){let e,t,i,r,a,c,h,f,p=1;do{for(t=o,o=null,a=null,c=0;t;){for(c++,i=t,h=0,e=0;e<p&&(h++,i=i.nextZ,!!i);e++);for(f=p;h>0||f>0&&i;)h!==0&&(f===0||!i||t.z<=i.z)?(r=t,t=t.nextZ,h--):(r=i,i=i.nextZ,f--),a?a.nextZ=r:o=r,r.prevZ=a,a=r;t=i}a.nextZ=null,p*=2}while(c>1);return o}function bd(o,e,t,i,r){return o=(o-t)*r|0,e=(e-i)*r|0,o=(o|o<<8)&16711935,o=(o|o<<4)&252645135,o=(o|o<<2)&858993459,o=(o|o<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,o|e<<1}function Py(o){let e=o,t=o;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==o);return t}function Bo(o,e,t,i,r,a,c,h){return(r-c)*(e-h)>=(o-c)*(a-h)&&(o-c)*(i-h)>=(t-c)*(e-h)&&(t-c)*(a-h)>=(r-c)*(i-h)}function Iy(o,e){return o.next.i!==e.i&&o.prev.i!==e.i&&!Ly(o,e)&&(qc(o,e)&&qc(e,o)&&Dy(o,e)&&(yi(o.prev,o,e.prev)||yi(o,e.prev,e))||Mh(o,e)&&yi(o.prev,o,o.next)>0&&yi(e.prev,e,e.next)>0)}function yi(o,e,t){return(e.y-o.y)*(t.x-e.x)-(e.x-o.x)*(t.y-e.y)}function Mh(o,e){return o.x===e.x&&o.y===e.y}function ig(o,e,t,i){const r=Eh(yi(o,e,t)),a=Eh(yi(o,e,i)),c=Eh(yi(t,i,o)),h=Eh(yi(t,i,e));return!!(r!==a&&c!==h||r===0&&Sh(o,t,e)||a===0&&Sh(o,i,e)||c===0&&Sh(t,o,i)||h===0&&Sh(t,e,i))}function Sh(o,e,t){return e.x<=Math.max(o.x,t.x)&&e.x>=Math.min(o.x,t.x)&&e.y<=Math.max(o.y,t.y)&&e.y>=Math.min(o.y,t.y)}function Eh(o){return o>0?1:o<0?-1:0}function Ly(o,e){let t=o;do{if(t.i!==o.i&&t.next.i!==o.i&&t.i!==e.i&&t.next.i!==e.i&&ig(t,t.next,o,e))return!0;t=t.next}while(t!==o);return!1}function qc(o,e){return yi(o.prev,o,o.next)<0?yi(o,e,o.next)>=0&&yi(o,o.prev,e)>=0:yi(o,e,o.prev)<0||yi(o,o.next,e)<0}function Dy(o,e){let t=o,i=!1;const r=(o.x+e.x)/2,a=(o.y+e.y)/2;do t.y>a!=t.next.y>a&&t.next.y!==t.y&&r<(t.next.x-t.x)*(a-t.y)/(t.next.y-t.y)+t.x&&(i=!i),t=t.next;while(t!==o);return i}function rg(o,e){const t=new Td(o.i,o.x,o.y),i=new Td(e.i,e.x,e.y),r=o.next,a=e.prev;return o.next=e,e.prev=o,t.next=r,r.prev=t,i.next=t,t.prev=i,a.next=i,i.prev=a,i}function sg(o,e,t,i){const r=new Td(o,e,t);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Yc(o){o.next.prev=o.prev,o.prev.next=o.next,o.prevZ&&(o.prevZ.nextZ=o.nextZ),o.nextZ&&(o.nextZ.prevZ=o.prevZ)}function Td(o,e,t){this.i=o,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Uy(o,e,t,i){let r=0;for(let a=e,c=t-i;a<t;a+=i)r+=(o[c]-o[a])*(o[a+1]+o[c+1]),c=a;return r}class hs{static area(e){const t=e.length;let i=0;for(let r=t-1,a=0;a<t;r=a++)i+=e[r].x*e[a].y-e[a].x*e[r].y;return i*.5}static isClockWise(e){return hs.area(e)<0}static triangulateShape(e,t){const i=[],r=[],a=[];ag(e),og(i,e);let c=e.length;t.forEach(ag);for(let f=0;f<t.length;f++)r.push(c),c+=t[f].length,og(i,t[f]);const h=xy.triangulate(i,r);for(let f=0;f<h.length;f+=3)a.push(h.slice(f,f+3));return a}}function ag(o){const e=o.length;e>2&&o[e-1].equals(o[0])&&o.pop()}function og(o,e){for(let t=0;t<e.length;t++)o.push(e[t].x),o.push(e[t].y)}class bh extends In{constructor(e=new Ca([new et(.5,.5),new et(-.5,.5),new et(-.5,-.5),new et(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const i=this,r=[],a=[];for(let h=0,f=e.length;h<f;h++){const p=e[h];c(p)}this.setAttribute("position",new tn(r,3)),this.setAttribute("uv",new tn(a,2)),this.computeVertexNormals();function c(h){const f=[],p=t.curveSegments!==void 0?t.curveSegments:12,g=t.steps!==void 0?t.steps:1,_=t.depth!==void 0?t.depth:1;let x=t.bevelEnabled!==void 0?t.bevelEnabled:!0,y=t.bevelThickness!==void 0?t.bevelThickness:.2,E=t.bevelSize!==void 0?t.bevelSize:y-.1,w=t.bevelOffset!==void 0?t.bevelOffset:0,b=t.bevelSegments!==void 0?t.bevelSegments:3;const S=t.extrudePath,O=t.UVGenerator!==void 0?t.UVGenerator:Ny;let N,D=!1,te,$,j,ne;S&&(N=S.getSpacedPoints(g),D=!0,x=!1,te=S.computeFrenetFrames(g,!1),$=new J,j=new J,ne=new J),x||(b=0,y=0,E=0,w=0);const H=h.extractPoints(p);let z=H.shape;const re=H.holes;if(!hs.isClockWise(z)){z=z.reverse();for(let nt=0,xt=re.length;nt<xt;nt++){const Q=re[nt];hs.isClockWise(Q)&&(re[nt]=Q.reverse())}}const Ae=hs.triangulateShape(z,re),He=z;for(let nt=0,xt=re.length;nt<xt;nt++){const Q=re[nt];z=z.concat(Q)}function Ke(nt,xt,Q){return xt||console.error("THREE.ExtrudeGeometry: vec does not exist"),nt.clone().addScaledVector(xt,Q)}const ke=z.length,st=Ae.length;function Be(nt,xt,Q){let cn,dt,Zt;const Mt=nt.x-xt.x,vn=nt.y-xt.y,Gt=Q.x-nt.x,Z=Q.y-nt.y,V=Mt*Mt+vn*vn,Me=Mt*Z-vn*Gt;if(Math.abs(Me)>Number.EPSILON){const qe=Math.sqrt(V),at=Math.sqrt(Gt*Gt+Z*Z),Ye=xt.x-vn/qe,sn=xt.y+Mt/qe,Ut=Q.x-Z/at,Yt=Q.y+Gt/at,Vn=((Ut-Ye)*Z-(Yt-sn)*Gt)/(Mt*Z-vn*Gt);cn=Ye+Mt*Vn-nt.x,dt=sn+vn*Vn-nt.y;const mt=cn*cn+dt*dt;if(mt<=2)return new et(cn,dt);Zt=Math.sqrt(mt/2)}else{let qe=!1;Mt>Number.EPSILON?Gt>Number.EPSILON&&(qe=!0):Mt<-Number.EPSILON?Gt<-Number.EPSILON&&(qe=!0):Math.sign(vn)===Math.sign(Z)&&(qe=!0),qe?(cn=-vn,dt=Mt,Zt=Math.sqrt(V)):(cn=Mt,dt=vn,Zt=Math.sqrt(V/2))}return new et(cn/Zt,dt/Zt)}const It=[];for(let nt=0,xt=He.length,Q=xt-1,cn=nt+1;nt<xt;nt++,Q++,cn++)Q===xt&&(Q=0),cn===xt&&(cn=0),It[nt]=Be(He[nt],He[Q],He[cn]);const Xt=[];let en,Pn=It.concat();for(let nt=0,xt=re.length;nt<xt;nt++){const Q=re[nt];en=[];for(let cn=0,dt=Q.length,Zt=dt-1,Mt=cn+1;cn<dt;cn++,Zt++,Mt++)Zt===dt&&(Zt=0),Mt===dt&&(Mt=0),en[cn]=Be(Q[cn],Q[Zt],Q[Mt]);Xt.push(en),Pn=Pn.concat(en)}for(let nt=0;nt<b;nt++){const xt=nt/b,Q=y*Math.cos(xt*Math.PI/2),cn=E*Math.sin(xt*Math.PI/2)+w;for(let dt=0,Zt=He.length;dt<Zt;dt++){const Mt=Ke(He[dt],It[dt],cn);Et(Mt.x,Mt.y,-Q)}for(let dt=0,Zt=re.length;dt<Zt;dt++){const Mt=re[dt];en=Xt[dt];for(let vn=0,Gt=Mt.length;vn<Gt;vn++){const Z=Ke(Mt[vn],en[vn],cn);Et(Z.x,Z.y,-Q)}}}const ri=E+w;for(let nt=0;nt<ke;nt++){const xt=x?Ke(z[nt],Pn[nt],ri):z[nt];D?(j.copy(te.normals[0]).multiplyScalar(xt.x),$.copy(te.binormals[0]).multiplyScalar(xt.y),ne.copy(N[0]).add(j).add($),Et(ne.x,ne.y,ne.z)):Et(xt.x,xt.y,0)}for(let nt=1;nt<=g;nt++)for(let xt=0;xt<ke;xt++){const Q=x?Ke(z[xt],Pn[xt],ri):z[xt];D?(j.copy(te.normals[nt]).multiplyScalar(Q.x),$.copy(te.binormals[nt]).multiplyScalar(Q.y),ne.copy(N[nt]).add(j).add($),Et(ne.x,ne.y,ne.z)):Et(Q.x,Q.y,_/g*nt)}for(let nt=b-1;nt>=0;nt--){const xt=nt/b,Q=y*Math.cos(xt*Math.PI/2),cn=E*Math.sin(xt*Math.PI/2)+w;for(let dt=0,Zt=He.length;dt<Zt;dt++){const Mt=Ke(He[dt],It[dt],cn);Et(Mt.x,Mt.y,_+Q)}for(let dt=0,Zt=re.length;dt<Zt;dt++){const Mt=re[dt];en=Xt[dt];for(let vn=0,Gt=Mt.length;vn<Gt;vn++){const Z=Ke(Mt[vn],en[vn],cn);D?Et(Z.x,Z.y+N[g-1].y,N[g-1].x+Q):Et(Z.x,Z.y,_+Q)}}}$e(),vt();function $e(){const nt=r.length/3;if(x){let xt=0,Q=ke*xt;for(let cn=0;cn<st;cn++){const dt=Ae[cn];un(dt[2]+Q,dt[1]+Q,dt[0]+Q)}xt=g+b*2,Q=ke*xt;for(let cn=0;cn<st;cn++){const dt=Ae[cn];un(dt[0]+Q,dt[1]+Q,dt[2]+Q)}}else{for(let xt=0;xt<st;xt++){const Q=Ae[xt];un(Q[2],Q[1],Q[0])}for(let xt=0;xt<st;xt++){const Q=Ae[xt];un(Q[0]+ke*g,Q[1]+ke*g,Q[2]+ke*g)}}i.addGroup(nt,r.length/3-nt,0)}function vt(){const nt=r.length/3;let xt=0;rn(He,xt),xt+=He.length;for(let Q=0,cn=re.length;Q<cn;Q++){const dt=re[Q];rn(dt,xt),xt+=dt.length}i.addGroup(nt,r.length/3-nt,1)}function rn(nt,xt){let Q=nt.length;for(;--Q>=0;){const cn=Q;let dt=Q-1;dt<0&&(dt=nt.length-1);for(let Zt=0,Mt=g+b*2;Zt<Mt;Zt++){const vn=ke*Zt,Gt=ke*(Zt+1),Z=xt+cn+vn,V=xt+dt+vn,Me=xt+dt+Gt,qe=xt+cn+Gt;Tn(Z,V,Me,qe)}}}function Et(nt,xt,Q){f.push(nt),f.push(xt),f.push(Q)}function un(nt,xt,Q){yn(nt),yn(xt),yn(Q);const cn=r.length/3,dt=O.generateTopUV(i,r,cn-3,cn-2,cn-1);jn(dt[0]),jn(dt[1]),jn(dt[2])}function Tn(nt,xt,Q,cn){yn(nt),yn(xt),yn(cn),yn(xt),yn(Q),yn(cn);const dt=r.length/3,Zt=O.generateSideWallUV(i,r,dt-6,dt-3,dt-2,dt-1);jn(Zt[0]),jn(Zt[1]),jn(Zt[3]),jn(Zt[1]),jn(Zt[2]),jn(Zt[3])}function yn(nt){r.push(f[nt*3+0]),r.push(f[nt*3+1]),r.push(f[nt*3+2])}function jn(nt){a.push(nt.x),a.push(nt.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,i=this.parameters.options;return Fy(t,i,e)}static fromJSON(e,t){const i=[];for(let a=0,c=e.shapes.length;a<c;a++){const h=t[e.shapes[a]];i.push(h)}const r=e.options.extrudePath;return r!==void 0&&(e.options.extrudePath=new fh[r.type]().fromJSON(r)),new bh(i,e.options)}}const Ny={generateTopUV:function(o,e,t,i,r){const a=e[t*3],c=e[t*3+1],h=e[i*3],f=e[i*3+1],p=e[r*3],g=e[r*3+1];return[new et(a,c),new et(h,f),new et(p,g)]},generateSideWallUV:function(o,e,t,i,r,a){const c=e[t*3],h=e[t*3+1],f=e[t*3+2],p=e[i*3],g=e[i*3+1],_=e[i*3+2],x=e[r*3],y=e[r*3+1],E=e[r*3+2],w=e[a*3],b=e[a*3+1],S=e[a*3+2];return Math.abs(h-g)<Math.abs(c-p)?[new et(c,1-f),new et(p,1-_),new et(x,1-E),new et(w,1-S)]:[new et(h,1-f),new et(g,1-_),new et(y,1-E),new et(b,1-S)]}};function Fy(o,e,t){if(t.shapes=[],Array.isArray(o))for(let i=0,r=o.length;i<r;i++){const a=o[i];t.shapes.push(a.uuid)}else t.shapes.push(o.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class Th extends js{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,r=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],a=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(r,a,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Th(e.radius,e.detail)}}class Zc extends js{constructor(e=1,t=0){const i=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],r=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(i,r,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Zc(e.radius,e.detail)}}class zo extends In{constructor(e=1,t=1,i=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:i,heightSegments:r};const a=e/2,c=t/2,h=Math.floor(i),f=Math.floor(r),p=h+1,g=f+1,_=e/h,x=t/f,y=[],E=[],w=[],b=[];for(let S=0;S<g;S++){const O=S*x-c;for(let N=0;N<p;N++){const D=N*_-a;E.push(D,-O,0),w.push(0,0,1),b.push(N/h),b.push(1-S/f)}}for(let S=0;S<f;S++)for(let O=0;O<h;O++){const N=O+p*S,D=O+p*(S+1),te=O+1+p*(S+1),$=O+1+p*S;y.push(N,D,$),y.push(D,te,$)}this.setIndex(y),this.setAttribute("position",new tn(E,3)),this.setAttribute("normal",new tn(w,3)),this.setAttribute("uv",new tn(b,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new zo(e.width,e.height,e.widthSegments,e.heightSegments)}}class Ah extends In{constructor(e=.5,t=1,i=32,r=1,a=0,c=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:r,thetaStart:a,thetaLength:c},i=Math.max(3,i),r=Math.max(1,r);const h=[],f=[],p=[],g=[];let _=e;const x=(t-e)/r,y=new J,E=new et;for(let w=0;w<=r;w++){for(let b=0;b<=i;b++){const S=a+b/i*c;y.x=_*Math.cos(S),y.y=_*Math.sin(S),f.push(y.x,y.y,y.z),p.push(0,0,1),E.x=(y.x/t+1)/2,E.y=(y.y/t+1)/2,g.push(E.x,E.y)}_+=x}for(let w=0;w<r;w++){const b=w*(i+1);for(let S=0;S<i;S++){const O=S+b,N=O,D=O+i+1,te=O+i+2,$=O+1;h.push(N,D,$),h.push(D,te,$)}}this.setIndex(h),this.setAttribute("position",new tn(f,3)),this.setAttribute("normal",new tn(p,3)),this.setAttribute("uv",new tn(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ah(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class wh extends In{constructor(e=new Ca([new et(0,.5),new et(-.5,-.5),new et(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const i=[],r=[],a=[],c=[];let h=0,f=0;if(Array.isArray(e)===!1)p(e);else for(let g=0;g<e.length;g++)p(e[g]),this.addGroup(h,f,g),h+=f,f=0;this.setIndex(i),this.setAttribute("position",new tn(r,3)),this.setAttribute("normal",new tn(a,3)),this.setAttribute("uv",new tn(c,2));function p(g){const _=r.length/3,x=g.extractPoints(t);let y=x.shape;const E=x.holes;hs.isClockWise(y)===!1&&(y=y.reverse());for(let b=0,S=E.length;b<S;b++){const O=E[b];hs.isClockWise(O)===!0&&(E[b]=O.reverse())}const w=hs.triangulateShape(y,E);for(let b=0,S=E.length;b<S;b++){const O=E[b];y=y.concat(O)}for(let b=0,S=y.length;b<S;b++){const O=y[b];r.push(O.x,O.y,0),a.push(0,0,1),c.push(O.x,O.y)}for(let b=0,S=w.length;b<S;b++){const O=w[b],N=O[0]+_,D=O[1]+_,te=O[2]+_;i.push(N,D,te),f+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return Oy(t,e)}static fromJSON(e,t){const i=[];for(let r=0,a=e.shapes.length;r<a;r++){const c=t[e.shapes[r]];i.push(c)}return new wh(i,e.curveSegments)}}function Oy(o,e){if(e.shapes=[],Array.isArray(o))for(let t=0,i=o.length;t<i;t++){const r=o[t];e.shapes.push(r.uuid)}else e.shapes.push(o.uuid);return e}class $c extends In{constructor(e=1,t=32,i=16,r=0,a=Math.PI*2,c=0,h=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:r,phiLength:a,thetaStart:c,thetaLength:h},t=Math.max(3,Math.floor(t)),i=Math.max(2,Math.floor(i));const f=Math.min(c+h,Math.PI);let p=0;const g=[],_=new J,x=new J,y=[],E=[],w=[],b=[];for(let S=0;S<=i;S++){const O=[],N=S/i;let D=0;S===0&&c===0?D=.5/t:S===i&&f===Math.PI&&(D=-.5/t);for(let te=0;te<=t;te++){const $=te/t;_.x=-e*Math.cos(r+$*a)*Math.sin(c+N*h),_.y=e*Math.cos(c+N*h),_.z=e*Math.sin(r+$*a)*Math.sin(c+N*h),E.push(_.x,_.y,_.z),x.copy(_).normalize(),w.push(x.x,x.y,x.z),b.push($+D,1-N),O.push(p++)}g.push(O)}for(let S=0;S<i;S++)for(let O=0;O<t;O++){const N=g[S][O+1],D=g[S][O],te=g[S+1][O],$=g[S+1][O+1];(S!==0||c>0)&&y.push(N,D,$),(S!==i-1||f<Math.PI)&&y.push(D,te,$)}this.setIndex(y),this.setAttribute("position",new tn(E,3)),this.setAttribute("normal",new tn(w,3)),this.setAttribute("uv",new tn(b,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new $c(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Ch extends js{constructor(e=1,t=0){const i=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],r=[2,1,0,0,3,2,1,3,0,2,3,1];super(i,r,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ch(e.radius,e.detail)}}class Rh extends In{constructor(e=1,t=.4,i=12,r=48,a=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:r,arc:a},i=Math.floor(i),r=Math.floor(r);const c=[],h=[],f=[],p=[],g=new J,_=new J,x=new J;for(let y=0;y<=i;y++)for(let E=0;E<=r;E++){const w=E/r*a,b=y/i*Math.PI*2;_.x=(e+t*Math.cos(b))*Math.cos(w),_.y=(e+t*Math.cos(b))*Math.sin(w),_.z=t*Math.sin(b),h.push(_.x,_.y,_.z),g.x=e*Math.cos(w),g.y=e*Math.sin(w),x.subVectors(_,g).normalize(),f.push(x.x,x.y,x.z),p.push(E/r),p.push(y/i)}for(let y=1;y<=i;y++)for(let E=1;E<=r;E++){const w=(r+1)*y+E-1,b=(r+1)*(y-1)+E-1,S=(r+1)*(y-1)+E,O=(r+1)*y+E;c.push(w,b,O),c.push(b,S,O)}this.setIndex(c),this.setAttribute("position",new tn(h,3)),this.setAttribute("normal",new tn(f,3)),this.setAttribute("uv",new tn(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Rh(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class Ph extends In{constructor(e=1,t=.4,i=64,r=8,a=2,c=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:r,p:a,q:c},i=Math.floor(i),r=Math.floor(r);const h=[],f=[],p=[],g=[],_=new J,x=new J,y=new J,E=new J,w=new J,b=new J,S=new J;for(let N=0;N<=i;++N){const D=N/i*a*Math.PI*2;O(D,a,c,e,y),O(D+.01,a,c,e,E),b.subVectors(E,y),S.addVectors(E,y),w.crossVectors(b,S),S.crossVectors(w,b),w.normalize(),S.normalize();for(let te=0;te<=r;++te){const $=te/r*Math.PI*2,j=-t*Math.cos($),ne=t*Math.sin($);_.x=y.x+(j*S.x+ne*w.x),_.y=y.y+(j*S.y+ne*w.y),_.z=y.z+(j*S.z+ne*w.z),f.push(_.x,_.y,_.z),x.subVectors(_,y).normalize(),p.push(x.x,x.y,x.z),g.push(N/i),g.push(te/r)}}for(let N=1;N<=i;N++)for(let D=1;D<=r;D++){const te=(r+1)*(N-1)+(D-1),$=(r+1)*N+(D-1),j=(r+1)*N+D,ne=(r+1)*(N-1)+D;h.push(te,$,ne),h.push($,j,ne)}this.setIndex(h),this.setAttribute("position",new tn(f,3)),this.setAttribute("normal",new tn(p,3)),this.setAttribute("uv",new tn(g,2));function O(N,D,te,$,j){const ne=Math.cos(N),H=Math.sin(N),z=te/D*N,re=Math.cos(z);j.x=$*(2+re)*.5*ne,j.y=$*(2+re)*H*.5,j.z=$*Math.sin(z)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ph(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class Ih extends In{constructor(e=new Md(new J(-1,-1,0),new J(-1,1,0),new J(1,1,0)),t=64,i=1,r=8,a=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:r,closed:a};const c=e.computeFrenetFrames(t,a);this.tangents=c.tangents,this.normals=c.normals,this.binormals=c.binormals;const h=new J,f=new J,p=new et;let g=new J;const _=[],x=[],y=[],E=[];w(),this.setIndex(E),this.setAttribute("position",new tn(_,3)),this.setAttribute("normal",new tn(x,3)),this.setAttribute("uv",new tn(y,2));function w(){for(let N=0;N<t;N++)b(N);b(a===!1?t:0),O(),S()}function b(N){g=e.getPointAt(N/t,g);const D=c.normals[N],te=c.binormals[N];for(let $=0;$<=r;$++){const j=$/r*Math.PI*2,ne=Math.sin(j),H=-Math.cos(j);f.x=H*D.x+ne*te.x,f.y=H*D.y+ne*te.y,f.z=H*D.z+ne*te.z,f.normalize(),x.push(f.x,f.y,f.z),h.x=g.x+i*f.x,h.y=g.y+i*f.y,h.z=g.z+i*f.z,_.push(h.x,h.y,h.z)}}function S(){for(let N=1;N<=t;N++)for(let D=1;D<=r;D++){const te=(r+1)*(N-1)+(D-1),$=(r+1)*N+(D-1),j=(r+1)*N+D,ne=(r+1)*(N-1)+D;E.push(te,$,ne),E.push($,j,ne)}}function O(){for(let N=0;N<=t;N++)for(let D=0;D<=r;D++)p.x=N/t,p.y=D/r,y.push(p.x,p.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new Ih(new fh[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class cg extends In{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],i=new Set,r=new J,a=new J;if(e.index!==null){const c=e.attributes.position,h=e.index;let f=e.groups;f.length===0&&(f=[{start:0,count:h.count,materialIndex:0}]);for(let p=0,g=f.length;p<g;++p){const _=f[p],x=_.start,y=_.count;for(let E=x,w=x+y;E<w;E+=3)for(let b=0;b<3;b++){const S=h.getX(E+b),O=h.getX(E+(b+1)%3);r.fromBufferAttribute(c,S),a.fromBufferAttribute(c,O),lg(r,a,i)===!0&&(t.push(r.x,r.y,r.z),t.push(a.x,a.y,a.z))}}}else{const c=e.attributes.position;for(let h=0,f=c.count/3;h<f;h++)for(let p=0;p<3;p++){const g=3*h+p,_=3*h+(p+1)%3;r.fromBufferAttribute(c,g),a.fromBufferAttribute(c,_),lg(r,a,i)===!0&&(t.push(r.x,r.y,r.z),t.push(a.x,a.y,a.z))}}this.setAttribute("position",new tn(t,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function lg(o,e,t){const i=`${o.x},${o.y},${o.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${o.x},${o.y},${o.z}`;return t.has(i)===!0||t.has(r)===!0?!1:(t.add(i),t.add(r),!0)}var hg=Object.freeze({__proto__:null,BoxGeometry:Ea,CapsuleGeometry:ph,CircleGeometry:mh,ConeGeometry:gh,CylinderGeometry:Oo,DodecahedronGeometry:_h,EdgesGeometry:tg,ExtrudeGeometry:bh,IcosahedronGeometry:Th,LatheGeometry:Wc,OctahedronGeometry:Zc,PlaneGeometry:zo,PolyhedronGeometry:js,RingGeometry:Ah,ShapeGeometry:wh,SphereGeometry:$c,TetrahedronGeometry:Ch,TorusGeometry:Rh,TorusKnotGeometry:Ph,TubeGeometry:Ih,WireframeGeometry:cg});class ug extends Ji{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Ht(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class dg extends qr{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class Ad extends Ji{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Ht(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ht(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Er,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class fg extends Ad{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new et(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return bn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Ht(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Ht(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Ht(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class pg extends Ji{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Ht(16777215),this.specular=new Ht(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ht(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Er,this.combine=ht,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class mg extends Ji{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ht(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ht(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class gg extends Ji{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class _g extends Ji{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Ht(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ht(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Er,this.combine=ht,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class wd extends Ji{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=zp,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class Cd extends Ji{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}class xg extends Ji{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ht(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Hs,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class vg extends cr{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function Pa(o,e,t){return!o||!t&&o.constructor===e?o:typeof e.BYTES_PER_ELEMENT=="number"?new e(o):Array.prototype.slice.call(o)}function yg(o){return ArrayBuffer.isView(o)&&!(o instanceof DataView)}function Mg(o){function e(r,a){return o[r]-o[a]}const t=o.length,i=new Array(t);for(let r=0;r!==t;++r)i[r]=r;return i.sort(e),i}function Rd(o,e,t){const i=o.length,r=new o.constructor(i);for(let a=0,c=0;c!==i;++a){const h=t[a]*e;for(let f=0;f!==e;++f)r[c++]=o[h+f]}return r}function Pd(o,e,t,i){let r=1,a=o[0];for(;a!==void 0&&a[i]===void 0;)a=o[r++];if(a===void 0)return;let c=a[i];if(c!==void 0)if(Array.isArray(c))do c=a[i],c!==void 0&&(e.push(a.time),t.push.apply(t,c)),a=o[r++];while(a!==void 0);else if(c.toArray!==void 0)do c=a[i],c!==void 0&&(e.push(a.time),c.toArray(t,t.length)),a=o[r++];while(a!==void 0);else do c=a[i],c!==void 0&&(e.push(a.time),t.push(c)),a=o[r++];while(a!==void 0)}function By(o,e,t,i,r=30){const a=o.clone();a.name=e;const c=[];for(let f=0;f<a.tracks.length;++f){const p=a.tracks[f],g=p.getValueSize(),_=[],x=[];for(let y=0;y<p.times.length;++y){const E=p.times[y]*r;if(!(E<t||E>=i)){_.push(p.times[y]);for(let w=0;w<g;++w)x.push(p.values[y*g+w])}}_.length!==0&&(p.times=Pa(_,p.times.constructor),p.values=Pa(x,p.values.constructor),c.push(p))}a.tracks=c;let h=1/0;for(let f=0;f<a.tracks.length;++f)h>a.tracks[f].times[0]&&(h=a.tracks[f].times[0]);for(let f=0;f<a.tracks.length;++f)a.tracks[f].shift(-1*h);return a.resetDuration(),a}function zy(o,e=0,t=o,i=30){i<=0&&(i=30);const r=t.tracks.length,a=e/i;for(let c=0;c<r;++c){const h=t.tracks[c],f=h.ValueTypeName;if(f==="bool"||f==="string")continue;const p=o.tracks.find(function(S){return S.name===h.name&&S.ValueTypeName===f});if(p===void 0)continue;let g=0;const _=h.getValueSize();h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(g=_/3);let x=0;const y=p.getValueSize();p.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(x=y/3);const E=h.times.length-1;let w;if(a<=h.times[0]){const S=g,O=_-g;w=h.values.slice(S,O)}else if(a>=h.times[E]){const S=E*_+g,O=S+_-g;w=h.values.slice(S,O)}else{const S=h.createInterpolant(),O=g,N=_-g;S.evaluate(a),w=S.resultBuffer.slice(O,N)}f==="quaternion"&&new dr().fromArray(w).normalize().conjugate().toArray(w);const b=p.times.length;for(let S=0;S<b;++S){const O=S*y+x;if(f==="quaternion")dr.multiplyQuaternionsFlat(p.values,O,w,0,p.values,O);else{const N=y-x*2;for(let D=0;D<N;++D)p.values[O+D]-=w[D]}}}return o.blendMode=Cu,o}const Vy={convertArray:Pa,isTypedArray:yg,getKeyframeOrder:Mg,sortedArray:Rd,flattenJSON:Pd,subclip:By,makeClipAdditive:zy};class Kc{constructor(e,t,i,r){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=r!==void 0?r:new t.constructor(i),this.sampleValues=t,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let i=this._cachedIndex,r=t[i],a=t[i-1];e:{t:{let c;n:{i:if(!(e<r)){for(let h=i+2;;){if(r===void 0){if(e<a)break i;return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===h)break;if(a=r,r=t[++i],e<r)break t}c=t.length;break n}if(!(e>=a)){const h=t[1];e<h&&(i=2,a=h);for(let f=i-2;;){if(a===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===f)break;if(r=a,a=t[--i-1],e>=a)break t}c=i,i=0;break n}break e}for(;i<c;){const h=i+c>>>1;e<t[h]?c=h:i=h+1}if(r=t[i],a=t[i-1],a===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(r===void 0)return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,a,r)}return this.interpolate_(i,a,e,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,i=this.sampleValues,r=this.valueSize,a=e*r;for(let c=0;c!==r;++c)t[c]=i[a+c];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Sg extends Kc{constructor(e,t,i,r){super(e,t,i,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:pa,endingEnd:pa}}intervalChanged_(e,t,i){const r=this.parameterPositions;let a=e-2,c=e+1,h=r[a],f=r[c];if(h===void 0)switch(this.getSettings_().endingStart){case ma:a=e,h=2*t-i;break;case Mc:a=r.length-2,h=t+r[a]-r[a+1];break;default:a=e,h=i}if(f===void 0)switch(this.getSettings_().endingEnd){case ma:c=e,f=2*i-t;break;case Mc:c=1,f=i+r[1]-r[0];break;default:c=e-1,f=t}const p=(i-t)*.5,g=this.valueSize;this._weightPrev=p/(t-h),this._weightNext=p/(f-i),this._offsetPrev=a*g,this._offsetNext=c*g}interpolate_(e,t,i,r){const a=this.resultBuffer,c=this.sampleValues,h=this.valueSize,f=e*h,p=f-h,g=this._offsetPrev,_=this._offsetNext,x=this._weightPrev,y=this._weightNext,E=(i-t)/(r-t),w=E*E,b=w*E,S=-x*b+2*x*w-x*E,O=(1+x)*b+(-1.5-2*x)*w+(-.5+x)*E+1,N=(-1-y)*b+(1.5+y)*w+.5*E,D=y*b-y*w;for(let te=0;te!==h;++te)a[te]=S*c[g+te]+O*c[p+te]+N*c[f+te]+D*c[_+te];return a}}class Id extends Kc{constructor(e,t,i,r){super(e,t,i,r)}interpolate_(e,t,i,r){const a=this.resultBuffer,c=this.sampleValues,h=this.valueSize,f=e*h,p=f-h,g=(i-t)/(r-t),_=1-g;for(let x=0;x!==h;++x)a[x]=c[p+x]*_+c[f+x]*g;return a}}class Eg extends Kc{constructor(e,t,i,r){super(e,t,i,r)}interpolate_(e){return this.copySampleValue_(e-1)}}class Zr{constructor(e,t,i,r){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Pa(t,this.TimeBufferType),this.values=Pa(i,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let i;if(t.toJSON!==this.toJSON)i=t.toJSON(e);else{i={name:e.name,times:Pa(e.times,Array),values:Pa(e.values,Array)};const r=e.getInterpolation();r!==e.DefaultInterpolation&&(i.interpolation=r)}return i.type=e.ValueTypeName,i}InterpolantFactoryMethodDiscrete(e){return new Eg(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Id(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Sg(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case yc:t=this.InterpolantFactoryMethodDiscrete;break;case El:t=this.InterpolantFactoryMethodLinear;break;case bl:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(i);return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return yc;case this.InterpolantFactoryMethodLinear:return El;case this.InterpolantFactoryMethodSmooth:return bl}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let i=0,r=t.length;i!==r;++i)t[i]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let i=0,r=t.length;i!==r;++i)t[i]*=e}return this}trim(e,t){const i=this.times,r=i.length;let a=0,c=r-1;for(;a!==r&&i[a]<e;)++a;for(;c!==-1&&i[c]>t;)--c;if(++c,a!==0||c!==r){a>=c&&(c=Math.max(c,1),a=c-1);const h=this.getValueSize();this.times=i.slice(a,c),this.values=this.values.slice(a*h,c*h)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const i=this.times,r=this.values,a=i.length;a===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let c=null;for(let h=0;h!==a;h++){const f=i[h];if(typeof f=="number"&&isNaN(f)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,h,f),e=!1;break}if(c!==null&&c>f){console.error("THREE.KeyframeTrack: Out of order keys.",this,h,f,c),e=!1;break}c=f}if(r!==void 0&&yg(r))for(let h=0,f=r.length;h!==f;++h){const p=r[h];if(isNaN(p)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,h,p),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),i=this.getValueSize(),r=this.getInterpolation()===bl,a=e.length-1;let c=1;for(let h=1;h<a;++h){let f=!1;const p=e[h],g=e[h+1];if(p!==g&&(h!==1||p!==e[0]))if(r)f=!0;else{const _=h*i,x=_-i,y=_+i;for(let E=0;E!==i;++E){const w=t[_+E];if(w!==t[x+E]||w!==t[y+E]){f=!0;break}}}if(f){if(h!==c){e[c]=e[h];const _=h*i,x=c*i;for(let y=0;y!==i;++y)t[x+y]=t[_+y]}++c}}if(a>0){e[c]=e[a];for(let h=a*i,f=c*i,p=0;p!==i;++p)t[f+p]=t[h+p];++c}return c!==e.length?(this.times=e.slice(0,c),this.values=t.slice(0,c*i)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),i=this.constructor,r=new i(this.name,e,t);return r.createInterpolant=this.createInterpolant,r}}Zr.prototype.TimeBufferType=Float32Array,Zr.prototype.ValueBufferType=Float32Array,Zr.prototype.DefaultInterpolation=El;class Ia extends Zr{constructor(e,t,i){super(e,t,i)}}Ia.prototype.ValueTypeName="bool",Ia.prototype.ValueBufferType=Array,Ia.prototype.DefaultInterpolation=yc,Ia.prototype.InterpolantFactoryMethodLinear=void 0,Ia.prototype.InterpolantFactoryMethodSmooth=void 0;class Ld extends Zr{}Ld.prototype.ValueTypeName="color";class Jc extends Zr{}Jc.prototype.ValueTypeName="number";class bg extends Kc{constructor(e,t,i,r){super(e,t,i,r)}interpolate_(e,t,i,r){const a=this.resultBuffer,c=this.sampleValues,h=this.valueSize,f=(i-t)/(r-t);let p=e*h;for(let g=p+h;p!==g;p+=4)dr.slerpFlat(a,0,c,p-h,c,p,f);return a}}class jc extends Zr{InterpolantFactoryMethodLinear(e){return new bg(this.times,this.values,this.getValueSize(),e)}}jc.prototype.ValueTypeName="quaternion",jc.prototype.InterpolantFactoryMethodSmooth=void 0;class La extends Zr{constructor(e,t,i){super(e,t,i)}}La.prototype.ValueTypeName="string",La.prototype.ValueBufferType=Array,La.prototype.DefaultInterpolation=yc,La.prototype.InterpolantFactoryMethodLinear=void 0,La.prototype.InterpolantFactoryMethodSmooth=void 0;class Qc extends Zr{}Qc.prototype.ValueTypeName="vector";class el{constructor(e="",t=-1,i=[],r=Tl){this.name=e,this.tracks=i,this.duration=t,this.blendMode=r,this.uuid=Mr(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],i=e.tracks,r=1/(e.fps||1);for(let c=0,h=i.length;c!==h;++c)t.push(Hy(i[c]).scale(r));const a=new this(e.name,e.duration,t,e.blendMode);return a.uuid=e.uuid,a}static toJSON(e){const t=[],i=e.tracks,r={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let a=0,c=i.length;a!==c;++a)t.push(Zr.toJSON(i[a]));return r}static CreateFromMorphTargetSequence(e,t,i,r){const a=t.length,c=[];for(let h=0;h<a;h++){let f=[],p=[];f.push((h+a-1)%a,h,(h+1)%a),p.push(0,1,0);const g=Mg(f);f=Rd(f,1,g),p=Rd(p,1,g),!r&&f[0]===0&&(f.push(a),p.push(p[0])),c.push(new Jc(".morphTargetInfluences["+t[h].name+"]",f,p).scale(1/i))}return new this(e,-1,c)}static findByName(e,t){let i=e;if(!Array.isArray(e)){const r=e;i=r.geometry&&r.geometry.animations||r.animations}for(let r=0;r<i.length;r++)if(i[r].name===t)return i[r];return null}static CreateClipsFromMorphTargetSequences(e,t,i){const r={},a=/^([\w-]*?)([\d]+)$/;for(let h=0,f=e.length;h<f;h++){const p=e[h],g=p.name.match(a);if(g&&g.length>1){const _=g[1];let x=r[_];x||(r[_]=x=[]),x.push(p)}}const c=[];for(const h in r)c.push(this.CreateFromMorphTargetSequence(h,r[h],t,i));return c}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(_,x,y,E,w){if(y.length!==0){const b=[],S=[];Pd(y,b,S,E),b.length!==0&&w.push(new _(x,b,S))}},r=[],a=e.name||"default",c=e.fps||30,h=e.blendMode;let f=e.length||-1;const p=e.hierarchy||[];for(let _=0;_<p.length;_++){const x=p[_].keys;if(!(!x||x.length===0))if(x[0].morphTargets){const y={};let E;for(E=0;E<x.length;E++)if(x[E].morphTargets)for(let w=0;w<x[E].morphTargets.length;w++)y[x[E].morphTargets[w]]=-1;for(const w in y){const b=[],S=[];for(let O=0;O!==x[E].morphTargets.length;++O){const N=x[E];b.push(N.time),S.push(N.morphTarget===w?1:0)}r.push(new Jc(".morphTargetInfluence["+w+"]",b,S))}f=y.length*c}else{const y=".bones["+t[_].name+"]";i(Qc,y+".position",x,"pos",r),i(jc,y+".quaternion",x,"rot",r),i(Qc,y+".scale",x,"scl",r)}}return r.length===0?null:new this(a,f,r,h)}resetDuration(){const e=this.tracks;let t=0;for(let i=0,r=e.length;i!==r;++i){const a=this.tracks[i];t=Math.max(t,a.times[a.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function ky(o){switch(o.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Jc;case"vector":case"vector2":case"vector3":case"vector4":return Qc;case"color":return Ld;case"quaternion":return jc;case"bool":case"boolean":return Ia;case"string":return La}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+o)}function Hy(o){if(o.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=ky(o.type);if(o.times===void 0){const t=[],i=[];Pd(o.keys,t,i,"value"),o.times=t,o.values=i}return e.parse!==void 0?e.parse(o):new e(o.name,o.times,o.values,o.interpolation)}const Es={enabled:!1,files:{},add:function(o,e){this.enabled!==!1&&(this.files[o]=e)},get:function(o){if(this.enabled!==!1)return this.files[o]},remove:function(o){delete this.files[o]},clear:function(){this.files={}}};class Dd{constructor(e,t,i){const r=this;let a=!1,c=0,h=0,f;const p=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.itemStart=function(g){h++,a===!1&&r.onStart!==void 0&&r.onStart(g,c,h),a=!0},this.itemEnd=function(g){c++,r.onProgress!==void 0&&r.onProgress(g,c,h),c===h&&(a=!1,r.onLoad!==void 0&&r.onLoad())},this.itemError=function(g){r.onError!==void 0&&r.onError(g)},this.resolveURL=function(g){return f?f(g):g},this.setURLModifier=function(g){return f=g,this},this.addHandler=function(g,_){return p.push(g,_),this},this.removeHandler=function(g){const _=p.indexOf(g);return _!==-1&&p.splice(_,2),this},this.getHandler=function(g){for(let _=0,x=p.length;_<x;_+=2){const y=p[_],E=p[_+1];if(y.global&&(y.lastIndex=0),y.test(g))return E}return null}}}const Tg=new Dd;class gr{constructor(e){this.manager=e!==void 0?e:Tg,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const i=this;return new Promise(function(r,a){i.load(e,r,t,a)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}gr.DEFAULT_MATERIAL_NAME="__DEFAULT";const bs={};class Gy extends Error{constructor(e,t){super(e),this.response=t}}class Ts extends gr{constructor(e){super(e)}load(e,t,i,r){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const a=Es.get(e);if(a!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(a),this.manager.itemEnd(e)},0),a;if(bs[e]!==void 0){bs[e].push({onLoad:t,onProgress:i,onError:r});return}bs[e]=[],bs[e].push({onLoad:t,onProgress:i,onError:r});const c=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),h=this.mimeType,f=this.responseType;fetch(c).then(p=>{if(p.status===200||p.status===0){if(p.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||p.body===void 0||p.body.getReader===void 0)return p;const g=bs[e],_=p.body.getReader(),x=p.headers.get("X-File-Size")||p.headers.get("Content-Length"),y=x?parseInt(x):0,E=y!==0;let w=0;const b=new ReadableStream({start(S){O();function O(){_.read().then(({done:N,value:D})=>{if(N)S.close();else{w+=D.byteLength;const te=new ProgressEvent("progress",{lengthComputable:E,loaded:w,total:y});for(let $=0,j=g.length;$<j;$++){const ne=g[$];ne.onProgress&&ne.onProgress(te)}S.enqueue(D),O()}},N=>{S.error(N)})}}});return new Response(b)}else throw new Gy(`fetch for "${p.url}" responded with ${p.status}: ${p.statusText}`,p)}).then(p=>{switch(f){case"arraybuffer":return p.arrayBuffer();case"blob":return p.blob();case"document":return p.text().then(g=>new DOMParser().parseFromString(g,h));case"json":return p.json();default:if(h===void 0)return p.text();{const _=/charset="?([^;"\s]*)"?/i.exec(h),x=_&&_[1]?_[1].toLowerCase():void 0,y=new TextDecoder(x);return p.arrayBuffer().then(E=>y.decode(E))}}}).then(p=>{Es.add(e,p);const g=bs[e];delete bs[e];for(let _=0,x=g.length;_<x;_++){const y=g[_];y.onLoad&&y.onLoad(p)}}).catch(p=>{const g=bs[e];if(g===void 0)throw this.manager.itemError(e),p;delete bs[e];for(let _=0,x=g.length;_<x;_++){const y=g[_];y.onError&&y.onError(p)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Wy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=new Ts(this.manager);c.setPath(this.path),c.setRequestHeader(this.requestHeader),c.setWithCredentials(this.withCredentials),c.load(e,function(h){try{t(a.parse(JSON.parse(h)))}catch(f){r?r(f):console.error(f),a.manager.itemError(e)}},i,r)}parse(e){const t=[];for(let i=0;i<e.length;i++){const r=el.parse(e[i]);t.push(r)}return t}}class Xy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=[],h=new hh,f=new Ts(this.manager);f.setPath(this.path),f.setResponseType("arraybuffer"),f.setRequestHeader(this.requestHeader),f.setWithCredentials(a.withCredentials);let p=0;function g(_){f.load(e[_],function(x){const y=a.parse(x,!0);c[_]={width:y.width,height:y.height,format:y.format,mipmaps:y.mipmaps},p+=1,p===6&&(y.mipmapCount===1&&(h.minFilter=ae),h.image=c,h.format=y.format,h.needsUpdate=!0,t&&t(h))},i,r)}if(Array.isArray(e))for(let _=0,x=e.length;_<x;++_)g(_);else f.load(e,function(_){const x=a.parse(_,!0);if(x.isCubemap){const y=x.mipmaps.length/x.mipmapCount;for(let E=0;E<y;E++){c[E]={mipmaps:[]};for(let w=0;w<x.mipmapCount;w++)c[E].mipmaps.push(x.mipmaps[E*x.mipmapCount+w]),c[E].format=x.format,c[E].width=x.width,c[E].height=x.height}h.image=c}else h.image.width=x.width,h.image.height=x.height,h.mipmaps=x.mipmaps;x.mipmapCount===1&&(h.minFilter=ae),h.format=x.format,h.needsUpdate=!0,t&&t(h)},i,r);return h}}class tl extends gr{constructor(e){super(e)}load(e,t,i,r){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const a=this,c=Es.get(e);if(c!==void 0)return a.manager.itemStart(e),setTimeout(function(){t&&t(c),a.manager.itemEnd(e)},0),c;const h=Ac("img");function f(){g(),Es.add(e,this),t&&t(this),a.manager.itemEnd(e)}function p(_){g(),r&&r(_),a.manager.itemError(e),a.manager.itemEnd(e)}function g(){h.removeEventListener("load",f,!1),h.removeEventListener("error",p,!1)}return h.addEventListener("load",f,!1),h.addEventListener("error",p,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(h.crossOrigin=this.crossOrigin),a.manager.itemStart(e),h.src=e,h}}class qy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=new Lc;a.colorSpace=ur;const c=new tl(this.manager);c.setCrossOrigin(this.crossOrigin),c.setPath(this.path);let h=0;function f(p){c.load(e[p],function(g){a.images[p]=g,h++,h===6&&(a.needsUpdate=!0,t&&t(a))},void 0,r)}for(let p=0;p<e.length;++p)f(p);return a}}class Yy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=new cs,h=new Ts(this.manager);return h.setResponseType("arraybuffer"),h.setRequestHeader(this.requestHeader),h.setPath(this.path),h.setWithCredentials(a.withCredentials),h.load(e,function(f){let p;try{p=a.parse(f)}catch(g){if(r!==void 0)r(g);else{console.error(g);return}}p.image!==void 0?c.image=p.image:p.data!==void 0&&(c.image.width=p.width,c.image.height=p.height,c.image.data=p.data),c.wrapS=p.wrapS!==void 0?p.wrapS:it,c.wrapT=p.wrapT!==void 0?p.wrapT:it,c.magFilter=p.magFilter!==void 0?p.magFilter:ae,c.minFilter=p.minFilter!==void 0?p.minFilter:ae,c.anisotropy=p.anisotropy!==void 0?p.anisotropy:1,p.colorSpace!==void 0&&(c.colorSpace=p.colorSpace),p.flipY!==void 0&&(c.flipY=p.flipY),p.format!==void 0&&(c.format=p.format),p.type!==void 0&&(c.type=p.type),p.mipmaps!==void 0&&(c.mipmaps=p.mipmaps,c.minFilter=Xe),p.mipmapCount===1&&(c.minFilter=ae),p.generateMipmaps!==void 0&&(c.generateMipmaps=p.generateMipmaps),c.needsUpdate=!0,t&&t(c,p)},i,r),c}}class Zy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=new Ei,c=new tl(this.manager);return c.setCrossOrigin(this.crossOrigin),c.setPath(this.path),c.load(e,function(h){a.image=h,a.needsUpdate=!0,t!==void 0&&t(a)},i,r),a}}class Qs extends Kn{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Ht(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}class Ag extends Qs{constructor(e,t,i){super(e,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Kn.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Ht(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const Ud=new xn,wg=new J,Cg=new J;class Nd{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new et(512,512),this.map=null,this.mapPass=null,this.matrix=new xn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Bc,this._frameExtents=new et(1,1),this._viewportCount=1,this._viewports=[new $n(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,i=this.matrix;wg.setFromMatrixPosition(e.matrixWorld),t.position.copy(wg),Cg.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Cg),t.updateMatrixWorld(),Ud.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ud),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(Ud)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class $y extends Nd{constructor(){super(new Xi(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,i=uo*2*e.angle*this.focus,r=this.mapSize.width/this.mapSize.height,a=e.distance||t.far;(i!==t.fov||r!==t.aspect||a!==t.far)&&(t.fov=i,t.aspect=r,t.far=a,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class Rg extends Qs{constructor(e,t,i=0,r=Math.PI/3,a=0,c=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Kn.DEFAULT_UP),this.updateMatrix(),this.target=new Kn,this.distance=i,this.angle=r,this.penumbra=a,this.decay=c,this.map=null,this.shadow=new $y}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const Pg=new xn,nl=new J,Fd=new J;class Ky extends Nd{constructor(){super(new Xi(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new et(4,2),this._viewportCount=6,this._viewports=[new $n(2,1,1,1),new $n(0,1,1,1),new $n(3,1,1,1),new $n(1,1,1,1),new $n(3,0,1,1),new $n(1,0,1,1)],this._cubeDirections=[new J(1,0,0),new J(-1,0,0),new J(0,0,1),new J(0,0,-1),new J(0,1,0),new J(0,-1,0)],this._cubeUps=[new J(0,1,0),new J(0,1,0),new J(0,1,0),new J(0,1,0),new J(0,0,1),new J(0,0,-1)]}updateMatrices(e,t=0){const i=this.camera,r=this.matrix,a=e.distance||i.far;a!==i.far&&(i.far=a,i.updateProjectionMatrix()),nl.setFromMatrixPosition(e.matrixWorld),i.position.copy(nl),Fd.copy(i.position),Fd.add(this._cubeDirections[t]),i.up.copy(this._cubeUps[t]),i.lookAt(Fd),i.updateMatrixWorld(),r.makeTranslation(-nl.x,-nl.y,-nl.z),Pg.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Pg)}}class Ig extends Qs{constructor(e,t,i=0,r=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=r,this.shadow=new Ky}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class Lh extends Wl{constructor(e=-1,t=1,i=1,r=-1,a=.1,c=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=r,this.near=a,this.far=c,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,i,r,a,c){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=r,this.view.width=a,this.view.height=c,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let a=i-e,c=i+e,h=r+t,f=r-t;if(this.view!==null&&this.view.enabled){const p=(this.right-this.left)/this.view.fullWidth/this.zoom,g=(this.top-this.bottom)/this.view.fullHeight/this.zoom;a+=p*this.view.offsetX,c=a+p*this.view.width,h-=g*this.view.offsetY,f=h-g*this.view.height}this.projectionMatrix.makeOrthographic(a,c,h,f,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class Jy extends Nd{constructor(){super(new Lh(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Lg extends Qs{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Kn.DEFAULT_UP),this.updateMatrix(),this.target=new Kn,this.shadow=new Jy}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class Dg extends Qs{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class Ug extends Qs{constructor(e,t,i=10,r=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=r}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class Ng{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new J)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const i=e.x,r=e.y,a=e.z,c=this.coefficients;return t.copy(c[0]).multiplyScalar(.282095),t.addScaledVector(c[1],.488603*r),t.addScaledVector(c[2],.488603*a),t.addScaledVector(c[3],.488603*i),t.addScaledVector(c[4],1.092548*(i*r)),t.addScaledVector(c[5],1.092548*(r*a)),t.addScaledVector(c[6],.315392*(3*a*a-1)),t.addScaledVector(c[7],1.092548*(i*a)),t.addScaledVector(c[8],.546274*(i*i-r*r)),t}getIrradianceAt(e,t){const i=e.x,r=e.y,a=e.z,c=this.coefficients;return t.copy(c[0]).multiplyScalar(.886227),t.addScaledVector(c[1],2*.511664*r),t.addScaledVector(c[2],2*.511664*a),t.addScaledVector(c[3],2*.511664*i),t.addScaledVector(c[4],2*.429043*i*r),t.addScaledVector(c[5],2*.429043*r*a),t.addScaledVector(c[6],.743125*a*a-.247708),t.addScaledVector(c[7],2*.429043*i*a),t.addScaledVector(c[8],.429043*(i*i-r*r)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(e.coefficients[i],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let i=0;i<9;i++)this.coefficients[i].lerp(e.coefficients[i],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].fromArray(e,t+r*3);return this}toArray(e=[],t=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].toArray(e,t+r*3);return e}static getBasisAt(e,t){const i=e.x,r=e.y,a=e.z;t[0]=.282095,t[1]=.488603*r,t[2]=.488603*a,t[3]=.488603*i,t[4]=1.092548*i*r,t[5]=1.092548*r*a,t[6]=.315392*(3*a*a-1),t[7]=1.092548*i*a,t[8]=.546274*(i*i-r*r)}}class Fg extends Qs{constructor(e=new Ng,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class Dh extends gr{constructor(e){super(e),this.textures={}}load(e,t,i,r){const a=this,c=new Ts(a.manager);c.setPath(a.path),c.setRequestHeader(a.requestHeader),c.setWithCredentials(a.withCredentials),c.load(e,function(h){try{t(a.parse(JSON.parse(h)))}catch(f){r?r(f):console.error(f),a.manager.itemError(e)}},i,r)}parse(e){const t=this.textures;function i(a){return t[a]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",a),t[a]}const r=this.createMaterialFromType(e.type);if(e.uuid!==void 0&&(r.uuid=e.uuid),e.name!==void 0&&(r.name=e.name),e.color!==void 0&&r.color!==void 0&&r.color.setHex(e.color),e.roughness!==void 0&&(r.roughness=e.roughness),e.metalness!==void 0&&(r.metalness=e.metalness),e.sheen!==void 0&&(r.sheen=e.sheen),e.sheenColor!==void 0&&(r.sheenColor=new Ht().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(r.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&r.emissive!==void 0&&r.emissive.setHex(e.emissive),e.specular!==void 0&&r.specular!==void 0&&r.specular.setHex(e.specular),e.specularIntensity!==void 0&&(r.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&r.specularColor!==void 0&&r.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(r.shininess=e.shininess),e.clearcoat!==void 0&&(r.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(r.clearcoatRoughness=e.clearcoatRoughness),e.dispersion!==void 0&&(r.dispersion=e.dispersion),e.iridescence!==void 0&&(r.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(r.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(r.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(r.transmission=e.transmission),e.thickness!==void 0&&(r.thickness=e.thickness),e.attenuationDistance!==void 0&&(r.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&r.attenuationColor!==void 0&&r.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(r.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(r.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(r.fog=e.fog),e.flatShading!==void 0&&(r.flatShading=e.flatShading),e.blending!==void 0&&(r.blending=e.blending),e.combine!==void 0&&(r.combine=e.combine),e.side!==void 0&&(r.side=e.side),e.shadowSide!==void 0&&(r.shadowSide=e.shadowSide),e.opacity!==void 0&&(r.opacity=e.opacity),e.transparent!==void 0&&(r.transparent=e.transparent),e.alphaTest!==void 0&&(r.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(r.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(r.depthFunc=e.depthFunc),e.depthTest!==void 0&&(r.depthTest=e.depthTest),e.depthWrite!==void 0&&(r.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(r.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(r.blendSrc=e.blendSrc),e.blendDst!==void 0&&(r.blendDst=e.blendDst),e.blendEquation!==void 0&&(r.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(r.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(r.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(r.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&r.blendColor!==void 0&&r.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(r.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(r.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(r.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(r.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(r.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(r.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(r.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(r.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(r.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(r.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(r.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(r.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(r.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(r.rotation=e.rotation),e.linewidth!==void 0&&(r.linewidth=e.linewidth),e.dashSize!==void 0&&(r.dashSize=e.dashSize),e.gapSize!==void 0&&(r.gapSize=e.gapSize),e.scale!==void 0&&(r.scale=e.scale),e.polygonOffset!==void 0&&(r.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(r.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(r.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(r.dithering=e.dithering),e.alphaToCoverage!==void 0&&(r.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(r.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(r.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(r.visible=e.visible),e.toneMapped!==void 0&&(r.toneMapped=e.toneMapped),e.userData!==void 0&&(r.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?r.vertexColors=e.vertexColors>0:r.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const a in e.uniforms){const c=e.uniforms[a];switch(r.uniforms[a]={},c.type){case"t":r.uniforms[a].value=i(c.value);break;case"c":r.uniforms[a].value=new Ht().setHex(c.value);break;case"v2":r.uniforms[a].value=new et().fromArray(c.value);break;case"v3":r.uniforms[a].value=new J().fromArray(c.value);break;case"v4":r.uniforms[a].value=new $n().fromArray(c.value);break;case"m3":r.uniforms[a].value=new wn().fromArray(c.value);break;case"m4":r.uniforms[a].value=new xn().fromArray(c.value);break;default:r.uniforms[a].value=c.value}}if(e.defines!==void 0&&(r.defines=e.defines),e.vertexShader!==void 0&&(r.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(r.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(r.glslVersion=e.glslVersion),e.extensions!==void 0)for(const a in e.extensions)r.extensions[a]=e.extensions[a];if(e.lights!==void 0&&(r.lights=e.lights),e.clipping!==void 0&&(r.clipping=e.clipping),e.size!==void 0&&(r.size=e.size),e.sizeAttenuation!==void 0&&(r.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(r.map=i(e.map)),e.matcap!==void 0&&(r.matcap=i(e.matcap)),e.alphaMap!==void 0&&(r.alphaMap=i(e.alphaMap)),e.bumpMap!==void 0&&(r.bumpMap=i(e.bumpMap)),e.bumpScale!==void 0&&(r.bumpScale=e.bumpScale),e.normalMap!==void 0&&(r.normalMap=i(e.normalMap)),e.normalMapType!==void 0&&(r.normalMapType=e.normalMapType),e.normalScale!==void 0){let a=e.normalScale;Array.isArray(a)===!1&&(a=[a,a]),r.normalScale=new et().fromArray(a)}return e.displacementMap!==void 0&&(r.displacementMap=i(e.displacementMap)),e.displacementScale!==void 0&&(r.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(r.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(r.roughnessMap=i(e.roughnessMap)),e.metalnessMap!==void 0&&(r.metalnessMap=i(e.metalnessMap)),e.emissiveMap!==void 0&&(r.emissiveMap=i(e.emissiveMap)),e.emissiveIntensity!==void 0&&(r.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(r.specularMap=i(e.specularMap)),e.specularIntensityMap!==void 0&&(r.specularIntensityMap=i(e.specularIntensityMap)),e.specularColorMap!==void 0&&(r.specularColorMap=i(e.specularColorMap)),e.envMap!==void 0&&(r.envMap=i(e.envMap)),e.envMapRotation!==void 0&&r.envMapRotation.fromArray(e.envMapRotation),e.envMapIntensity!==void 0&&(r.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(r.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(r.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(r.lightMap=i(e.lightMap)),e.lightMapIntensity!==void 0&&(r.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(r.aoMap=i(e.aoMap)),e.aoMapIntensity!==void 0&&(r.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(r.gradientMap=i(e.gradientMap)),e.clearcoatMap!==void 0&&(r.clearcoatMap=i(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(r.clearcoatRoughnessMap=i(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(r.clearcoatNormalMap=i(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(r.clearcoatNormalScale=new et().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(r.iridescenceMap=i(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(r.iridescenceThicknessMap=i(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(r.transmissionMap=i(e.transmissionMap)),e.thicknessMap!==void 0&&(r.thicknessMap=i(e.thicknessMap)),e.anisotropyMap!==void 0&&(r.anisotropyMap=i(e.anisotropyMap)),e.sheenColorMap!==void 0&&(r.sheenColorMap=i(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(r.sheenRoughnessMap=i(e.sheenRoughnessMap)),r}setTextures(e){return this.textures=e,this}createMaterialFromType(e){return Dh.createMaterialFromType(e)}static createMaterialFromType(e){const t={ShadowMaterial:ug,SpriteMaterial:td,RawShaderMaterial:dg,ShaderMaterial:qr,PointsMaterial:ud,MeshPhysicalMaterial:fg,MeshStandardMaterial:Ad,MeshPhongMaterial:pg,MeshToonMaterial:mg,MeshNormalMaterial:gg,MeshLambertMaterial:_g,MeshDepthMaterial:wd,MeshDistanceMaterial:Cd,MeshBasicMaterial:Zs,MeshMatcapMaterial:xg,LineDashedMaterial:vg,LineBasicMaterial:cr,Material:Ji};return new t[e]}}class Od{static decodeText(e){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let i=0,r=e.length;i<r;i++)t+=String.fromCharCode(e[i]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class Og extends In{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class Bg extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=new Ts(a.manager);c.setPath(a.path),c.setRequestHeader(a.requestHeader),c.setWithCredentials(a.withCredentials),c.load(e,function(h){try{t(a.parse(JSON.parse(h)))}catch(f){r?r(f):console.error(f),a.manager.itemError(e)}},i,r)}parse(e){const t={},i={};function r(y,E){if(t[E]!==void 0)return t[E];const b=y.interleavedBuffers[E],S=a(y,b.buffer),O=fo(b.type,S),N=new Yl(O,b.stride);return N.uuid=b.uuid,t[E]=N,N}function a(y,E){if(i[E]!==void 0)return i[E];const b=y.arrayBuffers[E],S=new Uint32Array(b).buffer;return i[E]=S,S}const c=e.isInstancedBufferGeometry?new Og:new In,h=e.data.index;if(h!==void 0){const y=fo(h.type,h.array);c.setIndex(new hi(y,1))}const f=e.data.attributes;for(const y in f){const E=f[y];let w;if(E.isInterleavedBufferAttribute){const b=r(e.data,E.data);w=new ba(b,E.itemSize,E.offset,E.normalized)}else{const b=fo(E.type,E.array),S=E.isInstancedBufferAttribute?Uo:hi;w=new S(b,E.itemSize,E.normalized)}E.name!==void 0&&(w.name=E.name),E.usage!==void 0&&w.setUsage(E.usage),c.setAttribute(y,w)}const p=e.data.morphAttributes;if(p)for(const y in p){const E=p[y],w=[];for(let b=0,S=E.length;b<S;b++){const O=E[b];let N;if(O.isInterleavedBufferAttribute){const D=r(e.data,O.data);N=new ba(D,O.itemSize,O.offset,O.normalized)}else{const D=fo(O.type,O.array);N=new hi(D,O.itemSize,O.normalized)}O.name!==void 0&&(N.name=O.name),w.push(N)}c.morphAttributes[y]=w}e.data.morphTargetsRelative&&(c.morphTargetsRelative=!0);const _=e.data.groups||e.data.drawcalls||e.data.offsets;if(_!==void 0)for(let y=0,E=_.length;y!==E;++y){const w=_[y];c.addGroup(w.start,w.count,w.materialIndex)}const x=e.data.boundingSphere;if(x!==void 0){const y=new J;x.center!==void 0&&y.fromArray(x.center),c.boundingSphere=new $i(y,x.radius)}return e.name&&(c.name=e.name),e.userData&&(c.userData=e.userData),c}}class jy extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=this.path===""?Od.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||c;const h=new Ts(this.manager);h.setPath(this.path),h.setRequestHeader(this.requestHeader),h.setWithCredentials(this.withCredentials),h.load(e,function(f){let p=null;try{p=JSON.parse(f)}catch(_){r!==void 0&&r(_),console.error("THREE:ObjectLoader: Can't parse "+e+".",_.message);return}const g=p.metadata;if(g===void 0||g.type===void 0||g.type.toLowerCase()==="geometry"){r!==void 0&&r(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}a.parse(p,t)},i,r)}async loadAsync(e,t){const i=this,r=this.path===""?Od.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||r;const a=new Ts(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials);const c=await a.loadAsync(e,t),h=JSON.parse(c),f=h.metadata;if(f===void 0||f.type===void 0||f.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await i.parseAsync(h)}parse(e,t){const i=this.parseAnimations(e.animations),r=this.parseShapes(e.shapes),a=this.parseGeometries(e.geometries,r),c=this.parseImages(e.images,function(){t!==void 0&&t(p)}),h=this.parseTextures(e.textures,c),f=this.parseMaterials(e.materials,h),p=this.parseObject(e.object,a,f,h,i),g=this.parseSkeletons(e.skeletons,p);if(this.bindSkeletons(p,g),this.bindLightTargets(p),t!==void 0){let _=!1;for(const x in c)if(c[x].data instanceof HTMLImageElement){_=!0;break}_===!1&&t(p)}return p}async parseAsync(e){const t=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),r=this.parseGeometries(e.geometries,i),a=await this.parseImagesAsync(e.images),c=this.parseTextures(e.textures,a),h=this.parseMaterials(e.materials,c),f=this.parseObject(e.object,r,h,c,t),p=this.parseSkeletons(e.skeletons,f);return this.bindSkeletons(f,p),this.bindLightTargets(f),f}parseShapes(e){const t={};if(e!==void 0)for(let i=0,r=e.length;i<r;i++){const a=new Ca().fromJSON(e[i]);t[a.uuid]=a}return t}parseSkeletons(e,t){const i={},r={};if(t.traverse(function(a){a.isBone&&(r[a.uuid]=a)}),e!==void 0)for(let a=0,c=e.length;a<c;a++){const h=new Ql().fromJSON(e[a],r);i[h.uuid]=h}return i}parseGeometries(e,t){const i={};if(e!==void 0){const r=new Bg;for(let a=0,c=e.length;a<c;a++){let h;const f=e[a];switch(f.type){case"BufferGeometry":case"InstancedBufferGeometry":h=r.parse(f);break;default:f.type in hg?h=hg[f.type].fromJSON(f,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${f.type}"`)}h.uuid=f.uuid,f.name!==void 0&&(h.name=f.name),f.userData!==void 0&&(h.userData=f.userData),i[f.uuid]=h}}return i}parseMaterials(e,t){const i={},r={};if(e!==void 0){const a=new Dh;a.setTextures(t);for(let c=0,h=e.length;c<h;c++){const f=e[c];i[f.uuid]===void 0&&(i[f.uuid]=a.parse(f)),r[f.uuid]=i[f.uuid]}}return r}parseAnimations(e){const t={};if(e!==void 0)for(let i=0;i<e.length;i++){const r=e[i],a=el.parse(r);t[a.uuid]=a}return t}parseImages(e,t){const i=this,r={};let a;function c(f){return i.manager.itemStart(f),a.load(f,function(){i.manager.itemEnd(f)},void 0,function(){i.manager.itemError(f),i.manager.itemEnd(f)})}function h(f){if(typeof f=="string"){const p=f,g=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(p)?p:i.resourcePath+p;return c(g)}else return f.data?{data:fo(f.type,f.data),width:f.width,height:f.height}:null}if(e!==void 0&&e.length>0){const f=new Dd(t);a=new tl(f),a.setCrossOrigin(this.crossOrigin);for(let p=0,g=e.length;p<g;p++){const _=e[p],x=_.url;if(Array.isArray(x)){const y=[];for(let E=0,w=x.length;E<w;E++){const b=x[E],S=h(b);S!==null&&(S instanceof HTMLImageElement?y.push(S):y.push(new cs(S.data,S.width,S.height)))}r[_.uuid]=new va(y)}else{const y=h(_.url);r[_.uuid]=new va(y)}}}return r}async parseImagesAsync(e){const t=this,i={};let r;async function a(c){if(typeof c=="string"){const h=c,f=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h)?h:t.resourcePath+h;return await r.loadAsync(f)}else return c.data?{data:fo(c.type,c.data),width:c.width,height:c.height}:null}if(e!==void 0&&e.length>0){r=new tl(this.manager),r.setCrossOrigin(this.crossOrigin);for(let c=0,h=e.length;c<h;c++){const f=e[c],p=f.url;if(Array.isArray(p)){const g=[];for(let _=0,x=p.length;_<x;_++){const y=p[_],E=await a(y);E!==null&&(E instanceof HTMLImageElement?g.push(E):g.push(new cs(E.data,E.width,E.height)))}i[f.uuid]=new va(g)}else{const g=await a(f.url);i[f.uuid]=new va(g)}}}return i}parseTextures(e,t){function i(a,c){return typeof a=="number"?a:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",a),c[a])}const r={};if(e!==void 0)for(let a=0,c=e.length;a<c;a++){const h=e[a];h.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',h.uuid),t[h.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",h.image);const f=t[h.image],p=f.data;let g;Array.isArray(p)?(g=new Lc,p.length===6&&(g.needsUpdate=!0)):(p&&p.data?g=new cs:g=new Ei,p&&(g.needsUpdate=!0)),g.source=f,g.uuid=h.uuid,h.name!==void 0&&(g.name=h.name),h.mapping!==void 0&&(g.mapping=i(h.mapping,Qy)),h.channel!==void 0&&(g.channel=h.channel),h.offset!==void 0&&g.offset.fromArray(h.offset),h.repeat!==void 0&&g.repeat.fromArray(h.repeat),h.center!==void 0&&g.center.fromArray(h.center),h.rotation!==void 0&&(g.rotation=h.rotation),h.wrap!==void 0&&(g.wrapS=i(h.wrap[0],zg),g.wrapT=i(h.wrap[1],zg)),h.format!==void 0&&(g.format=h.format),h.internalFormat!==void 0&&(g.internalFormat=h.internalFormat),h.type!==void 0&&(g.type=h.type),h.colorSpace!==void 0&&(g.colorSpace=h.colorSpace),h.minFilter!==void 0&&(g.minFilter=i(h.minFilter,Vg)),h.magFilter!==void 0&&(g.magFilter=i(h.magFilter,Vg)),h.anisotropy!==void 0&&(g.anisotropy=h.anisotropy),h.flipY!==void 0&&(g.flipY=h.flipY),h.generateMipmaps!==void 0&&(g.generateMipmaps=h.generateMipmaps),h.premultiplyAlpha!==void 0&&(g.premultiplyAlpha=h.premultiplyAlpha),h.unpackAlignment!==void 0&&(g.unpackAlignment=h.unpackAlignment),h.compareFunction!==void 0&&(g.compareFunction=h.compareFunction),h.userData!==void 0&&(g.userData=h.userData),r[h.uuid]=g}return r}parseObject(e,t,i,r,a){let c;function h(x){return t[x]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",x),t[x]}function f(x){if(x!==void 0){if(Array.isArray(x)){const y=[];for(let E=0,w=x.length;E<w;E++){const b=x[E];i[b]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",b),y.push(i[b])}return y}return i[x]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",x),i[x]}}function p(x){return r[x]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",x),r[x]}let g,_;switch(e.type){case"Scene":c=new Sm,e.background!==void 0&&(Number.isInteger(e.background)?c.background=new Ht(e.background):c.background=p(e.background)),e.environment!==void 0&&(c.environment=p(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?c.fog=new ql(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(c.fog=new Xl(e.fog.color,e.fog.density)),e.fog.name!==""&&(c.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(c.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(c.backgroundIntensity=e.backgroundIntensity),e.backgroundRotation!==void 0&&c.backgroundRotation.fromArray(e.backgroundRotation),e.environmentIntensity!==void 0&&(c.environmentIntensity=e.environmentIntensity),e.environmentRotation!==void 0&&c.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":c=new Xi(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(c.focus=e.focus),e.zoom!==void 0&&(c.zoom=e.zoom),e.filmGauge!==void 0&&(c.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(c.filmOffset=e.filmOffset),e.view!==void 0&&(c.view=Object.assign({},e.view));break;case"OrthographicCamera":c=new Lh(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(c.zoom=e.zoom),e.view!==void 0&&(c.view=Object.assign({},e.view));break;case"AmbientLight":c=new Dg(e.color,e.intensity);break;case"DirectionalLight":c=new Lg(e.color,e.intensity),c.target=e.target||"";break;case"PointLight":c=new Ig(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":c=new Ug(e.color,e.intensity,e.width,e.height);break;case"SpotLight":c=new Rg(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay),c.target=e.target||"";break;case"HemisphereLight":c=new Ag(e.color,e.groundColor,e.intensity);break;case"LightProbe":c=new Fg().fromJSON(e);break;case"SkinnedMesh":g=h(e.geometry),_=f(e.material),c=new Um(g,_),e.bindMode!==void 0&&(c.bindMode=e.bindMode),e.bindMatrix!==void 0&&c.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(c.skeleton=e.skeleton);break;case"Mesh":g=h(e.geometry),_=f(e.material),c=new Ii(g,_);break;case"InstancedMesh":g=h(e.geometry),_=f(e.material);const x=e.count,y=e.instanceMatrix,E=e.instanceColor;c=new Bm(g,_,x),c.instanceMatrix=new Uo(new Float32Array(y.array),16),E!==void 0&&(c.instanceColor=new Uo(new Float32Array(E.array),E.itemSize));break;case"BatchedMesh":g=h(e.geometry),_=f(e.material),c=new Vm(e.maxInstanceCount,e.maxVertexCount,e.maxIndexCount,_),c.geometry=g,c.perObjectFrustumCulled=e.perObjectFrustumCulled,c.sortObjects=e.sortObjects,c._drawRanges=e.drawRanges,c._reservedRanges=e.reservedRanges,c._visibility=e.visibility,c._active=e.active,c._bounds=e.bounds.map(w=>{const b=new sr;b.min.fromArray(w.boxMin),b.max.fromArray(w.boxMax);const S=new $i;return S.radius=w.sphereRadius,S.center.fromArray(w.sphereCenter),{boxInitialized:w.boxInitialized,box:b,sphereInitialized:w.sphereInitialized,sphere:S}}),c._maxInstanceCount=e.maxInstanceCount,c._maxVertexCount=e.maxVertexCount,c._maxIndexCount=e.maxIndexCount,c._geometryInitialized=e.geometryInitialized,c._geometryCount=e.geometryCount,c._matricesTexture=p(e.matricesTexture.uuid),e.colorsTexture!==void 0&&(c._colorsTexture=p(e.colorsTexture.uuid));break;case"LOD":c=new Cm;break;case"Line":c=new Js(h(e.geometry),f(e.material));break;case"LineLoop":c=new Xm(h(e.geometry),f(e.material));break;case"LineSegments":c=new ls(h(e.geometry),f(e.material));break;case"PointCloud":case"Points":c=new Ym(h(e.geometry),f(e.material));break;case"Sprite":c=new Am(f(e.material));break;case"Group":c=new Fo;break;case"Bone":c=new sd;break;default:c=new Kn}if(c.uuid=e.uuid,e.name!==void 0&&(c.name=e.name),e.matrix!==void 0?(c.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(c.matrixAutoUpdate=e.matrixAutoUpdate),c.matrixAutoUpdate&&c.matrix.decompose(c.position,c.quaternion,c.scale)):(e.position!==void 0&&c.position.fromArray(e.position),e.rotation!==void 0&&c.rotation.fromArray(e.rotation),e.quaternion!==void 0&&c.quaternion.fromArray(e.quaternion),e.scale!==void 0&&c.scale.fromArray(e.scale)),e.up!==void 0&&c.up.fromArray(e.up),e.castShadow!==void 0&&(c.castShadow=e.castShadow),e.receiveShadow!==void 0&&(c.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.intensity!==void 0&&(c.shadow.intensity=e.shadow.intensity),e.shadow.bias!==void 0&&(c.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(c.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(c.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&c.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(c.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(c.visible=e.visible),e.frustumCulled!==void 0&&(c.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(c.renderOrder=e.renderOrder),e.userData!==void 0&&(c.userData=e.userData),e.layers!==void 0&&(c.layers.mask=e.layers),e.children!==void 0){const x=e.children;for(let y=0;y<x.length;y++)c.add(this.parseObject(x[y],t,i,r,a))}if(e.animations!==void 0){const x=e.animations;for(let y=0;y<x.length;y++){const E=x[y];c.animations.push(a[E])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(c.autoUpdate=e.autoUpdate);const x=e.levels;for(let y=0;y<x.length;y++){const E=x[y],w=c.getObjectByProperty("uuid",E.object);w!==void 0&&c.addLevel(w,E.distance,E.hysteresis)}}return c}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(i){if(i.isSkinnedMesh===!0&&i.skeleton!==void 0){const r=t[i.skeleton];r===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",i.skeleton):i.bind(r,i.bindMatrix)}})}bindLightTargets(e){e.traverse(function(t){if(t.isDirectionalLight||t.isSpotLight){const i=t.target,r=e.getObjectByProperty("uuid",i);r!==void 0?t.target=r:t.target=new Kn}})}}const Qy={UVMapping:we,CubeReflectionMapping:Pe,CubeRefractionMapping:yt,EquirectangularReflectionMapping:We,EquirectangularRefractionMapping:ct,CubeUVReflectionMapping:je},zg={RepeatWrapping:ze,ClampToEdgeWrapping:it,MirroredRepeatWrapping:Ct},Vg={NearestFilter:Nt,NearestMipmapNearestFilter:Rt,NearestMipmapLinearFilter:pn,LinearFilter:ae,LinearMipmapNearestFilter:_t,LinearMipmapLinearFilter:Xe};class eM extends gr{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,i,r){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const a=this,c=Es.get(e);if(c!==void 0){if(a.manager.itemStart(e),c.then){c.then(p=>{t&&t(p),a.manager.itemEnd(e)}).catch(p=>{r&&r(p)});return}return setTimeout(function(){t&&t(c),a.manager.itemEnd(e)},0),c}const h={};h.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",h.headers=this.requestHeader;const f=fetch(e,h).then(function(p){return p.blob()}).then(function(p){return createImageBitmap(p,Object.assign(a.options,{colorSpaceConversion:"none"}))}).then(function(p){return Es.add(e,p),t&&t(p),a.manager.itemEnd(e),p}).catch(function(p){r&&r(p),Es.remove(e),a.manager.itemError(e),a.manager.itemEnd(e)});Es.add(e,f),a.manager.itemStart(e)}}let Uh;class Bd{static getContext(){return Uh===void 0&&(Uh=new(window.AudioContext||window.webkitAudioContext)),Uh}static setContext(e){Uh=e}}class tM extends gr{constructor(e){super(e)}load(e,t,i,r){const a=this,c=new Ts(this.manager);c.setResponseType("arraybuffer"),c.setPath(this.path),c.setRequestHeader(this.requestHeader),c.setWithCredentials(this.withCredentials),c.load(e,function(f){try{const p=f.slice(0);Bd.getContext().decodeAudioData(p,function(_){t(_)}).catch(h)}catch(p){h(p)}},i,r);function h(f){r?r(f):console.error(f),a.manager.itemError(e)}}}const kg=new xn,Hg=new xn,Da=new xn;class nM{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Xi,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Xi,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,Da.copy(e.projectionMatrix);const r=t.eyeSep/2,a=r*t.near/t.focus,c=t.near*Math.tan(xa*t.fov*.5)/t.zoom;let h,f;Hg.elements[12]=-r,kg.elements[12]=r,h=-c*t.aspect+a,f=c*t.aspect+a,Da.elements[0]=2*t.near/(f-h),Da.elements[8]=(f+h)/(f-h),this.cameraL.projectionMatrix.copy(Da),h=-c*t.aspect-a,f=c*t.aspect-a,Da.elements[0]=2*t.near/(f-h),Da.elements[8]=(f+h)/(f-h),this.cameraR.projectionMatrix.copy(Da)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Hg),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(kg)}}class Gg extends Xi{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Wg{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Xg(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=Xg();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function Xg(){return performance.now()}const Ua=new J,qg=new dr,iM=new J,Na=new J;class rM extends Kn{constructor(){super(),this.type="AudioListener",this.context=Bd.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Wg}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Ua,qg,iM),Na.set(0,0,-1).applyQuaternion(qg),t.positionX){const r=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(Ua.x,r),t.positionY.linearRampToValueAtTime(Ua.y,r),t.positionZ.linearRampToValueAtTime(Ua.z,r),t.forwardX.linearRampToValueAtTime(Na.x,r),t.forwardY.linearRampToValueAtTime(Na.y,r),t.forwardZ.linearRampToValueAtTime(Na.z,r),t.upX.linearRampToValueAtTime(i.x,r),t.upY.linearRampToValueAtTime(i.y,r),t.upZ.linearRampToValueAtTime(i.z,r)}else t.setPosition(Ua.x,Ua.y,Ua.z),t.setOrientation(Na.x,Na.y,Na.z,i.x,i.y,i.z)}}class Yg extends Kn{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(e=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+e),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){return this.detune=e,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}copy(e,t){return super.copy(e,t),e.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=e.autoplay,this.buffer=e.buffer,this.detune=e.detune,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.offset=e.offset,this.duration=e.duration,this.playbackRate=e.playbackRate,this.hasPlaybackControl=e.hasPlaybackControl,this.sourceType=e.sourceType,this.filters=e.filters.slice(),this)}clone(e){return new this.constructor(this.listener).copy(this,e)}}const Fa=new J,Zg=new dr,sM=new J,Oa=new J;class aM extends Yg{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,i){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=i,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(Fa,Zg,sM),Oa.set(0,0,1).applyQuaternion(Zg);const t=this.panner;if(t.positionX){const i=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(Fa.x,i),t.positionY.linearRampToValueAtTime(Fa.y,i),t.positionZ.linearRampToValueAtTime(Fa.z,i),t.orientationX.linearRampToValueAtTime(Oa.x,i),t.orientationY.linearRampToValueAtTime(Oa.y,i),t.orientationZ.linearRampToValueAtTime(Oa.z,i)}else t.setPosition(Fa.x,Fa.y,Fa.z),t.setOrientation(Oa.x,Oa.y,Oa.z)}}class oM{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let i=0;i<t.length;i++)e+=t[i];return e/t.length}}class $g{constructor(e,t,i){this.binding=e,this.valueSize=i;let r,a,c;switch(t){case"quaternion":r=this._slerp,a=this._slerpAdditive,c=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(i*6),this._workIndex=5;break;case"string":case"bool":r=this._select,a=this._select,c=this._setAdditiveIdentityOther,this.buffer=new Array(i*5);break;default:r=this._lerp,a=this._lerpAdditive,c=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(i*5)}this._mixBufferRegion=r,this._mixBufferRegionAdditive=a,this._setIdentity=c,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const i=this.buffer,r=this.valueSize,a=e*r+r;let c=this.cumulativeWeight;if(c===0){for(let h=0;h!==r;++h)i[a+h]=i[h];c=t}else{c+=t;const h=t/c;this._mixBufferRegion(i,a,0,h,r)}this.cumulativeWeight=c}accumulateAdditive(e){const t=this.buffer,i=this.valueSize,r=i*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,r,0,e,i),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,i=this.buffer,r=e*t+t,a=this.cumulativeWeight,c=this.cumulativeWeightAdditive,h=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,a<1){const f=t*this._origIndex;this._mixBufferRegion(i,r,f,1-a,t)}c>0&&this._mixBufferRegionAdditive(i,r,this._addIndex*t,1,t);for(let f=t,p=t+t;f!==p;++f)if(i[f]!==i[f+t]){h.setValue(i,r);break}}saveOriginalState(){const e=this.binding,t=this.buffer,i=this.valueSize,r=i*this._origIndex;e.getValue(t,r);for(let a=i,c=r;a!==c;++a)t[a]=t[r+a%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let i=e;i<t;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[t+i]=this.buffer[e+i]}_select(e,t,i,r,a){if(r>=.5)for(let c=0;c!==a;++c)e[t+c]=e[i+c]}_slerp(e,t,i,r){dr.slerpFlat(e,t,e,t,e,i,r)}_slerpAdditive(e,t,i,r,a){const c=this._workIndex*a;dr.multiplyQuaternionsFlat(e,c,e,t,e,i),dr.slerpFlat(e,t,e,t,e,c,r)}_lerp(e,t,i,r,a){const c=1-r;for(let h=0;h!==a;++h){const f=t+h;e[f]=e[f]*c+e[i+h]*r}}_lerpAdditive(e,t,i,r,a){for(let c=0;c!==a;++c){const h=t+c;e[h]=e[h]+e[i+c]*r}}}const zd="\\[\\]\\.:\\/",cM=new RegExp("["+zd+"]","g"),Vd="[^"+zd+"]",lM="[^"+zd.replace("\\.","")+"]",hM=/((?:WC+[\/:])*)/.source.replace("WC",Vd),uM=/(WCOD+)?/.source.replace("WCOD",lM),dM=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Vd),fM=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Vd),pM=new RegExp("^"+hM+uM+dM+fM+"$"),mM=["material","materials","bones","map"];class gM{constructor(e,t,i){const r=i||Jn.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,r)}getValue(e,t){this.bind();const i=this._targetGroup.nCachedObjects_,r=this._bindings[i];r!==void 0&&r.getValue(e,t)}setValue(e,t){const i=this._bindings;for(let r=this._targetGroup.nCachedObjects_,a=i.length;r!==a;++r)i[r].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}}class Jn{constructor(e,t,i){this.path=t,this.parsedPath=i||Jn.parseTrackName(t),this.node=Jn.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,i){return e&&e.isAnimationObjectGroup?new Jn.Composite(e,t,i):new Jn(e,t,i)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(cM,"")}static parseTrackName(e){const t=pM.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const i={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},r=i.nodeName&&i.nodeName.lastIndexOf(".");if(r!==void 0&&r!==-1){const a=i.nodeName.substring(r+1);mM.indexOf(a)!==-1&&(i.nodeName=i.nodeName.substring(0,r),i.objectName=a)}if(i.propertyName===null||i.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return i}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const i=e.skeleton.getBoneByName(t);if(i!==void 0)return i}if(e.children){const i=function(a){for(let c=0;c<a.length;c++){const h=a[c];if(h.name===t||h.uuid===t)return h;const f=i(h.children);if(f)return f}return null},r=i(e.children);if(r)return r}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const i=this.resolvedProperty;for(let r=0,a=i.length;r!==a;++r)e[t++]=i[r]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const i=this.resolvedProperty;for(let r=0,a=i.length;r!==a;++r)i[r]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const i=this.resolvedProperty;for(let r=0,a=i.length;r!==a;++r)i[r]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const i=this.resolvedProperty;for(let r=0,a=i.length;r!==a;++r)i[r]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,i=t.objectName,r=t.propertyName;let a=t.propertyIndex;if(e||(e=Jn.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let p=t.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let g=0;g<e.length;g++)if(e[g].name===p){p=g;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[i]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(p!==void 0){if(e[p]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[p]}}const c=e[r];if(c===void 0){const p=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+p+"."+r+" but it wasn't found.",e);return}let h=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?h=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(h=this.Versioning.MatrixWorldNeedsUpdate);let f=this.BindingType.Direct;if(a!==void 0){if(r==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[a]!==void 0&&(a=e.morphTargetDictionary[a])}f=this.BindingType.ArrayElement,this.resolvedProperty=c,this.propertyIndex=a}else c.fromArray!==void 0&&c.toArray!==void 0?(f=this.BindingType.HasFromToArray,this.resolvedProperty=c):Array.isArray(c)?(f=this.BindingType.EntireArray,this.resolvedProperty=c):this.propertyName=r;this.getValue=this.GetterByBindingType[f],this.setValue=this.SetterByBindingTypeAndVersioning[f][h]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Jn.Composite=gM,Jn.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Jn.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Jn.prototype.GetterByBindingType=[Jn.prototype._getValue_direct,Jn.prototype._getValue_array,Jn.prototype._getValue_arrayElement,Jn.prototype._getValue_toArray],Jn.prototype.SetterByBindingTypeAndVersioning=[[Jn.prototype._setValue_direct,Jn.prototype._setValue_direct_setNeedsUpdate,Jn.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Jn.prototype._setValue_array,Jn.prototype._setValue_array_setNeedsUpdate,Jn.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Jn.prototype._setValue_arrayElement,Jn.prototype._setValue_arrayElement_setNeedsUpdate,Jn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Jn.prototype._setValue_fromArray,Jn.prototype._setValue_fromArray_setNeedsUpdate,Jn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class _M{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Mr(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let i=0,r=arguments.length;i!==r;++i)e[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,i=this._paths,r=this._parsedPaths,a=this._bindings,c=a.length;let h,f=e.length,p=this.nCachedObjects_;for(let g=0,_=arguments.length;g!==_;++g){const x=arguments[g],y=x.uuid;let E=t[y];if(E===void 0){E=f++,t[y]=E,e.push(x);for(let w=0,b=c;w!==b;++w)a[w].push(new Jn(x,i[w],r[w]))}else if(E<p){h=e[E];const w=--p,b=e[w];t[b.uuid]=E,e[E]=b,t[y]=w,e[w]=x;for(let S=0,O=c;S!==O;++S){const N=a[S],D=N[w];let te=N[E];N[E]=D,te===void 0&&(te=new Jn(x,i[S],r[S])),N[w]=te}}else e[E]!==h&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=p}remove(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,r=i.length;let a=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const f=arguments[c],p=f.uuid,g=t[p];if(g!==void 0&&g>=a){const _=a++,x=e[_];t[x.uuid]=g,e[g]=x,t[p]=_,e[_]=f;for(let y=0,E=r;y!==E;++y){const w=i[y],b=w[_],S=w[g];w[g]=b,w[_]=S}}}this.nCachedObjects_=a}uncache(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,r=i.length;let a=this.nCachedObjects_,c=e.length;for(let h=0,f=arguments.length;h!==f;++h){const p=arguments[h],g=p.uuid,_=t[g];if(_!==void 0)if(delete t[g],_<a){const x=--a,y=e[x],E=--c,w=e[E];t[y.uuid]=_,e[_]=y,t[w.uuid]=x,e[x]=w,e.pop();for(let b=0,S=r;b!==S;++b){const O=i[b],N=O[x],D=O[E];O[_]=N,O[x]=D,O.pop()}}else{const x=--c,y=e[x];x>0&&(t[y.uuid]=_),e[_]=y,e.pop();for(let E=0,w=r;E!==w;++E){const b=i[E];b[_]=b[x],b.pop()}}}this.nCachedObjects_=a}subscribe_(e,t){const i=this._bindingsIndicesByPath;let r=i[e];const a=this._bindings;if(r!==void 0)return a[r];const c=this._paths,h=this._parsedPaths,f=this._objects,p=f.length,g=this.nCachedObjects_,_=new Array(p);r=a.length,i[e]=r,c.push(e),h.push(t),a.push(_);for(let x=g,y=f.length;x!==y;++x){const E=f[x];_[x]=new Jn(E,e,t)}return _}unsubscribe_(e){const t=this._bindingsIndicesByPath,i=t[e];if(i!==void 0){const r=this._paths,a=this._parsedPaths,c=this._bindings,h=c.length-1,f=c[h],p=e[h];t[p]=i,c[i]=f,c.pop(),a[i]=a[h],a.pop(),r[i]=r[h],r.pop()}}}class Kg{constructor(e,t,i=null,r=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=i,this.blendMode=r;const a=t.tracks,c=a.length,h=new Array(c),f={endingStart:pa,endingEnd:pa};for(let p=0;p!==c;++p){const g=a[p].createInterpolant(null);h[p]=g,g.settings=f}this._interpolantSettings=f,this._interpolants=h,this._propertyBindings=new Array(c),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Op,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,i){if(e.fadeOut(t),this.fadeIn(t),i){const r=this._clip.duration,a=e._clip.duration,c=a/r,h=r/a;e.warp(1,c,t),this.warp(h,1,t)}return this}crossFadeTo(e,t,i){return e.crossFadeFrom(this,t,i)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,i){const r=this._mixer,a=r.time,c=this.timeScale;let h=this._timeScaleInterpolant;h===null&&(h=r._lendControlInterpolant(),this._timeScaleInterpolant=h);const f=h.parameterPositions,p=h.sampleValues;return f[0]=a,f[1]=a+i,p[0]=e/c,p[1]=t/c,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,i,r){if(!this.enabled){this._updateWeight(e);return}const a=this._startTime;if(a!==null){const f=(e-a)*i;f<0||i===0?t=0:(this._startTime=null,t=i*f)}t*=this._updateTimeScale(e);const c=this._updateTime(t),h=this._updateWeight(e);if(h>0){const f=this._interpolants,p=this._propertyBindings;switch(this.blendMode){case Cu:for(let g=0,_=f.length;g!==_;++g)f[g].evaluate(c),p[g].accumulateAdditive(h);break;case Tl:default:for(let g=0,_=f.length;g!==_;++g)f[g].evaluate(c),p[g].accumulate(r,h)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const i=this._weightInterpolant;if(i!==null){const r=i.evaluate(e)[0];t*=r,e>i.parameterPositions[1]&&(this.stopFading(),r===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const i=this._timeScaleInterpolant;if(i!==null){const r=i.evaluate(e)[0];t*=r,e>i.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,i=this.loop;let r=this.time+e,a=this._loopCount;const c=i===Bp;if(e===0)return a===-1?r:c&&(a&1)===1?t-r:r;if(i===Fp){a===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(r>=t)r=t;else if(r<0)r=0;else{this.time=r;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(a===-1&&(e>=0?(a=0,this._setEndings(!0,this.repetitions===0,c)):this._setEndings(this.repetitions===0,!0,c)),r>=t||r<0){const h=Math.floor(r/t);r-=t*h,a+=Math.abs(h);const f=this.repetitions-a;if(f<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,r=e>0?t:0,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(f===1){const p=e<0;this._setEndings(p,!p,c)}else this._setEndings(!1,!1,c);this._loopCount=a,this.time=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:h})}}else this.time=r;if(c&&(a&1)===1)return t-r}return r}_setEndings(e,t,i){const r=this._interpolantSettings;i?(r.endingStart=ma,r.endingEnd=ma):(e?r.endingStart=this.zeroSlopeAtStart?ma:pa:r.endingStart=Mc,t?r.endingEnd=this.zeroSlopeAtEnd?ma:pa:r.endingEnd=Mc)}_scheduleFading(e,t,i){const r=this._mixer,a=r.time;let c=this._weightInterpolant;c===null&&(c=r._lendControlInterpolant(),this._weightInterpolant=c);const h=c.parameterPositions,f=c.sampleValues;return h[0]=a,f[0]=t,h[1]=a+e,f[1]=i,this}}const xM=new Float32Array(1);class vM extends os{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const i=e._localRoot||this._root,r=e._clip.tracks,a=r.length,c=e._propertyBindings,h=e._interpolants,f=i.uuid,p=this._bindingsByRootAndName;let g=p[f];g===void 0&&(g={},p[f]=g);for(let _=0;_!==a;++_){const x=r[_],y=x.name;let E=g[y];if(E!==void 0)++E.referenceCount,c[_]=E;else{if(E=c[_],E!==void 0){E._cacheIndex===null&&(++E.referenceCount,this._addInactiveBinding(E,f,y));continue}const w=t&&t._propertyBindings[_].binding.parsedPath;E=new $g(Jn.create(i,y,w),x.ValueTypeName,x.getValueSize()),++E.referenceCount,this._addInactiveBinding(E,f,y),c[_]=E}h[_].resultBuffer=E.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const i=(e._localRoot||this._root).uuid,r=e._clip.uuid,a=this._actionsByClip[r];this._bindAction(e,a&&a.knownActions[0]),this._addInactiveAction(e,r,i)}const t=e._propertyBindings;for(let i=0,r=t.length;i!==r;++i){const a=t[i];a.useCount++===0&&(this._lendBinding(a),a.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let i=0,r=t.length;i!==r;++i){const a=t[i];--a.useCount===0&&(a.restoreOriginalState(),this._takeBackBinding(a))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,i){const r=this._actions,a=this._actionsByClip;let c=a[t];if(c===void 0)c={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,a[t]=c;else{const h=c.knownActions;e._byClipCacheIndex=h.length,h.push(e)}e._cacheIndex=r.length,r.push(e),c.actionByRoot[i]=e}_removeInactiveAction(e){const t=this._actions,i=t[t.length-1],r=e._cacheIndex;i._cacheIndex=r,t[r]=i,t.pop(),e._cacheIndex=null;const a=e._clip.uuid,c=this._actionsByClip,h=c[a],f=h.knownActions,p=f[f.length-1],g=e._byClipCacheIndex;p._byClipCacheIndex=g,f[g]=p,f.pop(),e._byClipCacheIndex=null;const _=h.actionByRoot,x=(e._localRoot||this._root).uuid;delete _[x],f.length===0&&delete c[a],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let i=0,r=t.length;i!==r;++i){const a=t[i];--a.referenceCount===0&&this._removeInactiveBinding(a)}}_lendAction(e){const t=this._actions,i=e._cacheIndex,r=this._nActiveActions++,a=t[r];e._cacheIndex=r,t[r]=e,a._cacheIndex=i,t[i]=a}_takeBackAction(e){const t=this._actions,i=e._cacheIndex,r=--this._nActiveActions,a=t[r];e._cacheIndex=r,t[r]=e,a._cacheIndex=i,t[i]=a}_addInactiveBinding(e,t,i){const r=this._bindingsByRootAndName,a=this._bindings;let c=r[t];c===void 0&&(c={},r[t]=c),c[i]=e,e._cacheIndex=a.length,a.push(e)}_removeInactiveBinding(e){const t=this._bindings,i=e.binding,r=i.rootNode.uuid,a=i.path,c=this._bindingsByRootAndName,h=c[r],f=t[t.length-1],p=e._cacheIndex;f._cacheIndex=p,t[p]=f,t.pop(),delete h[a],Object.keys(h).length===0&&delete c[r]}_lendBinding(e){const t=this._bindings,i=e._cacheIndex,r=this._nActiveBindings++,a=t[r];e._cacheIndex=r,t[r]=e,a._cacheIndex=i,t[i]=a}_takeBackBinding(e){const t=this._bindings,i=e._cacheIndex,r=--this._nActiveBindings,a=t[r];e._cacheIndex=r,t[r]=e,a._cacheIndex=i,t[i]=a}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let i=e[t];return i===void 0&&(i=new Id(new Float32Array(2),new Float32Array(2),1,xM),i.__cacheIndex=t,e[t]=i),i}_takeBackControlInterpolant(e){const t=this._controlInterpolants,i=e.__cacheIndex,r=--this._nActiveControlInterpolants,a=t[r];e.__cacheIndex=r,t[r]=e,a.__cacheIndex=i,t[i]=a}clipAction(e,t,i){const r=t||this._root,a=r.uuid;let c=typeof e=="string"?el.findByName(r,e):e;const h=c!==null?c.uuid:e,f=this._actionsByClip[h];let p=null;if(i===void 0&&(c!==null?i=c.blendMode:i=Tl),f!==void 0){const _=f.actionByRoot[a];if(_!==void 0&&_.blendMode===i)return _;p=f.knownActions[0],c===null&&(c=p._clip)}if(c===null)return null;const g=new Kg(this,c,t,i);return this._bindAction(g,p),this._addInactiveAction(g,h,a),g}existingAction(e,t){const i=t||this._root,r=i.uuid,a=typeof e=="string"?el.findByName(i,e):e,c=a?a.uuid:e,h=this._actionsByClip[c];return h!==void 0&&h.actionByRoot[r]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let i=t-1;i>=0;--i)e[i].stop();return this}update(e){e*=this.timeScale;const t=this._actions,i=this._nActiveActions,r=this.time+=e,a=Math.sign(e),c=this._accuIndex^=1;for(let p=0;p!==i;++p)t[p]._update(r,e,a,c);const h=this._bindings,f=this._nActiveBindings;for(let p=0;p!==f;++p)h[p].apply(c);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,i=e.uuid,r=this._actionsByClip,a=r[i];if(a!==void 0){const c=a.knownActions;for(let h=0,f=c.length;h!==f;++h){const p=c[h];this._deactivateAction(p);const g=p._cacheIndex,_=t[t.length-1];p._cacheIndex=null,p._byClipCacheIndex=null,_._cacheIndex=g,t[g]=_,t.pop(),this._removeInactiveBindingsForAction(p)}delete r[i]}}uncacheRoot(e){const t=e.uuid,i=this._actionsByClip;for(const c in i){const h=i[c].actionByRoot,f=h[t];f!==void 0&&(this._deactivateAction(f),this._removeInactiveAction(f))}const r=this._bindingsByRootAndName,a=r[t];if(a!==void 0)for(const c in a){const h=a[c];h.restoreOriginalState(),this._removeInactiveBinding(h)}}uncacheAction(e,t){const i=this.existingAction(e,t);i!==null&&(this._deactivateAction(i),this._removeInactiveAction(i))}}class kd{constructor(e){this.value=e}clone(){return new kd(this.value.clone===void 0?this.value:this.value.clone())}}let yM=0;class MM extends os{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:yM++}),this.name="",this.usage=Ec,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let i=0,r=t.length;i<r;i++){const a=Array.isArray(t[i])?t[i]:[t[i]];for(let c=0;c<a.length;c++)this.uniforms.push(a[c].clone())}return this}clone(){return new this.constructor().copy(this)}}class SM extends Yl{constructor(e,t,i=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class EM{constructor(e,t,i,r,a){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=t,this.itemSize=i,this.elementSize=r,this.count=a,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}const Jg=new xn;class bM{constructor(e,t,i=0,r=1/0){this.ray=new yo(e,t),this.near=i,this.far=r,this.camera=null,this.layers=new Dl,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return Jg.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(Jg),this}intersectObject(e,t=!0,i=[]){return Hd(e,this,i,t),i.sort(jg),i}intersectObjects(e,t=!0,i=[]){for(let r=0,a=e.length;r<a;r++)Hd(e[r],this,i,t);return i.sort(jg),i}}function jg(o,e){return o.distance-e.distance}function Hd(o,e,t,i){let r=!0;if(o.layers.test(e.layers)&&o.raycast(e,t)===!1&&(r=!1),r===!0&&i===!0){const a=o.children;for(let c=0,h=a.length;c<h;c++)Hd(a[c],e,t,!0)}}class TM{constructor(e=1,t=0,i=0){return this.radius=e,this.phi=t,this.theta=i,this}set(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=bn(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+t*t+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,i),this.phi=Math.acos(bn(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class AM{constructor(e=1,t=0,i=0){return this.radius=e,this.theta=t,this.y=i,this}set(e,t,i){return this.radius=e,this.theta=t,this.y=i,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+i*i),this.theta=Math.atan2(e,i),this.y=t,this}clone(){return new this.constructor().copy(this)}}class Gd{constructor(e,t,i,r){Gd.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==void 0&&this.set(e,t,i,r)}identity(){return this.set(1,0,0,1),this}fromArray(e,t=0){for(let i=0;i<4;i++)this.elements[i]=e[i+t];return this}set(e,t,i,r){const a=this.elements;return a[0]=e,a[2]=t,a[1]=i,a[3]=r,this}}const Qg=new et;class wM{constructor(e=new et(1/0,1/0),t=new et(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=Qg.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Qg).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const e_=new J,Nh=new J;class CM{constructor(e=new J,t=new J){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){e_.subVectors(e,this.start),Nh.subVectors(this.end,this.start);const i=Nh.dot(Nh);let a=Nh.dot(e_)/i;return t&&(a=bn(a,0,1)),a}closestPointToPoint(e,t,i){const r=this.closestPointToPointParameter(e,t);return this.delta(i).multiplyScalar(r).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const t_=new J;class RM extends Kn{constructor(e,t){super(),this.light=e,this.matrixAutoUpdate=!1,this.color=t,this.type="SpotLightHelper";const i=new In,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let c=0,h=1,f=32;c<f;c++,h++){const p=c/f*Math.PI*2,g=h/f*Math.PI*2;r.push(Math.cos(p),Math.sin(p),1,Math.cos(g),Math.sin(g),1)}i.setAttribute("position",new tn(r,3));const a=new cr({fog:!1,toneMapped:!1});this.cone=new ls(i,a),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),t_.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t_),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const ea=new J,Fh=new xn,Wd=new xn;class PM extends ls{constructor(e){const t=n_(e),i=new In,r=[],a=[],c=new Ht(0,0,1),h=new Ht(0,1,0);for(let p=0;p<t.length;p++){const g=t[p];g.parent&&g.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),a.push(c.r,c.g,c.b),a.push(h.r,h.g,h.b))}i.setAttribute("position",new tn(r,3)),i.setAttribute("color",new tn(a,3));const f=new cr({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(i,f),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,i=this.geometry,r=i.getAttribute("position");Wd.copy(this.root.matrixWorld).invert();for(let a=0,c=0;a<t.length;a++){const h=t[a];h.parent&&h.parent.isBone&&(Fh.multiplyMatrices(Wd,h.matrixWorld),ea.setFromMatrixPosition(Fh),r.setXYZ(c,ea.x,ea.y,ea.z),Fh.multiplyMatrices(Wd,h.parent.matrixWorld),ea.setFromMatrixPosition(Fh),r.setXYZ(c+1,ea.x,ea.y,ea.z),c+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}}function n_(o){const e=[];o.isBone===!0&&e.push(o);for(let t=0;t<o.children.length;t++)e.push.apply(e,n_(o.children[t]));return e}class IM extends Ii{constructor(e,t,i){const r=new $c(t,4,2),a=new Zs({wireframe:!0,fog:!1,toneMapped:!1});super(r,a),this.light=e,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const LM=new J,i_=new Ht,r_=new Ht;class DM extends Kn{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const r=new Zc(t);r.rotateY(Math.PI*.5),this.material=new Zs({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const a=r.getAttribute("position"),c=new Float32Array(a.count*3);r.setAttribute("color",new hi(c,3)),this.add(new Ii(r,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");i_.copy(this.light.color),r_.copy(this.light.groundColor);for(let i=0,r=t.count;i<r;i++){const a=i<r/2?i_:r_;t.setXYZ(i,a.r,a.g,a.b)}t.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(LM.setFromMatrixPosition(this.light.matrixWorld).negate())}}class UM extends ls{constructor(e=10,t=10,i=4473924,r=8947848){i=new Ht(i),r=new Ht(r);const a=t/2,c=e/t,h=e/2,f=[],p=[];for(let x=0,y=0,E=-h;x<=t;x++,E+=c){f.push(-h,0,E,h,0,E),f.push(E,0,-h,E,0,h);const w=x===a?i:r;w.toArray(p,y),y+=3,w.toArray(p,y),y+=3,w.toArray(p,y),y+=3,w.toArray(p,y),y+=3}const g=new In;g.setAttribute("position",new tn(f,3)),g.setAttribute("color",new tn(p,3));const _=new cr({vertexColors:!0,toneMapped:!1});super(g,_),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class NM extends ls{constructor(e=10,t=16,i=8,r=64,a=4473924,c=8947848){a=new Ht(a),c=new Ht(c);const h=[],f=[];if(t>1)for(let _=0;_<t;_++){const x=_/t*(Math.PI*2),y=Math.sin(x)*e,E=Math.cos(x)*e;h.push(0,0,0),h.push(y,0,E);const w=_&1?a:c;f.push(w.r,w.g,w.b),f.push(w.r,w.g,w.b)}for(let _=0;_<i;_++){const x=_&1?a:c,y=e-e/i*_;for(let E=0;E<r;E++){let w=E/r*(Math.PI*2),b=Math.sin(w)*y,S=Math.cos(w)*y;h.push(b,0,S),f.push(x.r,x.g,x.b),w=(E+1)/r*(Math.PI*2),b=Math.sin(w)*y,S=Math.cos(w)*y,h.push(b,0,S),f.push(x.r,x.g,x.b)}}const p=new In;p.setAttribute("position",new tn(h,3)),p.setAttribute("color",new tn(f,3));const g=new cr({vertexColors:!0,toneMapped:!1});super(p,g),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const s_=new J,Oh=new J,a_=new J;class FM extends Kn{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",t===void 0&&(t=1);let r=new In;r.setAttribute("position",new tn([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const a=new cr({fog:!1,toneMapped:!1});this.lightPlane=new Js(r,a),this.add(this.lightPlane),r=new In,r.setAttribute("position",new tn([0,0,0,0,0,1],3)),this.targetLine=new Js(r,a),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),s_.setFromMatrixPosition(this.light.matrixWorld),Oh.setFromMatrixPosition(this.light.target.matrixWorld),a_.subVectors(Oh,s_),this.lightPlane.lookAt(Oh),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Oh),this.targetLine.scale.z=a_.length()}}const Bh=new J,bi=new Wl;class OM extends ls{constructor(e){const t=new In,i=new cr({color:16777215,vertexColors:!0,toneMapped:!1}),r=[],a=[],c={};h("n1","n2"),h("n2","n4"),h("n4","n3"),h("n3","n1"),h("f1","f2"),h("f2","f4"),h("f4","f3"),h("f3","f1"),h("n1","f1"),h("n2","f2"),h("n3","f3"),h("n4","f4"),h("p","n1"),h("p","n2"),h("p","n3"),h("p","n4"),h("u1","u2"),h("u2","u3"),h("u3","u1"),h("c","t"),h("p","c"),h("cn1","cn2"),h("cn3","cn4"),h("cf1","cf2"),h("cf3","cf4");function h(E,w){f(E),f(w)}function f(E){r.push(0,0,0),a.push(0,0,0),c[E]===void 0&&(c[E]=[]),c[E].push(r.length/3-1)}t.setAttribute("position",new tn(r,3)),t.setAttribute("color",new tn(a,3)),super(t,i),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=c,this.update();const p=new Ht(16755200),g=new Ht(16711680),_=new Ht(43775),x=new Ht(16777215),y=new Ht(3355443);this.setColors(p,g,_,x,y)}setColors(e,t,i,r,a){const h=this.geometry.getAttribute("color");h.setXYZ(0,e.r,e.g,e.b),h.setXYZ(1,e.r,e.g,e.b),h.setXYZ(2,e.r,e.g,e.b),h.setXYZ(3,e.r,e.g,e.b),h.setXYZ(4,e.r,e.g,e.b),h.setXYZ(5,e.r,e.g,e.b),h.setXYZ(6,e.r,e.g,e.b),h.setXYZ(7,e.r,e.g,e.b),h.setXYZ(8,e.r,e.g,e.b),h.setXYZ(9,e.r,e.g,e.b),h.setXYZ(10,e.r,e.g,e.b),h.setXYZ(11,e.r,e.g,e.b),h.setXYZ(12,e.r,e.g,e.b),h.setXYZ(13,e.r,e.g,e.b),h.setXYZ(14,e.r,e.g,e.b),h.setXYZ(15,e.r,e.g,e.b),h.setXYZ(16,e.r,e.g,e.b),h.setXYZ(17,e.r,e.g,e.b),h.setXYZ(18,e.r,e.g,e.b),h.setXYZ(19,e.r,e.g,e.b),h.setXYZ(20,e.r,e.g,e.b),h.setXYZ(21,e.r,e.g,e.b),h.setXYZ(22,e.r,e.g,e.b),h.setXYZ(23,e.r,e.g,e.b),h.setXYZ(24,t.r,t.g,t.b),h.setXYZ(25,t.r,t.g,t.b),h.setXYZ(26,t.r,t.g,t.b),h.setXYZ(27,t.r,t.g,t.b),h.setXYZ(28,t.r,t.g,t.b),h.setXYZ(29,t.r,t.g,t.b),h.setXYZ(30,t.r,t.g,t.b),h.setXYZ(31,t.r,t.g,t.b),h.setXYZ(32,i.r,i.g,i.b),h.setXYZ(33,i.r,i.g,i.b),h.setXYZ(34,i.r,i.g,i.b),h.setXYZ(35,i.r,i.g,i.b),h.setXYZ(36,i.r,i.g,i.b),h.setXYZ(37,i.r,i.g,i.b),h.setXYZ(38,r.r,r.g,r.b),h.setXYZ(39,r.r,r.g,r.b),h.setXYZ(40,a.r,a.g,a.b),h.setXYZ(41,a.r,a.g,a.b),h.setXYZ(42,a.r,a.g,a.b),h.setXYZ(43,a.r,a.g,a.b),h.setXYZ(44,a.r,a.g,a.b),h.setXYZ(45,a.r,a.g,a.b),h.setXYZ(46,a.r,a.g,a.b),h.setXYZ(47,a.r,a.g,a.b),h.setXYZ(48,a.r,a.g,a.b),h.setXYZ(49,a.r,a.g,a.b),h.needsUpdate=!0}update(){const e=this.geometry,t=this.pointMap,i=1,r=1;bi.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Ri("c",t,e,bi,0,0,-1),Ri("t",t,e,bi,0,0,1),Ri("n1",t,e,bi,-i,-r,-1),Ri("n2",t,e,bi,i,-r,-1),Ri("n3",t,e,bi,-i,r,-1),Ri("n4",t,e,bi,i,r,-1),Ri("f1",t,e,bi,-i,-r,1),Ri("f2",t,e,bi,i,-r,1),Ri("f3",t,e,bi,-i,r,1),Ri("f4",t,e,bi,i,r,1),Ri("u1",t,e,bi,i*.7,r*1.1,-1),Ri("u2",t,e,bi,-i*.7,r*1.1,-1),Ri("u3",t,e,bi,0,r*2,-1),Ri("cf1",t,e,bi,-i,0,1),Ri("cf2",t,e,bi,i,0,1),Ri("cf3",t,e,bi,0,-r,1),Ri("cf4",t,e,bi,0,r,1),Ri("cn1",t,e,bi,-i,0,-1),Ri("cn2",t,e,bi,i,0,-1),Ri("cn3",t,e,bi,0,-r,-1),Ri("cn4",t,e,bi,0,r,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Ri(o,e,t,i,r,a,c){Bh.set(r,a,c).unproject(i);const h=e[o];if(h!==void 0){const f=t.getAttribute("position");for(let p=0,g=h.length;p<g;p++)f.setXYZ(h[p],Bh.x,Bh.y,Bh.z)}}const zh=new sr;class BM extends ls{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(8*3),a=new In;a.setIndex(new hi(i,1)),a.setAttribute("position",new hi(r,3)),super(a,new cr({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&zh.setFromObject(this.object),zh.isEmpty())return;const t=zh.min,i=zh.max,r=this.geometry.attributes.position,a=r.array;a[0]=i.x,a[1]=i.y,a[2]=i.z,a[3]=t.x,a[4]=i.y,a[5]=i.z,a[6]=t.x,a[7]=t.y,a[8]=i.z,a[9]=i.x,a[10]=t.y,a[11]=i.z,a[12]=i.x,a[13]=i.y,a[14]=t.z,a[15]=t.x,a[16]=i.y,a[17]=t.z,a[18]=t.x,a[19]=t.y,a[20]=t.z,a[21]=i.x,a[22]=t.y,a[23]=t.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class zM extends ls{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],a=new In;a.setIndex(new hi(i,1)),a.setAttribute("position",new tn(r,3)),super(a,new cr({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class VM extends Js{constructor(e,t=1,i=16776960){const r=i,a=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],c=new In;c.setAttribute("position",new tn(a,3)),c.computeBoundingSphere(),super(c,new cr({color:r,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const h=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],f=new In;f.setAttribute("position",new tn(h,3)),f.computeBoundingSphere(),this.add(new Ii(f,new Zs({color:r,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const o_=new J;let Vh,Xd;class kM extends Kn{constructor(e=new J(0,0,1),t=new J(0,0,0),i=1,r=16776960,a=i*.2,c=a*.2){super(),this.type="ArrowHelper",Vh===void 0&&(Vh=new In,Vh.setAttribute("position",new tn([0,0,0,0,1,0],3)),Xd=new Oo(0,.5,1,5,1),Xd.translate(0,-.5,0)),this.position.copy(t),this.line=new Js(Vh,new cr({color:r,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Ii(Xd,new Zs({color:r,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(i,a,c)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{o_.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(o_,t)}}setLength(e,t=e*.2,i=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(i,t,i),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class HM extends ls{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],i=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],r=new In;r.setAttribute("position",new tn(t,3)),r.setAttribute("color",new tn(i,3));const a=new cr({vertexColors:!0,toneMapped:!1});super(r,a),this.type="AxesHelper"}setColors(e,t,i){const r=new Ht,a=this.geometry.attributes.color.array;return r.set(e),r.toArray(a,0),r.toArray(a,3),r.set(t),r.toArray(a,6),r.toArray(a,9),r.set(i),r.toArray(a,12),r.toArray(a,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class GM{constructor(){this.type="ShapePath",this.color=new Ht,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new Gc,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,i,r){return this.currentPath.quadraticCurveTo(e,t,i,r),this}bezierCurveTo(e,t,i,r,a,c){return this.currentPath.bezierCurveTo(e,t,i,r,a,c),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(S){const O=[];for(let N=0,D=S.length;N<D;N++){const te=S[N],$=new Ca;$.curves=te.curves,O.push($)}return O}function i(S,O){const N=O.length;let D=!1;for(let te=N-1,$=0;$<N;te=$++){let j=O[te],ne=O[$],H=ne.x-j.x,z=ne.y-j.y;if(Math.abs(z)>Number.EPSILON){if(z<0&&(j=O[$],H=-H,ne=O[te],z=-z),S.y<j.y||S.y>ne.y)continue;if(S.y===j.y){if(S.x===j.x)return!0}else{const re=z*(S.x-j.x)-H*(S.y-j.y);if(re===0)return!0;if(re<0)continue;D=!D}}else{if(S.y!==j.y)continue;if(ne.x<=S.x&&S.x<=j.x||j.x<=S.x&&S.x<=ne.x)return!0}}return D}const r=hs.isClockWise,a=this.subPaths;if(a.length===0)return[];let c,h,f;const p=[];if(a.length===1)return h=a[0],f=new Ca,f.curves=h.curves,p.push(f),p;let g=!r(a[0].getPoints());g=e?!g:g;const _=[],x=[];let y=[],E=0,w;x[E]=void 0,y[E]=[];for(let S=0,O=a.length;S<O;S++)h=a[S],w=h.getPoints(),c=r(w),c=e?!c:c,c?(!g&&x[E]&&E++,x[E]={s:new Ca,p:w},x[E].s.curves=h.curves,g&&E++,y[E]=[]):y[E].push({h,p:w[0]});if(!x[0])return t(a);if(x.length>1){let S=!1,O=0;for(let N=0,D=x.length;N<D;N++)_[N]=[];for(let N=0,D=x.length;N<D;N++){const te=y[N];for(let $=0;$<te.length;$++){const j=te[$];let ne=!0;for(let H=0;H<x.length;H++)i(j.p,x[H].p)&&(N!==H&&O++,ne?(ne=!1,_[H].push(j)):S=!0);ne&&_[N].push(j)}}O>0&&S===!1&&(y=_)}let b;for(let S=0,O=x.length;S<O;S++){f=x[S].s,p.push(f),b=y[S];for(let N=0,D=b.length;N<D;N++)f.holes.push(b[N].h)}return p}}class WM extends os{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function XM(o,e){const t=o.image&&o.image.width?o.image.width/o.image.height:1;return t>e?(o.repeat.x=1,o.repeat.y=t/e,o.offset.x=0,o.offset.y=(1-o.repeat.y)/2):(o.repeat.x=e/t,o.repeat.y=1,o.offset.x=(1-o.repeat.x)/2,o.offset.y=0),o}function qM(o,e){const t=o.image&&o.image.width?o.image.width/o.image.height:1;return t>e?(o.repeat.x=e/t,o.repeat.y=1,o.offset.x=(1-o.repeat.x)/2,o.offset.y=0):(o.repeat.x=1,o.repeat.y=t/e,o.offset.x=0,o.offset.y=(1-o.repeat.y)/2),o}function YM(o){return o.repeat.x=1,o.repeat.y=1,o.offset.x=0,o.offset.y=0,o}function qd(o,e,t,i){const r=ZM(i);switch(t){case oo:return o*e;case Vs:return o*e;case co:return o*e*2;case lo:return o*e/r.components*r.byteLength;case fa:return o*e/r.components*r.byteLength;case vc:return o*e*2/r.components*r.byteLength;case ho:return o*e*2/r.components*r.byteLength;case zs:return o*e*3/r.components*r.byteLength;case zi:return o*e*4/r.components*r.byteLength;case fe:return o*e*4/r.components*r.byteLength;case be:case Te:return Math.floor((o+3)/4)*Math.floor((e+3)/4)*8;case me:case lt:return Math.floor((o+3)/4)*Math.floor((e+3)/4)*16;case zt:case mn:return Math.max(o,16)*Math.max(e,8)/4;case At:case qt:return Math.max(o,8)*Math.max(e,8)/2;case gn:case on:return Math.floor((o+3)/4)*Math.floor((e+3)/4)*8;case Bn:return Math.floor((o+3)/4)*Math.floor((e+3)/4)*16;case kn:return Math.floor((o+3)/4)*Math.floor((e+3)/4)*16;case gi:return Math.floor((o+4)/5)*Math.floor((e+3)/4)*16;case fi:return Math.floor((o+4)/5)*Math.floor((e+4)/5)*16;case zn:return Math.floor((o+5)/6)*Math.floor((e+4)/5)*16;case hn:return Math.floor((o+5)/6)*Math.floor((e+5)/6)*16;case Si:return Math.floor((o+7)/8)*Math.floor((e+4)/5)*16;case Hn:return Math.floor((o+7)/8)*Math.floor((e+5)/6)*16;case Yi:return Math.floor((o+7)/8)*Math.floor((e+7)/8)*16;case Vr:return Math.floor((o+9)/10)*Math.floor((e+4)/5)*16;case Vi:return Math.floor((o+9)/10)*Math.floor((e+5)/6)*16;case ss:return Math.floor((o+9)/10)*Math.floor((e+7)/8)*16;case oi:return Math.floor((o+9)/10)*Math.floor((e+9)/10)*16;case Gi:return Math.floor((o+11)/12)*Math.floor((e+9)/10)*16;case Wi:return Math.floor((o+11)/12)*Math.floor((e+11)/12)*16;case Ci:case Ui:case ks:return Math.ceil(o/4)*Math.ceil(e/4)*16;case kr:case yl:return Math.ceil(o/4)*Math.ceil(e/4)*8;case Ml:case Sl:return Math.ceil(o/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function ZM(o){switch(o){case St:case Mn:return{byteLength:1,components:1};case vi:case pi:case fs:return{byteLength:2,components:1};case da:case Pr:return{byteLength:2,components:4};case wi:case Wn:case _i:return{byteLength:4,components:1};case ao:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${o}.`)}const $M={contain:XM,cover:qM,fill:YM,getByteLength:qd};class KM extends Hr{constructor(e=1,t=1,i=1,r={}){console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'),super(e,t,{...r,count:i}),this.isWebGLMultipleRenderTargets=!0}get texture(){return this.textures}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:u}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=u);function c_(){let o=null,e=!1,t=null,i=null;function r(a,c){t(a,c),i=o.requestAnimationFrame(r)}return{start:function(){e!==!0&&t!==null&&(i=o.requestAnimationFrame(r),e=!0)},stop:function(){o.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(a){t=a},setContext:function(a){o=a}}}function JM(o){const e=new WeakMap;function t(h,f){const p=h.array,g=h.usage,_=p.byteLength,x=o.createBuffer();o.bindBuffer(f,x),o.bufferData(f,p,g),h.onUploadCallback();let y;if(p instanceof Float32Array)y=o.FLOAT;else if(p instanceof Uint16Array)h.isFloat16BufferAttribute?y=o.HALF_FLOAT:y=o.UNSIGNED_SHORT;else if(p instanceof Int16Array)y=o.SHORT;else if(p instanceof Uint32Array)y=o.UNSIGNED_INT;else if(p instanceof Int32Array)y=o.INT;else if(p instanceof Int8Array)y=o.BYTE;else if(p instanceof Uint8Array)y=o.UNSIGNED_BYTE;else if(p instanceof Uint8ClampedArray)y=o.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+p);return{buffer:x,type:y,bytesPerElement:p.BYTES_PER_ELEMENT,version:h.version,size:_}}function i(h,f,p){const g=f.array,_=f.updateRanges;if(o.bindBuffer(p,h),_.length===0)o.bufferSubData(p,0,g);else{_.sort((y,E)=>y.start-E.start);let x=0;for(let y=1;y<_.length;y++){const E=_[x],w=_[y];w.start<=E.start+E.count+1?E.count=Math.max(E.count,w.start+w.count-E.start):(++x,_[x]=w)}_.length=x+1;for(let y=0,E=_.length;y<E;y++){const w=_[y];o.bufferSubData(p,w.start*g.BYTES_PER_ELEMENT,g,w.start,w.count)}f.clearUpdateRanges()}f.onUploadCallback()}function r(h){return h.isInterleavedBufferAttribute&&(h=h.data),e.get(h)}function a(h){h.isInterleavedBufferAttribute&&(h=h.data);const f=e.get(h);f&&(o.deleteBuffer(f.buffer),e.delete(h))}function c(h,f){if(h.isInterleavedBufferAttribute&&(h=h.data),h.isGLBufferAttribute){const g=e.get(h);(!g||g.version<h.version)&&e.set(h,{buffer:h.buffer,type:h.type,bytesPerElement:h.elementSize,version:h.version});return}const p=e.get(h);if(p===void 0)e.set(h,t(h,f));else if(p.version<h.version){if(p.size!==h.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");i(p.buffer,h,f),p.version=h.version}}return{get:r,remove:a,update:c}}var jM=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,QM=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,eS=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,tS=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,nS=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,iS=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,rS=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,sS=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,aS=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,oS=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,cS=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,lS=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,hS=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,uS=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,dS=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,fS=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,pS=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,mS=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,gS=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,_S=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,xS=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,vS=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,yS=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,MS=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,SS=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,ES=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,bS=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,TS=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,AS=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,wS=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,CS="gl_FragColor = linearToOutputTexel( gl_FragColor );",RS=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,PS=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,IS=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,LS=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,DS=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,US=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,NS=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,FS=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,OS=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,BS=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,zS=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,VS=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,kS=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,HS=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,GS=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,WS=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,XS=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,qS=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,YS=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,ZS=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,$S=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,KS=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,JS=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,jS=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,QS=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,eE=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,tE=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,nE=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,iE=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,rE=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,sE=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,aE=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,oE=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,cE=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,lE=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,hE=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,uE=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,dE=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,fE=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,pE=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,mE=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,gE=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,_E=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,xE=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,vE=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,yE=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,ME=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,SE=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,EE=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,bE=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,TE=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,AE=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,wE=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,CE=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,RE=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,PE=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,IE=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,LE=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,DE=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,UE=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,NE=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,FE=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,OE=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,BE=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,zE=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,VE=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,kE=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,HE=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,GE=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,WE=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,XE=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,qE=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,YE=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,ZE=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,$E=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,KE=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Ln={alphahash_fragment:jM,alphahash_pars_fragment:QM,alphamap_fragment:eS,alphamap_pars_fragment:tS,alphatest_fragment:nS,alphatest_pars_fragment:iS,aomap_fragment:rS,aomap_pars_fragment:sS,batching_pars_vertex:aS,batching_vertex:oS,begin_vertex:cS,beginnormal_vertex:lS,bsdfs:hS,iridescence_fragment:uS,bumpmap_pars_fragment:dS,clipping_planes_fragment:fS,clipping_planes_pars_fragment:pS,clipping_planes_pars_vertex:mS,clipping_planes_vertex:gS,color_fragment:_S,color_pars_fragment:xS,color_pars_vertex:vS,color_vertex:yS,common:MS,cube_uv_reflection_fragment:SS,defaultnormal_vertex:ES,displacementmap_pars_vertex:bS,displacementmap_vertex:TS,emissivemap_fragment:AS,emissivemap_pars_fragment:wS,colorspace_fragment:CS,colorspace_pars_fragment:RS,envmap_fragment:PS,envmap_common_pars_fragment:IS,envmap_pars_fragment:LS,envmap_pars_vertex:DS,envmap_physical_pars_fragment:WS,envmap_vertex:US,fog_vertex:NS,fog_pars_vertex:FS,fog_fragment:OS,fog_pars_fragment:BS,gradientmap_pars_fragment:zS,lightmap_pars_fragment:VS,lights_lambert_fragment:kS,lights_lambert_pars_fragment:HS,lights_pars_begin:GS,lights_toon_fragment:XS,lights_toon_pars_fragment:qS,lights_phong_fragment:YS,lights_phong_pars_fragment:ZS,lights_physical_fragment:$S,lights_physical_pars_fragment:KS,lights_fragment_begin:JS,lights_fragment_maps:jS,lights_fragment_end:QS,logdepthbuf_fragment:eE,logdepthbuf_pars_fragment:tE,logdepthbuf_pars_vertex:nE,logdepthbuf_vertex:iE,map_fragment:rE,map_pars_fragment:sE,map_particle_fragment:aE,map_particle_pars_fragment:oE,metalnessmap_fragment:cE,metalnessmap_pars_fragment:lE,morphinstance_vertex:hE,morphcolor_vertex:uE,morphnormal_vertex:dE,morphtarget_pars_vertex:fE,morphtarget_vertex:pE,normal_fragment_begin:mE,normal_fragment_maps:gE,normal_pars_fragment:_E,normal_pars_vertex:xE,normal_vertex:vE,normalmap_pars_fragment:yE,clearcoat_normal_fragment_begin:ME,clearcoat_normal_fragment_maps:SE,clearcoat_pars_fragment:EE,iridescence_pars_fragment:bE,opaque_fragment:TE,packing:AE,premultiplied_alpha_fragment:wE,project_vertex:CE,dithering_fragment:RE,dithering_pars_fragment:PE,roughnessmap_fragment:IE,roughnessmap_pars_fragment:LE,shadowmap_pars_fragment:DE,shadowmap_pars_vertex:UE,shadowmap_vertex:NE,shadowmask_pars_fragment:FE,skinbase_vertex:OE,skinning_pars_vertex:BE,skinning_vertex:zE,skinnormal_vertex:VE,specularmap_fragment:kE,specularmap_pars_fragment:HE,tonemapping_fragment:GE,tonemapping_pars_fragment:WE,transmission_fragment:XE,transmission_pars_fragment:qE,uv_pars_fragment:YE,uv_pars_vertex:ZE,uv_vertex:$E,worldpos_vertex:KE,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,background_frag:`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,backgroundCube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,backgroundCube_frag:`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,cube_frag:`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,depth_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,meshbasic_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,shadow_vert:`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`},Pt={common:{diffuse:{value:new Ht(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new wn}},envmap:{envMap:{value:null},envMapRotation:{value:new wn},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new wn}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new wn}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new wn},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new wn},normalScale:{value:new et(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new wn},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new wn}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new wn}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new wn}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ht(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ht(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0},uvTransform:{value:new wn}},sprite:{diffuse:{value:new Ht(16777215)},opacity:{value:1},center:{value:new et(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new wn},alphaMap:{value:null},alphaMapTransform:{value:new wn},alphaTest:{value:0}}},$r={basic:{uniforms:ar([Pt.common,Pt.specularmap,Pt.envmap,Pt.aomap,Pt.lightmap,Pt.fog]),vertexShader:Ln.meshbasic_vert,fragmentShader:Ln.meshbasic_frag},lambert:{uniforms:ar([Pt.common,Pt.specularmap,Pt.envmap,Pt.aomap,Pt.lightmap,Pt.emissivemap,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,Pt.fog,Pt.lights,{emissive:{value:new Ht(0)}}]),vertexShader:Ln.meshlambert_vert,fragmentShader:Ln.meshlambert_frag},phong:{uniforms:ar([Pt.common,Pt.specularmap,Pt.envmap,Pt.aomap,Pt.lightmap,Pt.emissivemap,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,Pt.fog,Pt.lights,{emissive:{value:new Ht(0)},specular:{value:new Ht(1118481)},shininess:{value:30}}]),vertexShader:Ln.meshphong_vert,fragmentShader:Ln.meshphong_frag},standard:{uniforms:ar([Pt.common,Pt.envmap,Pt.aomap,Pt.lightmap,Pt.emissivemap,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,Pt.roughnessmap,Pt.metalnessmap,Pt.fog,Pt.lights,{emissive:{value:new Ht(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ln.meshphysical_vert,fragmentShader:Ln.meshphysical_frag},toon:{uniforms:ar([Pt.common,Pt.aomap,Pt.lightmap,Pt.emissivemap,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,Pt.gradientmap,Pt.fog,Pt.lights,{emissive:{value:new Ht(0)}}]),vertexShader:Ln.meshtoon_vert,fragmentShader:Ln.meshtoon_frag},matcap:{uniforms:ar([Pt.common,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,Pt.fog,{matcap:{value:null}}]),vertexShader:Ln.meshmatcap_vert,fragmentShader:Ln.meshmatcap_frag},points:{uniforms:ar([Pt.points,Pt.fog]),vertexShader:Ln.points_vert,fragmentShader:Ln.points_frag},dashed:{uniforms:ar([Pt.common,Pt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ln.linedashed_vert,fragmentShader:Ln.linedashed_frag},depth:{uniforms:ar([Pt.common,Pt.displacementmap]),vertexShader:Ln.depth_vert,fragmentShader:Ln.depth_frag},normal:{uniforms:ar([Pt.common,Pt.bumpmap,Pt.normalmap,Pt.displacementmap,{opacity:{value:1}}]),vertexShader:Ln.meshnormal_vert,fragmentShader:Ln.meshnormal_frag},sprite:{uniforms:ar([Pt.sprite,Pt.fog]),vertexShader:Ln.sprite_vert,fragmentShader:Ln.sprite_frag},background:{uniforms:{uvTransform:{value:new wn},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ln.background_vert,fragmentShader:Ln.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new wn}},vertexShader:Ln.backgroundCube_vert,fragmentShader:Ln.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ln.cube_vert,fragmentShader:Ln.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ln.equirect_vert,fragmentShader:Ln.equirect_frag},distanceRGBA:{uniforms:ar([Pt.common,Pt.displacementmap,{referencePosition:{value:new J},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ln.distanceRGBA_vert,fragmentShader:Ln.distanceRGBA_frag},shadow:{uniforms:ar([Pt.lights,Pt.fog,{color:{value:new Ht(0)},opacity:{value:1}}]),vertexShader:Ln.shadow_vert,fragmentShader:Ln.shadow_frag}};$r.physical={uniforms:ar([$r.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new wn},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new wn},clearcoatNormalScale:{value:new et(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new wn},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new wn},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new wn},sheen:{value:0},sheenColor:{value:new Ht(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new wn},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new wn},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new wn},transmissionSamplerSize:{value:new et},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new wn},attenuationDistance:{value:0},attenuationColor:{value:new Ht(0)},specularColor:{value:new Ht(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new wn},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new wn},anisotropyVector:{value:new et},anisotropyMap:{value:null},anisotropyMapTransform:{value:new wn}}]),vertexShader:Ln.meshphysical_vert,fragmentShader:Ln.meshphysical_frag};const kh={r:0,b:0,g:0},Ba=new Er,JE=new xn;function jE(o,e,t,i,r,a,c){const h=new Ht(0);let f=a===!0?0:1,p,g,_=null,x=0,y=null;function E(N){let D=N.isScene===!0?N.background:null;return D&&D.isTexture&&(D=(N.backgroundBlurriness>0?t:e).get(D)),D}function w(N){let D=!1;const te=E(N);te===null?S(h,f):te&&te.isColor&&(S(te,1),D=!0);const $=o.xr.getEnvironmentBlendMode();$==="additive"?i.buffers.color.setClear(0,0,0,1,c):$==="alpha-blend"&&i.buffers.color.setClear(0,0,0,0,c),(o.autoClear||D)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),o.clear(o.autoClearColor,o.autoClearDepth,o.autoClearStencil))}function b(N,D){const te=E(D);te&&(te.isCubeTexture||te.mapping===je)?(g===void 0&&(g=new Ii(new Ea(1,1,1),new qr({name:"BackgroundCubeMaterial",uniforms:wo($r.backgroundCube.uniforms),vertexShader:$r.backgroundCube.vertexShader,fragmentShader:$r.backgroundCube.fragmentShader,side:I,depthTest:!1,depthWrite:!1,fog:!1})),g.geometry.deleteAttribute("normal"),g.geometry.deleteAttribute("uv"),g.onBeforeRender=function($,j,ne){this.matrixWorld.copyPosition(ne.matrixWorld)},Object.defineProperty(g.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(g)),Ba.copy(D.backgroundRotation),Ba.x*=-1,Ba.y*=-1,Ba.z*=-1,te.isCubeTexture&&te.isRenderTargetTexture===!1&&(Ba.y*=-1,Ba.z*=-1),g.material.uniforms.envMap.value=te,g.material.uniforms.flipEnvMap.value=te.isCubeTexture&&te.isRenderTargetTexture===!1?-1:1,g.material.uniforms.backgroundBlurriness.value=D.backgroundBlurriness,g.material.uniforms.backgroundIntensity.value=D.backgroundIntensity,g.material.uniforms.backgroundRotation.value.setFromMatrix4(JE.makeRotationFromEuler(Ba)),g.material.toneMapped=Xn.getTransfer(te.colorSpace)!==ci,(_!==te||x!==te.version||y!==o.toneMapping)&&(g.material.needsUpdate=!0,_=te,x=te.version,y=o.toneMapping),g.layers.enableAll(),N.unshift(g,g.geometry,g.material,0,0,null)):te&&te.isTexture&&(p===void 0&&(p=new Ii(new zo(2,2),new qr({name:"BackgroundMaterial",uniforms:wo($r.background.uniforms),vertexShader:$r.background.vertexShader,fragmentShader:$r.background.fragmentShader,side:P,depthTest:!1,depthWrite:!1,fog:!1})),p.geometry.deleteAttribute("normal"),Object.defineProperty(p.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(p)),p.material.uniforms.t2D.value=te,p.material.uniforms.backgroundIntensity.value=D.backgroundIntensity,p.material.toneMapped=Xn.getTransfer(te.colorSpace)!==ci,te.matrixAutoUpdate===!0&&te.updateMatrix(),p.material.uniforms.uvTransform.value.copy(te.matrix),(_!==te||x!==te.version||y!==o.toneMapping)&&(p.material.needsUpdate=!0,_=te,x=te.version,y=o.toneMapping),p.layers.enableAll(),N.unshift(p,p.geometry,p.material,0,0,null))}function S(N,D){N.getRGB(kh,gm(o)),i.buffers.color.setClear(kh.r,kh.g,kh.b,D,c)}function O(){g!==void 0&&(g.geometry.dispose(),g.material.dispose()),p!==void 0&&(p.geometry.dispose(),p.material.dispose())}return{getClearColor:function(){return h},setClearColor:function(N,D=1){h.set(N),f=D,S(h,f)},getClearAlpha:function(){return f},setClearAlpha:function(N){f=N,S(h,f)},render:w,addToRenderList:b,dispose:O}}function QE(o,e){const t=o.getParameter(o.MAX_VERTEX_ATTRIBS),i={},r=x(null);let a=r,c=!1;function h(z,re,De,Ae,He){let Ke=!1;const ke=_(Ae,De,re);a!==ke&&(a=ke,p(a.object)),Ke=y(z,Ae,De,He),Ke&&E(z,Ae,De,He),He!==null&&e.update(He,o.ELEMENT_ARRAY_BUFFER),(Ke||c)&&(c=!1,D(z,re,De,Ae),He!==null&&o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e.get(He).buffer))}function f(){return o.createVertexArray()}function p(z){return o.bindVertexArray(z)}function g(z){return o.deleteVertexArray(z)}function _(z,re,De){const Ae=De.wireframe===!0;let He=i[z.id];He===void 0&&(He={},i[z.id]=He);let Ke=He[re.id];Ke===void 0&&(Ke={},He[re.id]=Ke);let ke=Ke[Ae];return ke===void 0&&(ke=x(f()),Ke[Ae]=ke),ke}function x(z){const re=[],De=[],Ae=[];for(let He=0;He<t;He++)re[He]=0,De[He]=0,Ae[He]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:re,enabledAttributes:De,attributeDivisors:Ae,object:z,attributes:{},index:null}}function y(z,re,De,Ae){const He=a.attributes,Ke=re.attributes;let ke=0;const st=De.getAttributes();for(const Be in st)if(st[Be].location>=0){const Xt=He[Be];let en=Ke[Be];if(en===void 0&&(Be==="instanceMatrix"&&z.instanceMatrix&&(en=z.instanceMatrix),Be==="instanceColor"&&z.instanceColor&&(en=z.instanceColor)),Xt===void 0||Xt.attribute!==en||en&&Xt.data!==en.data)return!0;ke++}return a.attributesNum!==ke||a.index!==Ae}function E(z,re,De,Ae){const He={},Ke=re.attributes;let ke=0;const st=De.getAttributes();for(const Be in st)if(st[Be].location>=0){let Xt=Ke[Be];Xt===void 0&&(Be==="instanceMatrix"&&z.instanceMatrix&&(Xt=z.instanceMatrix),Be==="instanceColor"&&z.instanceColor&&(Xt=z.instanceColor));const en={};en.attribute=Xt,Xt&&Xt.data&&(en.data=Xt.data),He[Be]=en,ke++}a.attributes=He,a.attributesNum=ke,a.index=Ae}function w(){const z=a.newAttributes;for(let re=0,De=z.length;re<De;re++)z[re]=0}function b(z){S(z,0)}function S(z,re){const De=a.newAttributes,Ae=a.enabledAttributes,He=a.attributeDivisors;De[z]=1,Ae[z]===0&&(o.enableVertexAttribArray(z),Ae[z]=1),He[z]!==re&&(o.vertexAttribDivisor(z,re),He[z]=re)}function O(){const z=a.newAttributes,re=a.enabledAttributes;for(let De=0,Ae=re.length;De<Ae;De++)re[De]!==z[De]&&(o.disableVertexAttribArray(De),re[De]=0)}function N(z,re,De,Ae,He,Ke,ke){ke===!0?o.vertexAttribIPointer(z,re,De,He,Ke):o.vertexAttribPointer(z,re,De,Ae,He,Ke)}function D(z,re,De,Ae){w();const He=Ae.attributes,Ke=De.getAttributes(),ke=re.defaultAttributeValues;for(const st in Ke){const Be=Ke[st];if(Be.location>=0){let It=He[st];if(It===void 0&&(st==="instanceMatrix"&&z.instanceMatrix&&(It=z.instanceMatrix),st==="instanceColor"&&z.instanceColor&&(It=z.instanceColor)),It!==void 0){const Xt=It.normalized,en=It.itemSize,Pn=e.get(It);if(Pn===void 0)continue;const ri=Pn.buffer,$e=Pn.type,vt=Pn.bytesPerElement,rn=$e===o.INT||$e===o.UNSIGNED_INT||It.gpuType===Wn;if(It.isInterleavedBufferAttribute){const Et=It.data,un=Et.stride,Tn=It.offset;if(Et.isInstancedInterleavedBuffer){for(let yn=0;yn<Be.locationSize;yn++)S(Be.location+yn,Et.meshPerAttribute);z.isInstancedMesh!==!0&&Ae._maxInstanceCount===void 0&&(Ae._maxInstanceCount=Et.meshPerAttribute*Et.count)}else for(let yn=0;yn<Be.locationSize;yn++)b(Be.location+yn);o.bindBuffer(o.ARRAY_BUFFER,ri);for(let yn=0;yn<Be.locationSize;yn++)N(Be.location+yn,en/Be.locationSize,$e,Xt,un*vt,(Tn+en/Be.locationSize*yn)*vt,rn)}else{if(It.isInstancedBufferAttribute){for(let Et=0;Et<Be.locationSize;Et++)S(Be.location+Et,It.meshPerAttribute);z.isInstancedMesh!==!0&&Ae._maxInstanceCount===void 0&&(Ae._maxInstanceCount=It.meshPerAttribute*It.count)}else for(let Et=0;Et<Be.locationSize;Et++)b(Be.location+Et);o.bindBuffer(o.ARRAY_BUFFER,ri);for(let Et=0;Et<Be.locationSize;Et++)N(Be.location+Et,en/Be.locationSize,$e,Xt,en*vt,en/Be.locationSize*Et*vt,rn)}}else if(ke!==void 0){const Xt=ke[st];if(Xt!==void 0)switch(Xt.length){case 2:o.vertexAttrib2fv(Be.location,Xt);break;case 3:o.vertexAttrib3fv(Be.location,Xt);break;case 4:o.vertexAttrib4fv(Be.location,Xt);break;default:o.vertexAttrib1fv(Be.location,Xt)}}}}O()}function te(){ne();for(const z in i){const re=i[z];for(const De in re){const Ae=re[De];for(const He in Ae)g(Ae[He].object),delete Ae[He];delete re[De]}delete i[z]}}function $(z){if(i[z.id]===void 0)return;const re=i[z.id];for(const De in re){const Ae=re[De];for(const He in Ae)g(Ae[He].object),delete Ae[He];delete re[De]}delete i[z.id]}function j(z){for(const re in i){const De=i[re];if(De[z.id]===void 0)continue;const Ae=De[z.id];for(const He in Ae)g(Ae[He].object),delete Ae[He];delete De[z.id]}}function ne(){H(),c=!0,a!==r&&(a=r,p(a.object))}function H(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:h,reset:ne,resetDefaultState:H,dispose:te,releaseStatesOfGeometry:$,releaseStatesOfProgram:j,initAttributes:w,enableAttribute:b,disableUnusedAttributes:O}}function eb(o,e,t){let i;function r(p){i=p}function a(p,g){o.drawArrays(i,p,g),t.update(g,i,1)}function c(p,g,_){_!==0&&(o.drawArraysInstanced(i,p,g,_),t.update(g,i,_))}function h(p,g,_){if(_===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,p,0,g,0,_);let y=0;for(let E=0;E<_;E++)y+=g[E];t.update(y,i,1)}function f(p,g,_,x){if(_===0)return;const y=e.get("WEBGL_multi_draw");if(y===null)for(let E=0;E<p.length;E++)c(p[E],g[E],x[E]);else{y.multiDrawArraysInstancedWEBGL(i,p,0,g,0,x,0,_);let E=0;for(let w=0;w<_;w++)E+=g[w]*x[w];t.update(E,i,1)}}this.setMode=r,this.render=a,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=f}function tb(o,e,t,i){let r;function a(){if(r!==void 0)return r;if(e.has("EXT_texture_filter_anisotropic")===!0){const j=e.get("EXT_texture_filter_anisotropic");r=o.getParameter(j.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r}function c(j){return!(j!==zi&&i.convert(j)!==o.getParameter(o.IMPLEMENTATION_COLOR_READ_FORMAT))}function h(j){const ne=j===fs&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(j!==St&&i.convert(j)!==o.getParameter(o.IMPLEMENTATION_COLOR_READ_TYPE)&&j!==_i&&!ne)}function f(j){if(j==="highp"){if(o.getShaderPrecisionFormat(o.VERTEX_SHADER,o.HIGH_FLOAT).precision>0&&o.getShaderPrecisionFormat(o.FRAGMENT_SHADER,o.HIGH_FLOAT).precision>0)return"highp";j="mediump"}return j==="mediump"&&o.getShaderPrecisionFormat(o.VERTEX_SHADER,o.MEDIUM_FLOAT).precision>0&&o.getShaderPrecisionFormat(o.FRAGMENT_SHADER,o.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let p=t.precision!==void 0?t.precision:"highp";const g=f(p);g!==p&&(console.warn("THREE.WebGLRenderer:",p,"not supported, using",g,"instead."),p=g);const _=t.logarithmicDepthBuffer===!0,x=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),y=o.getParameter(o.MAX_TEXTURE_IMAGE_UNITS),E=o.getParameter(o.MAX_VERTEX_TEXTURE_IMAGE_UNITS),w=o.getParameter(o.MAX_TEXTURE_SIZE),b=o.getParameter(o.MAX_CUBE_MAP_TEXTURE_SIZE),S=o.getParameter(o.MAX_VERTEX_ATTRIBS),O=o.getParameter(o.MAX_VERTEX_UNIFORM_VECTORS),N=o.getParameter(o.MAX_VARYING_VECTORS),D=o.getParameter(o.MAX_FRAGMENT_UNIFORM_VECTORS),te=E>0,$=o.getParameter(o.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:a,getMaxPrecision:f,textureFormatReadable:c,textureTypeReadable:h,precision:p,logarithmicDepthBuffer:_,reverseDepthBuffer:x,maxTextures:y,maxVertexTextures:E,maxTextureSize:w,maxCubemapSize:b,maxAttributes:S,maxVertexUniforms:O,maxVaryings:N,maxFragmentUniforms:D,vertexTextures:te,maxSamples:$}}function nb(o){const e=this;let t=null,i=0,r=!1,a=!1;const c=new Ks,h=new wn,f={value:null,needsUpdate:!1};this.uniform=f,this.numPlanes=0,this.numIntersection=0,this.init=function(_,x){const y=_.length!==0||x||i!==0||r;return r=x,i=_.length,y},this.beginShadows=function(){a=!0,g(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(_,x){t=g(_,x,0)},this.setState=function(_,x,y){const E=_.clippingPlanes,w=_.clipIntersection,b=_.clipShadows,S=o.get(_);if(!r||E===null||E.length===0||a&&!b)a?g(null):p();else{const O=a?0:i,N=O*4;let D=S.clippingState||null;f.value=D,D=g(E,x,N,y);for(let te=0;te!==N;++te)D[te]=t[te];S.clippingState=D,this.numIntersection=w?this.numPlanes:0,this.numPlanes+=O}};function p(){f.value!==t&&(f.value=t,f.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function g(_,x,y,E){const w=_!==null?_.length:0;let b=null;if(w!==0){if(b=f.value,E!==!0||b===null){const S=y+w*4,O=x.matrixWorldInverse;h.getNormalMatrix(O),(b===null||b.length<S)&&(b=new Float32Array(S));for(let N=0,D=y;N!==w;++N,D+=4)c.copy(_[N]).applyMatrix4(O,h),c.normal.toArray(b,D),b[D+3]=c.constant}f.value=b,f.needsUpdate=!0}return e.numPlanes=w,e.numIntersection=0,b}}function ib(o){let e=new WeakMap;function t(c,h){return h===We?c.mapping=Pe:h===ct&&(c.mapping=yt),c}function i(c){if(c&&c.isTexture){const h=c.mapping;if(h===We||h===ct)if(e.has(c)){const f=e.get(c).texture;return t(f,c.mapping)}else{const f=c.image;if(f&&f.height>0){const p=new Mm(f.height);return p.fromEquirectangularTexture(o,c),e.set(c,p),c.addEventListener("dispose",r),t(p.texture,c.mapping)}else return null}}return c}function r(c){const h=c.target;h.removeEventListener("dispose",r);const f=e.get(h);f!==void 0&&(e.delete(h),f.dispose())}function a(){e=new WeakMap}return{get:i,dispose:a}}const Vo=4,l_=[.125,.215,.35,.446,.526,.582],za=20,Yd=new Lh,h_=new Ht;let Zd=null,$d=0,Kd=0,Jd=!1;const Va=(1+Math.sqrt(5))/2,ko=1/Va,u_=[new J(-Va,ko,0),new J(Va,ko,0),new J(-ko,0,Va),new J(ko,0,Va),new J(0,Va,-ko),new J(0,Va,ko),new J(-1,1,-1),new J(1,1,-1),new J(-1,1,1),new J(1,1,1)];class jd{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,i=.1,r=100){Zd=this._renderer.getRenderTarget(),$d=this._renderer.getActiveCubeFace(),Kd=this._renderer.getActiveMipmapLevel(),Jd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const a=this._allocateTargets();return a.depthBuffer=!0,this._sceneToCubeUV(e,i,r,a),t>0&&this._blur(a,0,0,t),this._applyPMREM(a),this._cleanup(a),a}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=p_(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=f_(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Zd,$d,Kd),this._renderer.xr.enabled=Jd,e.scissorTest=!1,Hh(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Pe||e.mapping===yt?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Zd=this._renderer.getRenderTarget(),$d=this._renderer.getActiveCubeFace(),Kd=this._renderer.getActiveMipmapLevel(),Jd=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const i=t||this._allocateTargets();return this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,i={magFilter:ae,minFilter:ae,generateMipmaps:!1,type:fs,format:zi,colorSpace:ga,depthBuffer:!1},r=d_(e,t,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=d_(e,t,i);const{_lodMax:a}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=rb(a)),this._blurMaterial=sb(a,e,t)}return r}_compileMaterial(e){const t=new Ii(this._lodPlanes[0],e);this._renderer.compile(t,Yd)}_sceneToCubeUV(e,t,i,r){const h=new Xi(90,1,t,i),f=[1,-1,1,1,1,1],p=[1,1,1,-1,-1,-1],g=this._renderer,_=g.autoClear,x=g.toneMapping;g.getClearColor(h_),g.toneMapping=Dt,g.autoClear=!1;const y=new Zs({name:"PMREM.Background",side:I,depthWrite:!1,depthTest:!1}),E=new Ii(new Ea,y);let w=!1;const b=e.background;b?b.isColor&&(y.color.copy(b),e.background=null,w=!0):(y.color.copy(h_),w=!0);for(let S=0;S<6;S++){const O=S%3;O===0?(h.up.set(0,f[S],0),h.lookAt(p[S],0,0)):O===1?(h.up.set(0,0,f[S]),h.lookAt(0,p[S],0)):(h.up.set(0,f[S],0),h.lookAt(0,0,p[S]));const N=this._cubeSize;Hh(r,O*N,S>2?N:0,N,N),g.setRenderTarget(r),w&&g.render(E,h),g.render(e,h)}E.geometry.dispose(),E.material.dispose(),g.toneMapping=x,g.autoClear=_,e.background=b}_textureToCubeUV(e,t){const i=this._renderer,r=e.mapping===Pe||e.mapping===yt;r?(this._cubemapMaterial===null&&(this._cubemapMaterial=p_()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=f_());const a=r?this._cubemapMaterial:this._equirectMaterial,c=new Ii(this._lodPlanes[0],a),h=a.uniforms;h.envMap.value=e;const f=this._cubeSize;Hh(t,0,0,3*f,2*f),i.setRenderTarget(t),i.render(c,Yd)}_applyPMREM(e){const t=this._renderer,i=t.autoClear;t.autoClear=!1;const r=this._lodPlanes.length;for(let a=1;a<r;a++){const c=Math.sqrt(this._sigmas[a]*this._sigmas[a]-this._sigmas[a-1]*this._sigmas[a-1]),h=u_[(r-a-1)%u_.length];this._blur(e,a-1,a,c,h)}t.autoClear=i}_blur(e,t,i,r,a){const c=this._pingPongRenderTarget;this._halfBlur(e,c,t,i,r,"latitudinal",a),this._halfBlur(c,e,i,i,r,"longitudinal",a)}_halfBlur(e,t,i,r,a,c,h){const f=this._renderer,p=this._blurMaterial;c!=="latitudinal"&&c!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const g=3,_=new Ii(this._lodPlanes[r],p),x=p.uniforms,y=this._sizeLods[i]-1,E=isFinite(a)?Math.PI/(2*y):2*Math.PI/(2*za-1),w=a/E,b=isFinite(a)?1+Math.floor(g*w):za;b>za&&console.warn(`sigmaRadians, ${a}, is too large and will clip, as it requested ${b} samples when the maximum is set to ${za}`);const S=[];let O=0;for(let j=0;j<za;++j){const ne=j/w,H=Math.exp(-ne*ne/2);S.push(H),j===0?O+=H:j<b&&(O+=2*H)}for(let j=0;j<S.length;j++)S[j]=S[j]/O;x.envMap.value=e.texture,x.samples.value=b,x.weights.value=S,x.latitudinal.value=c==="latitudinal",h&&(x.poleAxis.value=h);const{_lodMax:N}=this;x.dTheta.value=E,x.mipInt.value=N-i;const D=this._sizeLods[r],te=3*D*(r>N-Vo?r-N+Vo:0),$=4*(this._cubeSize-D);Hh(t,te,$,3*D,2*D),f.setRenderTarget(t),f.render(_,Yd)}}function rb(o){const e=[],t=[],i=[];let r=o;const a=o-Vo+1+l_.length;for(let c=0;c<a;c++){const h=Math.pow(2,r);t.push(h);let f=1/h;c>o-Vo?f=l_[c-o+Vo-1]:c===0&&(f=0),i.push(f);const p=1/(h-2),g=-p,_=1+p,x=[g,g,_,g,_,_,g,g,_,_,g,_],y=6,E=6,w=3,b=2,S=1,O=new Float32Array(w*E*y),N=new Float32Array(b*E*y),D=new Float32Array(S*E*y);for(let $=0;$<y;$++){const j=$%3*2/3-1,ne=$>2?0:-1,H=[j,ne,0,j+2/3,ne,0,j+2/3,ne+1,0,j,ne,0,j+2/3,ne+1,0,j,ne+1,0];O.set(H,w*E*$),N.set(x,b*E*$);const z=[$,$,$,$,$,$];D.set(z,S*E*$)}const te=new In;te.setAttribute("position",new hi(O,w)),te.setAttribute("uv",new hi(N,b)),te.setAttribute("faceIndex",new hi(D,S)),e.push(te),r>Vo&&r--}return{lodPlanes:e,sizeLods:t,sigmas:i}}function d_(o,e,t){const i=new Hr(o,e,t);return i.texture.mapping=je,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Hh(o,e,t,i,r){o.viewport.set(e,t,i,r),o.scissor.set(e,t,i,r)}function sb(o,e,t){const i=new Float32Array(za),r=new J(0,1,0);return new qr({name:"SphericalGaussianBlur",defines:{n:za,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${o}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:Qd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:W,depthTest:!1,depthWrite:!1})}function f_(){return new qr({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Qd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:W,depthTest:!1,depthWrite:!1})}function p_(){return new qr({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Qd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:W,depthTest:!1,depthWrite:!1})}function Qd(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function ab(o){let e=new WeakMap,t=null;function i(h){if(h&&h.isTexture){const f=h.mapping,p=f===We||f===ct,g=f===Pe||f===yt;if(p||g){let _=e.get(h);const x=_!==void 0?_.texture.pmremVersion:0;if(h.isRenderTargetTexture&&h.pmremVersion!==x)return t===null&&(t=new jd(o)),_=p?t.fromEquirectangular(h,_):t.fromCubemap(h,_),_.texture.pmremVersion=h.pmremVersion,e.set(h,_),_.texture;if(_!==void 0)return _.texture;{const y=h.image;return p&&y&&y.height>0||g&&y&&r(y)?(t===null&&(t=new jd(o)),_=p?t.fromEquirectangular(h):t.fromCubemap(h),_.texture.pmremVersion=h.pmremVersion,e.set(h,_),h.addEventListener("dispose",a),_.texture):null}}}return h}function r(h){let f=0;const p=6;for(let g=0;g<p;g++)h[g]!==void 0&&f++;return f===p}function a(h){const f=h.target;f.removeEventListener("dispose",a);const p=e.get(f);p!==void 0&&(e.delete(f),p.dispose())}function c(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:i,dispose:c}}function ob(o){const e={};function t(i){if(e[i]!==void 0)return e[i];let r;switch(i){case"WEBGL_depth_texture":r=o.getExtension("WEBGL_depth_texture")||o.getExtension("MOZ_WEBGL_depth_texture")||o.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=o.getExtension("EXT_texture_filter_anisotropic")||o.getExtension("MOZ_EXT_texture_filter_anisotropic")||o.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=o.getExtension("WEBGL_compressed_texture_s3tc")||o.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||o.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=o.getExtension("WEBGL_compressed_texture_pvrtc")||o.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=o.getExtension(i)}return e[i]=r,r}return{has:function(i){return t(i)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(i){const r=t(i);return r===null&&po("THREE.WebGLRenderer: "+i+" extension not supported."),r}}}function cb(o,e,t,i){const r={},a=new WeakMap;function c(_){const x=_.target;x.index!==null&&e.remove(x.index);for(const E in x.attributes)e.remove(x.attributes[E]);x.removeEventListener("dispose",c),delete r[x.id];const y=a.get(x);y&&(e.remove(y),a.delete(x)),i.releaseStatesOfGeometry(x),x.isInstancedBufferGeometry===!0&&delete x._maxInstanceCount,t.memory.geometries--}function h(_,x){return r[x.id]===!0||(x.addEventListener("dispose",c),r[x.id]=!0,t.memory.geometries++),x}function f(_){const x=_.attributes;for(const y in x)e.update(x[y],o.ARRAY_BUFFER)}function p(_){const x=[],y=_.index,E=_.attributes.position;let w=0;if(y!==null){const O=y.array;w=y.version;for(let N=0,D=O.length;N<D;N+=3){const te=O[N+0],$=O[N+1],j=O[N+2];x.push(te,$,$,j,j,te)}}else if(E!==void 0){const O=E.array;w=E.version;for(let N=0,D=O.length/3-1;N<D;N+=3){const te=N+0,$=N+1,j=N+2;x.push(te,$,$,j,j,te)}}else return;const b=new(Kp(x)?ju:Ju)(x,1);b.version=w;const S=a.get(_);S&&e.remove(S),a.set(_,b)}function g(_){const x=a.get(_);if(x){const y=_.index;y!==null&&x.version<y.version&&p(_)}else p(_);return a.get(_)}return{get:h,update:f,getWireframeAttribute:g}}function lb(o,e,t){let i;function r(x){i=x}let a,c;function h(x){a=x.type,c=x.bytesPerElement}function f(x,y){o.drawElements(i,y,a,x*c),t.update(y,i,1)}function p(x,y,E){E!==0&&(o.drawElementsInstanced(i,y,a,x*c,E),t.update(y,i,E))}function g(x,y,E){if(E===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,y,0,a,x,0,E);let b=0;for(let S=0;S<E;S++)b+=y[S];t.update(b,i,1)}function _(x,y,E,w){if(E===0)return;const b=e.get("WEBGL_multi_draw");if(b===null)for(let S=0;S<x.length;S++)p(x[S]/c,y[S],w[S]);else{b.multiDrawElementsInstancedWEBGL(i,y,0,a,x,0,w,0,E);let S=0;for(let O=0;O<E;O++)S+=y[O]*w[O];t.update(S,i,1)}}this.setMode=r,this.setIndex=h,this.render=f,this.renderInstances=p,this.renderMultiDraw=g,this.renderMultiDrawInstances=_}function hb(o){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function i(a,c,h){switch(t.calls++,c){case o.TRIANGLES:t.triangles+=h*(a/3);break;case o.LINES:t.lines+=h*(a/2);break;case o.LINE_STRIP:t.lines+=h*(a-1);break;case o.LINE_LOOP:t.lines+=h*a;break;case o.POINTS:t.points+=h*a;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",c);break}}function r(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:r,update:i}}function ub(o,e,t){const i=new WeakMap,r=new $n;function a(c,h,f){const p=c.morphTargetInfluences,g=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color,_=g!==void 0?g.length:0;let x=i.get(h);if(x===void 0||x.count!==_){let z=function(){ne.dispose(),i.delete(h),h.removeEventListener("dispose",z)};var y=z;x!==void 0&&x.texture.dispose();const E=h.morphAttributes.position!==void 0,w=h.morphAttributes.normal!==void 0,b=h.morphAttributes.color!==void 0,S=h.morphAttributes.position||[],O=h.morphAttributes.normal||[],N=h.morphAttributes.color||[];let D=0;E===!0&&(D=1),w===!0&&(D=2),b===!0&&(D=3);let te=h.attributes.position.count*D,$=1;te>e.maxTextureSize&&($=Math.ceil(te/e.maxTextureSize),te=e.maxTextureSize);const j=new Float32Array(te*$*4*_),ne=new Al(j,te,$,_);ne.type=_i,ne.needsUpdate=!0;const H=D*4;for(let re=0;re<_;re++){const De=S[re],Ae=O[re],He=N[re],Ke=te*$*4*re;for(let ke=0;ke<De.count;ke++){const st=ke*H;E===!0&&(r.fromBufferAttribute(De,ke),j[Ke+st+0]=r.x,j[Ke+st+1]=r.y,j[Ke+st+2]=r.z,j[Ke+st+3]=0),w===!0&&(r.fromBufferAttribute(Ae,ke),j[Ke+st+4]=r.x,j[Ke+st+5]=r.y,j[Ke+st+6]=r.z,j[Ke+st+7]=0),b===!0&&(r.fromBufferAttribute(He,ke),j[Ke+st+8]=r.x,j[Ke+st+9]=r.y,j[Ke+st+10]=r.z,j[Ke+st+11]=He.itemSize===4?r.w:1)}}x={count:_,texture:ne,size:new et(te,$)},i.set(h,x),h.addEventListener("dispose",z)}if(c.isInstancedMesh===!0&&c.morphTexture!==null)f.getUniforms().setValue(o,"morphTexture",c.morphTexture,t);else{let E=0;for(let b=0;b<p.length;b++)E+=p[b];const w=h.morphTargetsRelative?1:1-E;f.getUniforms().setValue(o,"morphTargetBaseInfluence",w),f.getUniforms().setValue(o,"morphTargetInfluences",p)}f.getUniforms().setValue(o,"morphTargetsTexture",x.texture,t),f.getUniforms().setValue(o,"morphTargetsTextureSize",x.size)}return{update:a}}function db(o,e,t,i){let r=new WeakMap;function a(f){const p=i.render.frame,g=f.geometry,_=e.get(f,g);if(r.get(_)!==p&&(e.update(_),r.set(_,p)),f.isInstancedMesh&&(f.hasEventListener("dispose",h)===!1&&f.addEventListener("dispose",h),r.get(f)!==p&&(t.update(f.instanceMatrix,o.ARRAY_BUFFER),f.instanceColor!==null&&t.update(f.instanceColor,o.ARRAY_BUFFER),r.set(f,p))),f.isSkinnedMesh){const x=f.skeleton;r.get(x)!==p&&(x.update(),r.set(x,p))}return _}function c(){r=new WeakMap}function h(f){const p=f.target;p.removeEventListener("dispose",h),t.remove(p.instanceMatrix),p.instanceColor!==null&&t.remove(p.instanceColor)}return{update:a,dispose:c}}const m_=new Ei,g_=new fd(1,1),__=new Al,x_=new Nu,v_=new Lc,y_=[],M_=[],S_=new Float32Array(16),E_=new Float32Array(9),b_=new Float32Array(4);function Ho(o,e,t){const i=o[0];if(i<=0||i>0)return o;const r=e*t;let a=y_[r];if(a===void 0&&(a=new Float32Array(r),y_[r]=a),e!==0){i.toArray(a,0);for(let c=1,h=0;c!==e;++c)h+=t,o[c].toArray(a,h)}return a}function Ni(o,e){if(o.length!==e.length)return!1;for(let t=0,i=o.length;t<i;t++)if(o[t]!==e[t])return!1;return!0}function Fi(o,e){for(let t=0,i=e.length;t<i;t++)o[t]=e[t]}function Gh(o,e){let t=M_[e];t===void 0&&(t=new Int32Array(e),M_[e]=t);for(let i=0;i!==e;++i)t[i]=o.allocateTextureUnit();return t}function fb(o,e){const t=this.cache;t[0]!==e&&(o.uniform1f(this.addr,e),t[0]=e)}function pb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ni(t,e))return;o.uniform2fv(this.addr,e),Fi(t,e)}}function mb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(o.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Ni(t,e))return;o.uniform3fv(this.addr,e),Fi(t,e)}}function gb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ni(t,e))return;o.uniform4fv(this.addr,e),Fi(t,e)}}function _b(o,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ni(t,e))return;o.uniformMatrix2fv(this.addr,!1,e),Fi(t,e)}else{if(Ni(t,i))return;b_.set(i),o.uniformMatrix2fv(this.addr,!1,b_),Fi(t,i)}}function xb(o,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ni(t,e))return;o.uniformMatrix3fv(this.addr,!1,e),Fi(t,e)}else{if(Ni(t,i))return;E_.set(i),o.uniformMatrix3fv(this.addr,!1,E_),Fi(t,i)}}function vb(o,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ni(t,e))return;o.uniformMatrix4fv(this.addr,!1,e),Fi(t,e)}else{if(Ni(t,i))return;S_.set(i),o.uniformMatrix4fv(this.addr,!1,S_),Fi(t,i)}}function yb(o,e){const t=this.cache;t[0]!==e&&(o.uniform1i(this.addr,e),t[0]=e)}function Mb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ni(t,e))return;o.uniform2iv(this.addr,e),Fi(t,e)}}function Sb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Ni(t,e))return;o.uniform3iv(this.addr,e),Fi(t,e)}}function Eb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ni(t,e))return;o.uniform4iv(this.addr,e),Fi(t,e)}}function bb(o,e){const t=this.cache;t[0]!==e&&(o.uniform1ui(this.addr,e),t[0]=e)}function Tb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ni(t,e))return;o.uniform2uiv(this.addr,e),Fi(t,e)}}function Ab(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Ni(t,e))return;o.uniform3uiv(this.addr,e),Fi(t,e)}}function wb(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ni(t,e))return;o.uniform4uiv(this.addr,e),Fi(t,e)}}function Cb(o,e,t){const i=this.cache,r=t.allocateTextureUnit();i[0]!==r&&(o.uniform1i(this.addr,r),i[0]=r);let a;this.type===o.SAMPLER_2D_SHADOW?(g_.compareFunction=Pu,a=g_):a=m_,t.setTexture2D(e||a,r)}function Rb(o,e,t){const i=this.cache,r=t.allocateTextureUnit();i[0]!==r&&(o.uniform1i(this.addr,r),i[0]=r),t.setTexture3D(e||x_,r)}function Pb(o,e,t){const i=this.cache,r=t.allocateTextureUnit();i[0]!==r&&(o.uniform1i(this.addr,r),i[0]=r),t.setTextureCube(e||v_,r)}function Ib(o,e,t){const i=this.cache,r=t.allocateTextureUnit();i[0]!==r&&(o.uniform1i(this.addr,r),i[0]=r),t.setTexture2DArray(e||__,r)}function Lb(o){switch(o){case 5126:return fb;case 35664:return pb;case 35665:return mb;case 35666:return gb;case 35674:return _b;case 35675:return xb;case 35676:return vb;case 5124:case 35670:return yb;case 35667:case 35671:return Mb;case 35668:case 35672:return Sb;case 35669:case 35673:return Eb;case 5125:return bb;case 36294:return Tb;case 36295:return Ab;case 36296:return wb;case 35678:case 36198:case 36298:case 36306:case 35682:return Cb;case 35679:case 36299:case 36307:return Rb;case 35680:case 36300:case 36308:case 36293:return Pb;case 36289:case 36303:case 36311:case 36292:return Ib}}function Db(o,e){o.uniform1fv(this.addr,e)}function Ub(o,e){const t=Ho(e,this.size,2);o.uniform2fv(this.addr,t)}function Nb(o,e){const t=Ho(e,this.size,3);o.uniform3fv(this.addr,t)}function Fb(o,e){const t=Ho(e,this.size,4);o.uniform4fv(this.addr,t)}function Ob(o,e){const t=Ho(e,this.size,4);o.uniformMatrix2fv(this.addr,!1,t)}function Bb(o,e){const t=Ho(e,this.size,9);o.uniformMatrix3fv(this.addr,!1,t)}function zb(o,e){const t=Ho(e,this.size,16);o.uniformMatrix4fv(this.addr,!1,t)}function Vb(o,e){o.uniform1iv(this.addr,e)}function kb(o,e){o.uniform2iv(this.addr,e)}function Hb(o,e){o.uniform3iv(this.addr,e)}function Gb(o,e){o.uniform4iv(this.addr,e)}function Wb(o,e){o.uniform1uiv(this.addr,e)}function Xb(o,e){o.uniform2uiv(this.addr,e)}function qb(o,e){o.uniform3uiv(this.addr,e)}function Yb(o,e){o.uniform4uiv(this.addr,e)}function Zb(o,e,t){const i=this.cache,r=e.length,a=Gh(t,r);Ni(i,a)||(o.uniform1iv(this.addr,a),Fi(i,a));for(let c=0;c!==r;++c)t.setTexture2D(e[c]||m_,a[c])}function $b(o,e,t){const i=this.cache,r=e.length,a=Gh(t,r);Ni(i,a)||(o.uniform1iv(this.addr,a),Fi(i,a));for(let c=0;c!==r;++c)t.setTexture3D(e[c]||x_,a[c])}function Kb(o,e,t){const i=this.cache,r=e.length,a=Gh(t,r);Ni(i,a)||(o.uniform1iv(this.addr,a),Fi(i,a));for(let c=0;c!==r;++c)t.setTextureCube(e[c]||v_,a[c])}function Jb(o,e,t){const i=this.cache,r=e.length,a=Gh(t,r);Ni(i,a)||(o.uniform1iv(this.addr,a),Fi(i,a));for(let c=0;c!==r;++c)t.setTexture2DArray(e[c]||__,a[c])}function jb(o){switch(o){case 5126:return Db;case 35664:return Ub;case 35665:return Nb;case 35666:return Fb;case 35674:return Ob;case 35675:return Bb;case 35676:return zb;case 5124:case 35670:return Vb;case 35667:case 35671:return kb;case 35668:case 35672:return Hb;case 35669:case 35673:return Gb;case 5125:return Wb;case 36294:return Xb;case 36295:return qb;case 36296:return Yb;case 35678:case 36198:case 36298:case 36306:case 35682:return Zb;case 35679:case 36299:case 36307:return $b;case 35680:case 36300:case 36308:case 36293:return Kb;case 36289:case 36303:case 36311:case 36292:return Jb}}class Qb{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.setValue=Lb(t.type)}}class e1{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=jb(t.type)}}class t1{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,i){const r=this.seq;for(let a=0,c=r.length;a!==c;++a){const h=r[a];h.setValue(e,t[h.id],i)}}}const ef=/(\w+)(\])?(\[|\.)?/g;function T_(o,e){o.seq.push(e),o.map[e.id]=e}function n1(o,e,t){const i=o.name,r=i.length;for(ef.lastIndex=0;;){const a=ef.exec(i),c=ef.lastIndex;let h=a[1];const f=a[2]==="]",p=a[3];if(f&&(h=h|0),p===void 0||p==="["&&c+2===r){T_(t,p===void 0?new Qb(h,o,e):new e1(h,o,e));break}else{let _=t.map[h];_===void 0&&(_=new t1(h),T_(t,_)),t=_}}}class Wh{constructor(e,t){this.seq=[],this.map={};const i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<i;++r){const a=e.getActiveUniform(t,r),c=e.getUniformLocation(t,a.name);n1(a,c,this)}}setValue(e,t,i,r){const a=this.map[t];a!==void 0&&a.setValue(e,i,r)}setOptional(e,t,i){const r=t[i];r!==void 0&&this.setValue(e,i,r)}static upload(e,t,i,r){for(let a=0,c=t.length;a!==c;++a){const h=t[a],f=i[h.id];f.needsUpdate!==!1&&h.setValue(e,f.value,r)}}static seqWithValue(e,t){const i=[];for(let r=0,a=e.length;r!==a;++r){const c=e[r];c.id in t&&i.push(c)}return i}}function A_(o,e,t){const i=o.createShader(e);return o.shaderSource(i,t),o.compileShader(i),i}const i1=37297;let r1=0;function s1(o,e){const t=o.split(`
`),i=[],r=Math.max(e-6,0),a=Math.min(e+6,t.length);for(let c=r;c<a;c++){const h=c+1;i.push(`${h===e?">":" "} ${h}: ${t[c]}`)}return i.join(`
`)}const w_=new wn;function a1(o){Xn._getMatrix(w_,Xn.workingColorSpace,o);const e=`mat3( ${w_.elements.map(t=>t.toFixed(4))} )`;switch(Xn.getTransfer(o)){case Sc:return[e,"LinearTransferOETF"];case ci:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",o),[e,"LinearTransferOETF"]}}function C_(o,e,t){const i=o.getShaderParameter(e,o.COMPILE_STATUS),r=o.getShaderInfoLog(e).trim();if(i&&r==="")return"";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const c=parseInt(a[1]);return t.toUpperCase()+`

`+r+`

`+s1(o.getShaderSource(e),c)}else return r}function o1(o,e){const t=a1(e);return[`vec4 ${o}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function c1(o,e){let t;switch(e){case bt:t="Linear";break;case Tt:t="Reinhard";break;case gt:t="Cineon";break;case ln:t="ACESFilmic";break;case X:t="AgX";break;case B:t="Neutral";break;case ut:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+o+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const Xh=new J;function l1(){Xn.getLuminanceCoefficients(Xh);const o=Xh.x.toFixed(4),e=Xh.y.toFixed(4),t=Xh.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${o}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function h1(o){return[o.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",o.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(il).join(`
`)}function u1(o){const e=[];for(const t in o){const i=o[t];i!==!1&&e.push("#define "+t+" "+i)}return e.join(`
`)}function d1(o,e){const t={},i=o.getProgramParameter(e,o.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const a=o.getActiveAttrib(e,r),c=a.name;let h=1;a.type===o.FLOAT_MAT2&&(h=2),a.type===o.FLOAT_MAT3&&(h=3),a.type===o.FLOAT_MAT4&&(h=4),t[c]={type:a.type,location:o.getAttribLocation(e,c),locationSize:h}}return t}function il(o){return o!==""}function R_(o,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return o.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function P_(o,e){return o.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const f1=/^[ \t]*#include +<([\w\d./]+)>/gm;function tf(o){return o.replace(f1,m1)}const p1=new Map;function m1(o,e){let t=Ln[e];if(t===void 0){const i=p1.get(e);if(i!==void 0)t=Ln[i],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,i);else throw new Error("Can not resolve #include <"+e+">")}return tf(t)}const g1=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function I_(o){return o.replace(g1,_1)}function _1(o,e,t,i){let r="";for(let a=parseInt(e);a<parseInt(t);a++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return r}function L_(o){let e=`precision ${o.precision} float;
	precision ${o.precision} int;
	precision ${o.precision} sampler2D;
	precision ${o.precision} samplerCube;
	precision ${o.precision} sampler3D;
	precision ${o.precision} sampler2DArray;
	precision ${o.precision} sampler2DShadow;
	precision ${o.precision} samplerCubeShadow;
	precision ${o.precision} sampler2DArrayShadow;
	precision ${o.precision} isampler2D;
	precision ${o.precision} isampler3D;
	precision ${o.precision} isamplerCube;
	precision ${o.precision} isampler2DArray;
	precision ${o.precision} usampler2D;
	precision ${o.precision} usampler3D;
	precision ${o.precision} usamplerCube;
	precision ${o.precision} usampler2DArray;
	`;return o.precision==="highp"?e+=`
#define HIGH_PRECISION`:o.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:o.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function x1(o){let e="SHADOWMAP_TYPE_BASIC";return o.shadowMapType===T?e="SHADOWMAP_TYPE_PCF":o.shadowMapType===A?e="SHADOWMAP_TYPE_PCF_SOFT":o.shadowMapType===C&&(e="SHADOWMAP_TYPE_VSM"),e}function v1(o){let e="ENVMAP_TYPE_CUBE";if(o.envMap)switch(o.envMapMode){case Pe:case yt:e="ENVMAP_TYPE_CUBE";break;case je:e="ENVMAP_TYPE_CUBE_UV";break}return e}function y1(o){let e="ENVMAP_MODE_REFLECTION";if(o.envMap)switch(o.envMapMode){case yt:e="ENVMAP_MODE_REFRACTION";break}return e}function M1(o){let e="ENVMAP_BLENDING_NONE";if(o.envMap)switch(o.combine){case ht:e="ENVMAP_BLENDING_MULTIPLY";break;case Qt:e="ENVMAP_BLENDING_MIX";break;case ie:e="ENVMAP_BLENDING_ADD";break}return e}function S1(o){const e=o.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:i,maxMip:t}}function E1(o,e,t,i){const r=o.getContext(),a=t.defines;let c=t.vertexShader,h=t.fragmentShader;const f=x1(t),p=v1(t),g=y1(t),_=M1(t),x=S1(t),y=h1(t),E=u1(a),w=r.createProgram();let b,S,O=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(b=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,E].filter(il).join(`
`),b.length>0&&(b+=`
`),S=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,E].filter(il).join(`
`),S.length>0&&(S+=`
`)):(b=[L_(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,E,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+g:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(il).join(`
`),S=[L_(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,E,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+p:"",t.envMap?"#define "+g:"",t.envMap?"#define "+_:"",x?"#define CUBEUV_TEXEL_WIDTH "+x.texelWidth:"",x?"#define CUBEUV_TEXEL_HEIGHT "+x.texelHeight:"",x?"#define CUBEUV_MAX_MIP "+x.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+f:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Dt?"#define TONE_MAPPING":"",t.toneMapping!==Dt?Ln.tonemapping_pars_fragment:"",t.toneMapping!==Dt?c1("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Ln.colorspace_pars_fragment,o1("linearToOutputTexel",t.outputColorSpace),l1(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(il).join(`
`)),c=tf(c),c=R_(c,t),c=P_(c,t),h=tf(h),h=R_(h,t),h=P_(h,t),c=I_(c),h=I_(h),t.isRawShaderMaterial!==!0&&(O=`#version 300 es
`,b=[y,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+b,S=["#define varying in",t.glslVersion===Iu?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Iu?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+S);const N=O+b+c,D=O+S+h,te=A_(r,r.VERTEX_SHADER,N),$=A_(r,r.FRAGMENT_SHADER,D);r.attachShader(w,te),r.attachShader(w,$),t.index0AttributeName!==void 0?r.bindAttribLocation(w,0,t.index0AttributeName):t.morphTargets===!0&&r.bindAttribLocation(w,0,"position"),r.linkProgram(w);function j(re){if(o.debug.checkShaderErrors){const De=r.getProgramInfoLog(w).trim(),Ae=r.getShaderInfoLog(te).trim(),He=r.getShaderInfoLog($).trim();let Ke=!0,ke=!0;if(r.getProgramParameter(w,r.LINK_STATUS)===!1)if(Ke=!1,typeof o.debug.onShaderError=="function")o.debug.onShaderError(r,w,te,$);else{const st=C_(r,te,"vertex"),Be=C_(r,$,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(w,r.VALIDATE_STATUS)+`

Material Name: `+re.name+`
Material Type: `+re.type+`

Program Info Log: `+De+`
`+st+`
`+Be)}else De!==""?console.warn("THREE.WebGLProgram: Program Info Log:",De):(Ae===""||He==="")&&(ke=!1);ke&&(re.diagnostics={runnable:Ke,programLog:De,vertexShader:{log:Ae,prefix:b},fragmentShader:{log:He,prefix:S}})}r.deleteShader(te),r.deleteShader($),ne=new Wh(r,w),H=d1(r,w)}let ne;this.getUniforms=function(){return ne===void 0&&j(this),ne};let H;this.getAttributes=function(){return H===void 0&&j(this),H};let z=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return z===!1&&(z=r.getProgramParameter(w,i1)),z},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(w),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=r1++,this.cacheKey=e,this.usedTimes=1,this.program=w,this.vertexShader=te,this.fragmentShader=$,this}let b1=0;class T1{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,i=e.fragmentShader,r=this._getShaderStage(t),a=this._getShaderStage(i),c=this._getShaderCacheForMaterial(e);return c.has(r)===!1&&(c.add(r),r.usedTimes++),c.has(a)===!1&&(c.add(a),a.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const i of t)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let i=t.get(e);return i===void 0&&(i=new Set,t.set(e,i)),i}_getShaderStage(e){const t=this.shaderCache;let i=t.get(e);return i===void 0&&(i=new A1(e),t.set(e,i)),i}}class A1{constructor(e){this.id=b1++,this.code=e,this.usedTimes=0}}function w1(o,e,t,i,r,a,c){const h=new Dl,f=new T1,p=new Set,g=[],_=r.logarithmicDepthBuffer,x=r.vertexTextures;let y=r.precision;const E={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function w(H){return p.add(H),H===0?"uv":`uv${H}`}function b(H,z,re,De,Ae){const He=De.fog,Ke=Ae.geometry,ke=H.isMeshStandardMaterial?De.environment:null,st=(H.isMeshStandardMaterial?t:e).get(H.envMap||ke),Be=st&&st.mapping===je?st.image.height:null,It=E[H.type];H.precision!==null&&(y=r.getMaxPrecision(H.precision),y!==H.precision&&console.warn("THREE.WebGLProgram.getParameters:",H.precision,"not supported, using",y,"instead."));const Xt=Ke.morphAttributes.position||Ke.morphAttributes.normal||Ke.morphAttributes.color,en=Xt!==void 0?Xt.length:0;let Pn=0;Ke.morphAttributes.position!==void 0&&(Pn=1),Ke.morphAttributes.normal!==void 0&&(Pn=2),Ke.morphAttributes.color!==void 0&&(Pn=3);let ri,$e,vt,rn;if(It){const li=$r[It];ri=li.vertexShader,$e=li.fragmentShader}else ri=H.vertexShader,$e=H.fragmentShader,f.update(H),vt=f.getVertexShaderID(H),rn=f.getFragmentShaderID(H);const Et=o.getRenderTarget(),un=o.state.buffers.depth.getReversed(),Tn=Ae.isInstancedMesh===!0,yn=Ae.isBatchedMesh===!0,jn=!!H.map,nt=!!H.matcap,xt=!!st,Q=!!H.aoMap,cn=!!H.lightMap,dt=!!H.bumpMap,Zt=!!H.normalMap,Mt=!!H.displacementMap,vn=!!H.emissiveMap,Gt=!!H.metalnessMap,Z=!!H.roughnessMap,V=H.anisotropy>0,Me=H.clearcoat>0,qe=H.dispersion>0,at=H.iridescence>0,Ye=H.sheen>0,sn=H.transmission>0,Ut=V&&!!H.anisotropyMap,Yt=Me&&!!H.clearcoatMap,Vn=Me&&!!H.clearcoatNormalMap,mt=Me&&!!H.clearcoatRoughnessMap,Jt=at&&!!H.iridescenceMap,_n=at&&!!H.iridescenceThicknessMap,Sn=Ye&&!!H.sheenColorMap,jt=Ye&&!!H.sheenRoughnessMap,qn=!!H.specularMap,Nn=!!H.specularColorMap,mi=!!H.specularIntensityMap,pe=sn&&!!H.transmissionMap,Ft=sn&&!!H.thicknessMap,Ve=!!H.gradientMap,tt=!!H.alphaMap,Wt=H.alphaTest>0,Vt=!!H.alphaHash,Dn=!!H.extensions;let Ti=Dt;H.toneMapped&&(Et===null||Et.isXRRenderTarget===!0)&&(Ti=o.toneMapping);const Qi={shaderID:It,shaderType:H.type,shaderName:H.name,vertexShader:ri,fragmentShader:$e,defines:H.defines,customVertexShaderID:vt,customFragmentShaderID:rn,isRawShaderMaterial:H.isRawShaderMaterial===!0,glslVersion:H.glslVersion,precision:y,batching:yn,batchingColor:yn&&Ae._colorsTexture!==null,instancing:Tn,instancingColor:Tn&&Ae.instanceColor!==null,instancingMorph:Tn&&Ae.morphTexture!==null,supportsVertexTextures:x,outputColorSpace:Et===null?o.outputColorSpace:Et.isXRRenderTarget===!0?Et.texture.colorSpace:ga,alphaToCoverage:!!H.alphaToCoverage,map:jn,matcap:nt,envMap:xt,envMapMode:xt&&st.mapping,envMapCubeUVHeight:Be,aoMap:Q,lightMap:cn,bumpMap:dt,normalMap:Zt,displacementMap:x&&Mt,emissiveMap:vn,normalMapObjectSpace:Zt&&H.normalMapType===kp,normalMapTangentSpace:Zt&&H.normalMapType===Hs,metalnessMap:Gt,roughnessMap:Z,anisotropy:V,anisotropyMap:Ut,clearcoat:Me,clearcoatMap:Yt,clearcoatNormalMap:Vn,clearcoatRoughnessMap:mt,dispersion:qe,iridescence:at,iridescenceMap:Jt,iridescenceThicknessMap:_n,sheen:Ye,sheenColorMap:Sn,sheenRoughnessMap:jt,specularMap:qn,specularColorMap:Nn,specularIntensityMap:mi,transmission:sn,transmissionMap:pe,thicknessMap:Ft,gradientMap:Ve,opaque:H.transparent===!1&&H.blending===Y&&H.alphaToCoverage===!1,alphaMap:tt,alphaTest:Wt,alphaHash:Vt,combine:H.combine,mapUv:jn&&w(H.map.channel),aoMapUv:Q&&w(H.aoMap.channel),lightMapUv:cn&&w(H.lightMap.channel),bumpMapUv:dt&&w(H.bumpMap.channel),normalMapUv:Zt&&w(H.normalMap.channel),displacementMapUv:Mt&&w(H.displacementMap.channel),emissiveMapUv:vn&&w(H.emissiveMap.channel),metalnessMapUv:Gt&&w(H.metalnessMap.channel),roughnessMapUv:Z&&w(H.roughnessMap.channel),anisotropyMapUv:Ut&&w(H.anisotropyMap.channel),clearcoatMapUv:Yt&&w(H.clearcoatMap.channel),clearcoatNormalMapUv:Vn&&w(H.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:mt&&w(H.clearcoatRoughnessMap.channel),iridescenceMapUv:Jt&&w(H.iridescenceMap.channel),iridescenceThicknessMapUv:_n&&w(H.iridescenceThicknessMap.channel),sheenColorMapUv:Sn&&w(H.sheenColorMap.channel),sheenRoughnessMapUv:jt&&w(H.sheenRoughnessMap.channel),specularMapUv:qn&&w(H.specularMap.channel),specularColorMapUv:Nn&&w(H.specularColorMap.channel),specularIntensityMapUv:mi&&w(H.specularIntensityMap.channel),transmissionMapUv:pe&&w(H.transmissionMap.channel),thicknessMapUv:Ft&&w(H.thicknessMap.channel),alphaMapUv:tt&&w(H.alphaMap.channel),vertexTangents:!!Ke.attributes.tangent&&(Zt||V),vertexColors:H.vertexColors,vertexAlphas:H.vertexColors===!0&&!!Ke.attributes.color&&Ke.attributes.color.itemSize===4,pointsUvs:Ae.isPoints===!0&&!!Ke.attributes.uv&&(jn||tt),fog:!!He,useFog:H.fog===!0,fogExp2:!!He&&He.isFogExp2,flatShading:H.flatShading===!0,sizeAttenuation:H.sizeAttenuation===!0,logarithmicDepthBuffer:_,reverseDepthBuffer:un,skinning:Ae.isSkinnedMesh===!0,morphTargets:Ke.morphAttributes.position!==void 0,morphNormals:Ke.morphAttributes.normal!==void 0,morphColors:Ke.morphAttributes.color!==void 0,morphTargetsCount:en,morphTextureStride:Pn,numDirLights:z.directional.length,numPointLights:z.point.length,numSpotLights:z.spot.length,numSpotLightMaps:z.spotLightMap.length,numRectAreaLights:z.rectArea.length,numHemiLights:z.hemi.length,numDirLightShadows:z.directionalShadowMap.length,numPointLightShadows:z.pointShadowMap.length,numSpotLightShadows:z.spotShadowMap.length,numSpotLightShadowsWithMaps:z.numSpotLightShadowsWithMaps,numLightProbes:z.numLightProbes,numClippingPlanes:c.numPlanes,numClipIntersection:c.numIntersection,dithering:H.dithering,shadowMapEnabled:o.shadowMap.enabled&&re.length>0,shadowMapType:o.shadowMap.type,toneMapping:Ti,decodeVideoTexture:jn&&H.map.isVideoTexture===!0&&Xn.getTransfer(H.map.colorSpace)===ci,decodeVideoTextureEmissive:vn&&H.emissiveMap.isVideoTexture===!0&&Xn.getTransfer(H.emissiveMap.colorSpace)===ci,premultipliedAlpha:H.premultipliedAlpha,doubleSided:H.side===F,flipSided:H.side===I,useDepthPacking:H.depthPacking>=0,depthPacking:H.depthPacking||0,index0AttributeName:H.index0AttributeName,extensionClipCullDistance:Dn&&H.extensions.clipCullDistance===!0&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Dn&&H.extensions.multiDraw===!0||yn)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:H.customProgramCacheKey()};return Qi.vertexUv1s=p.has(1),Qi.vertexUv2s=p.has(2),Qi.vertexUv3s=p.has(3),p.clear(),Qi}function S(H){const z=[];if(H.shaderID?z.push(H.shaderID):(z.push(H.customVertexShaderID),z.push(H.customFragmentShaderID)),H.defines!==void 0)for(const re in H.defines)z.push(re),z.push(H.defines[re]);return H.isRawShaderMaterial===!1&&(O(z,H),N(z,H),z.push(o.outputColorSpace)),z.push(H.customProgramCacheKey),z.join()}function O(H,z){H.push(z.precision),H.push(z.outputColorSpace),H.push(z.envMapMode),H.push(z.envMapCubeUVHeight),H.push(z.mapUv),H.push(z.alphaMapUv),H.push(z.lightMapUv),H.push(z.aoMapUv),H.push(z.bumpMapUv),H.push(z.normalMapUv),H.push(z.displacementMapUv),H.push(z.emissiveMapUv),H.push(z.metalnessMapUv),H.push(z.roughnessMapUv),H.push(z.anisotropyMapUv),H.push(z.clearcoatMapUv),H.push(z.clearcoatNormalMapUv),H.push(z.clearcoatRoughnessMapUv),H.push(z.iridescenceMapUv),H.push(z.iridescenceThicknessMapUv),H.push(z.sheenColorMapUv),H.push(z.sheenRoughnessMapUv),H.push(z.specularMapUv),H.push(z.specularColorMapUv),H.push(z.specularIntensityMapUv),H.push(z.transmissionMapUv),H.push(z.thicknessMapUv),H.push(z.combine),H.push(z.fogExp2),H.push(z.sizeAttenuation),H.push(z.morphTargetsCount),H.push(z.morphAttributeCount),H.push(z.numDirLights),H.push(z.numPointLights),H.push(z.numSpotLights),H.push(z.numSpotLightMaps),H.push(z.numHemiLights),H.push(z.numRectAreaLights),H.push(z.numDirLightShadows),H.push(z.numPointLightShadows),H.push(z.numSpotLightShadows),H.push(z.numSpotLightShadowsWithMaps),H.push(z.numLightProbes),H.push(z.shadowMapType),H.push(z.toneMapping),H.push(z.numClippingPlanes),H.push(z.numClipIntersection),H.push(z.depthPacking)}function N(H,z){h.disableAll(),z.supportsVertexTextures&&h.enable(0),z.instancing&&h.enable(1),z.instancingColor&&h.enable(2),z.instancingMorph&&h.enable(3),z.matcap&&h.enable(4),z.envMap&&h.enable(5),z.normalMapObjectSpace&&h.enable(6),z.normalMapTangentSpace&&h.enable(7),z.clearcoat&&h.enable(8),z.iridescence&&h.enable(9),z.alphaTest&&h.enable(10),z.vertexColors&&h.enable(11),z.vertexAlphas&&h.enable(12),z.vertexUv1s&&h.enable(13),z.vertexUv2s&&h.enable(14),z.vertexUv3s&&h.enable(15),z.vertexTangents&&h.enable(16),z.anisotropy&&h.enable(17),z.alphaHash&&h.enable(18),z.batching&&h.enable(19),z.dispersion&&h.enable(20),z.batchingColor&&h.enable(21),H.push(h.mask),h.disableAll(),z.fog&&h.enable(0),z.useFog&&h.enable(1),z.flatShading&&h.enable(2),z.logarithmicDepthBuffer&&h.enable(3),z.reverseDepthBuffer&&h.enable(4),z.skinning&&h.enable(5),z.morphTargets&&h.enable(6),z.morphNormals&&h.enable(7),z.morphColors&&h.enable(8),z.premultipliedAlpha&&h.enable(9),z.shadowMapEnabled&&h.enable(10),z.doubleSided&&h.enable(11),z.flipSided&&h.enable(12),z.useDepthPacking&&h.enable(13),z.dithering&&h.enable(14),z.transmission&&h.enable(15),z.sheen&&h.enable(16),z.opaque&&h.enable(17),z.pointsUvs&&h.enable(18),z.decodeVideoTexture&&h.enable(19),z.decodeVideoTextureEmissive&&h.enable(20),z.alphaToCoverage&&h.enable(21),H.push(h.mask)}function D(H){const z=E[H.type];let re;if(z){const De=$r[z];re=_m.clone(De.uniforms)}else re=H.uniforms;return re}function te(H,z){let re;for(let De=0,Ae=g.length;De<Ae;De++){const He=g[De];if(He.cacheKey===z){re=He,++re.usedTimes;break}}return re===void 0&&(re=new E1(o,z,H,a),g.push(re)),re}function $(H){if(--H.usedTimes===0){const z=g.indexOf(H);g[z]=g[g.length-1],g.pop(),H.destroy()}}function j(H){f.remove(H)}function ne(){f.dispose()}return{getParameters:b,getProgramCacheKey:S,getUniforms:D,acquireProgram:te,releaseProgram:$,releaseShaderCache:j,programs:g,dispose:ne}}function C1(){let o=new WeakMap;function e(c){return o.has(c)}function t(c){let h=o.get(c);return h===void 0&&(h={},o.set(c,h)),h}function i(c){o.delete(c)}function r(c,h,f){o.get(c)[h]=f}function a(){o=new WeakMap}return{has:e,get:t,remove:i,update:r,dispose:a}}function R1(o,e){return o.groupOrder!==e.groupOrder?o.groupOrder-e.groupOrder:o.renderOrder!==e.renderOrder?o.renderOrder-e.renderOrder:o.material.id!==e.material.id?o.material.id-e.material.id:o.z!==e.z?o.z-e.z:o.id-e.id}function D_(o,e){return o.groupOrder!==e.groupOrder?o.groupOrder-e.groupOrder:o.renderOrder!==e.renderOrder?o.renderOrder-e.renderOrder:o.z!==e.z?e.z-o.z:o.id-e.id}function U_(){const o=[];let e=0;const t=[],i=[],r=[];function a(){e=0,t.length=0,i.length=0,r.length=0}function c(_,x,y,E,w,b){let S=o[e];return S===void 0?(S={id:_.id,object:_,geometry:x,material:y,groupOrder:E,renderOrder:_.renderOrder,z:w,group:b},o[e]=S):(S.id=_.id,S.object=_,S.geometry=x,S.material=y,S.groupOrder=E,S.renderOrder=_.renderOrder,S.z=w,S.group=b),e++,S}function h(_,x,y,E,w,b){const S=c(_,x,y,E,w,b);y.transmission>0?i.push(S):y.transparent===!0?r.push(S):t.push(S)}function f(_,x,y,E,w,b){const S=c(_,x,y,E,w,b);y.transmission>0?i.unshift(S):y.transparent===!0?r.unshift(S):t.unshift(S)}function p(_,x){t.length>1&&t.sort(_||R1),i.length>1&&i.sort(x||D_),r.length>1&&r.sort(x||D_)}function g(){for(let _=e,x=o.length;_<x;_++){const y=o[_];if(y.id===null)break;y.id=null,y.object=null,y.geometry=null,y.material=null,y.group=null}}return{opaque:t,transmissive:i,transparent:r,init:a,push:h,unshift:f,finish:g,sort:p}}function P1(){let o=new WeakMap;function e(i,r){const a=o.get(i);let c;return a===void 0?(c=new U_,o.set(i,[c])):r>=a.length?(c=new U_,a.push(c)):c=a[r],c}function t(){o=new WeakMap}return{get:e,dispose:t}}function I1(){const o={};return{get:function(e){if(o[e.id]!==void 0)return o[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new J,color:new Ht};break;case"SpotLight":t={position:new J,direction:new J,color:new Ht,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new J,color:new Ht,distance:0,decay:0};break;case"HemisphereLight":t={direction:new J,skyColor:new Ht,groundColor:new Ht};break;case"RectAreaLight":t={color:new Ht,position:new J,halfWidth:new J,halfHeight:new J};break}return o[e.id]=t,t}}}function L1(){const o={};return{get:function(e){if(o[e.id]!==void 0)return o[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et,shadowCameraNear:1,shadowCameraFar:1e3};break}return o[e.id]=t,t}}}let D1=0;function U1(o,e){return(e.castShadow?2:0)-(o.castShadow?2:0)+(e.map?1:0)-(o.map?1:0)}function N1(o){const e=new I1,t=L1(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let p=0;p<9;p++)i.probe.push(new J);const r=new J,a=new xn,c=new xn;function h(p){let g=0,_=0,x=0;for(let H=0;H<9;H++)i.probe[H].set(0,0,0);let y=0,E=0,w=0,b=0,S=0,O=0,N=0,D=0,te=0,$=0,j=0;p.sort(U1);for(let H=0,z=p.length;H<z;H++){const re=p[H],De=re.color,Ae=re.intensity,He=re.distance,Ke=re.shadow&&re.shadow.map?re.shadow.map.texture:null;if(re.isAmbientLight)g+=De.r*Ae,_+=De.g*Ae,x+=De.b*Ae;else if(re.isLightProbe){for(let ke=0;ke<9;ke++)i.probe[ke].addScaledVector(re.sh.coefficients[ke],Ae);j++}else if(re.isDirectionalLight){const ke=e.get(re);if(ke.color.copy(re.color).multiplyScalar(re.intensity),re.castShadow){const st=re.shadow,Be=t.get(re);Be.shadowIntensity=st.intensity,Be.shadowBias=st.bias,Be.shadowNormalBias=st.normalBias,Be.shadowRadius=st.radius,Be.shadowMapSize=st.mapSize,i.directionalShadow[y]=Be,i.directionalShadowMap[y]=Ke,i.directionalShadowMatrix[y]=re.shadow.matrix,O++}i.directional[y]=ke,y++}else if(re.isSpotLight){const ke=e.get(re);ke.position.setFromMatrixPosition(re.matrixWorld),ke.color.copy(De).multiplyScalar(Ae),ke.distance=He,ke.coneCos=Math.cos(re.angle),ke.penumbraCos=Math.cos(re.angle*(1-re.penumbra)),ke.decay=re.decay,i.spot[w]=ke;const st=re.shadow;if(re.map&&(i.spotLightMap[te]=re.map,te++,st.updateMatrices(re),re.castShadow&&$++),i.spotLightMatrix[w]=st.matrix,re.castShadow){const Be=t.get(re);Be.shadowIntensity=st.intensity,Be.shadowBias=st.bias,Be.shadowNormalBias=st.normalBias,Be.shadowRadius=st.radius,Be.shadowMapSize=st.mapSize,i.spotShadow[w]=Be,i.spotShadowMap[w]=Ke,D++}w++}else if(re.isRectAreaLight){const ke=e.get(re);ke.color.copy(De).multiplyScalar(Ae),ke.halfWidth.set(re.width*.5,0,0),ke.halfHeight.set(0,re.height*.5,0),i.rectArea[b]=ke,b++}else if(re.isPointLight){const ke=e.get(re);if(ke.color.copy(re.color).multiplyScalar(re.intensity),ke.distance=re.distance,ke.decay=re.decay,re.castShadow){const st=re.shadow,Be=t.get(re);Be.shadowIntensity=st.intensity,Be.shadowBias=st.bias,Be.shadowNormalBias=st.normalBias,Be.shadowRadius=st.radius,Be.shadowMapSize=st.mapSize,Be.shadowCameraNear=st.camera.near,Be.shadowCameraFar=st.camera.far,i.pointShadow[E]=Be,i.pointShadowMap[E]=Ke,i.pointShadowMatrix[E]=re.shadow.matrix,N++}i.point[E]=ke,E++}else if(re.isHemisphereLight){const ke=e.get(re);ke.skyColor.copy(re.color).multiplyScalar(Ae),ke.groundColor.copy(re.groundColor).multiplyScalar(Ae),i.hemi[S]=ke,S++}}b>0&&(o.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=Pt.LTC_FLOAT_1,i.rectAreaLTC2=Pt.LTC_FLOAT_2):(i.rectAreaLTC1=Pt.LTC_HALF_1,i.rectAreaLTC2=Pt.LTC_HALF_2)),i.ambient[0]=g,i.ambient[1]=_,i.ambient[2]=x;const ne=i.hash;(ne.directionalLength!==y||ne.pointLength!==E||ne.spotLength!==w||ne.rectAreaLength!==b||ne.hemiLength!==S||ne.numDirectionalShadows!==O||ne.numPointShadows!==N||ne.numSpotShadows!==D||ne.numSpotMaps!==te||ne.numLightProbes!==j)&&(i.directional.length=y,i.spot.length=w,i.rectArea.length=b,i.point.length=E,i.hemi.length=S,i.directionalShadow.length=O,i.directionalShadowMap.length=O,i.pointShadow.length=N,i.pointShadowMap.length=N,i.spotShadow.length=D,i.spotShadowMap.length=D,i.directionalShadowMatrix.length=O,i.pointShadowMatrix.length=N,i.spotLightMatrix.length=D+te-$,i.spotLightMap.length=te,i.numSpotLightShadowsWithMaps=$,i.numLightProbes=j,ne.directionalLength=y,ne.pointLength=E,ne.spotLength=w,ne.rectAreaLength=b,ne.hemiLength=S,ne.numDirectionalShadows=O,ne.numPointShadows=N,ne.numSpotShadows=D,ne.numSpotMaps=te,ne.numLightProbes=j,i.version=D1++)}function f(p,g){let _=0,x=0,y=0,E=0,w=0;const b=g.matrixWorldInverse;for(let S=0,O=p.length;S<O;S++){const N=p[S];if(N.isDirectionalLight){const D=i.directional[_];D.direction.setFromMatrixPosition(N.matrixWorld),r.setFromMatrixPosition(N.target.matrixWorld),D.direction.sub(r),D.direction.transformDirection(b),_++}else if(N.isSpotLight){const D=i.spot[y];D.position.setFromMatrixPosition(N.matrixWorld),D.position.applyMatrix4(b),D.direction.setFromMatrixPosition(N.matrixWorld),r.setFromMatrixPosition(N.target.matrixWorld),D.direction.sub(r),D.direction.transformDirection(b),y++}else if(N.isRectAreaLight){const D=i.rectArea[E];D.position.setFromMatrixPosition(N.matrixWorld),D.position.applyMatrix4(b),c.identity(),a.copy(N.matrixWorld),a.premultiply(b),c.extractRotation(a),D.halfWidth.set(N.width*.5,0,0),D.halfHeight.set(0,N.height*.5,0),D.halfWidth.applyMatrix4(c),D.halfHeight.applyMatrix4(c),E++}else if(N.isPointLight){const D=i.point[x];D.position.setFromMatrixPosition(N.matrixWorld),D.position.applyMatrix4(b),x++}else if(N.isHemisphereLight){const D=i.hemi[w];D.direction.setFromMatrixPosition(N.matrixWorld),D.direction.transformDirection(b),w++}}}return{setup:h,setupView:f,state:i}}function N_(o){const e=new N1(o),t=[],i=[];function r(g){p.camera=g,t.length=0,i.length=0}function a(g){t.push(g)}function c(g){i.push(g)}function h(){e.setup(t)}function f(g){e.setupView(t,g)}const p={lightsArray:t,shadowsArray:i,camera:null,lights:e,transmissionRenderTarget:{}};return{init:r,state:p,setupLights:h,setupLightsView:f,pushLight:a,pushShadow:c}}function F1(o){let e=new WeakMap;function t(r,a=0){const c=e.get(r);let h;return c===void 0?(h=new N_(o),e.set(r,[h])):a>=c.length?(h=new N_(o),c.push(h)):h=c[a],h}function i(){e=new WeakMap}return{get:t,dispose:i}}const O1=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,B1=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function z1(o,e,t){let i=new Bc;const r=new et,a=new et,c=new $n,h=new wd({depthPacking:Vp}),f=new Cd,p={},g=t.maxTextureSize,_={[P]:I,[I]:P,[F]:F},x=new qr({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new et},radius:{value:4}},vertexShader:O1,fragmentShader:B1}),y=x.clone();y.defines.HORIZONTAL_PASS=1;const E=new In;E.setAttribute("position",new hi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const w=new Ii(E,x),b=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=T;let S=this.type;this.render=function($,j,ne){if(b.enabled===!1||b.autoUpdate===!1&&b.needsUpdate===!1||$.length===0)return;const H=o.getRenderTarget(),z=o.getActiveCubeFace(),re=o.getActiveMipmapLevel(),De=o.state;De.setBlending(W),De.buffers.color.setClear(1,1,1,1),De.buffers.depth.setTest(!0),De.setScissorTest(!1);const Ae=S!==C&&this.type===C,He=S===C&&this.type!==C;for(let Ke=0,ke=$.length;Ke<ke;Ke++){const st=$[Ke],Be=st.shadow;if(Be===void 0){console.warn("THREE.WebGLShadowMap:",st,"has no shadow.");continue}if(Be.autoUpdate===!1&&Be.needsUpdate===!1)continue;r.copy(Be.mapSize);const It=Be.getFrameExtents();if(r.multiply(It),a.copy(Be.mapSize),(r.x>g||r.y>g)&&(r.x>g&&(a.x=Math.floor(g/It.x),r.x=a.x*It.x,Be.mapSize.x=a.x),r.y>g&&(a.y=Math.floor(g/It.y),r.y=a.y*It.y,Be.mapSize.y=a.y)),Be.map===null||Ae===!0||He===!0){const en=this.type!==C?{minFilter:Nt,magFilter:Nt}:{};Be.map!==null&&Be.map.dispose(),Be.map=new Hr(r.x,r.y,en),Be.map.texture.name=st.name+".shadowMap",Be.camera.updateProjectionMatrix()}o.setRenderTarget(Be.map),o.clear();const Xt=Be.getViewportCount();for(let en=0;en<Xt;en++){const Pn=Be.getViewport(en);c.set(a.x*Pn.x,a.y*Pn.y,a.x*Pn.z,a.y*Pn.w),De.viewport(c),Be.updateMatrices(st,en),i=Be.getFrustum(),D(j,ne,Be.camera,st,this.type)}Be.isPointLightShadow!==!0&&this.type===C&&O(Be,ne),Be.needsUpdate=!1}S=this.type,b.needsUpdate=!1,o.setRenderTarget(H,z,re)};function O($,j){const ne=e.update(w);x.defines.VSM_SAMPLES!==$.blurSamples&&(x.defines.VSM_SAMPLES=$.blurSamples,y.defines.VSM_SAMPLES=$.blurSamples,x.needsUpdate=!0,y.needsUpdate=!0),$.mapPass===null&&($.mapPass=new Hr(r.x,r.y)),x.uniforms.shadow_pass.value=$.map.texture,x.uniforms.resolution.value=$.mapSize,x.uniforms.radius.value=$.radius,o.setRenderTarget($.mapPass),o.clear(),o.renderBufferDirect(j,null,ne,x,w,null),y.uniforms.shadow_pass.value=$.mapPass.texture,y.uniforms.resolution.value=$.mapSize,y.uniforms.radius.value=$.radius,o.setRenderTarget($.map),o.clear(),o.renderBufferDirect(j,null,ne,y,w,null)}function N($,j,ne,H){let z=null;const re=ne.isPointLight===!0?$.customDistanceMaterial:$.customDepthMaterial;if(re!==void 0)z=re;else if(z=ne.isPointLight===!0?f:h,o.localClippingEnabled&&j.clipShadows===!0&&Array.isArray(j.clippingPlanes)&&j.clippingPlanes.length!==0||j.displacementMap&&j.displacementScale!==0||j.alphaMap&&j.alphaTest>0||j.map&&j.alphaTest>0){const De=z.uuid,Ae=j.uuid;let He=p[De];He===void 0&&(He={},p[De]=He);let Ke=He[Ae];Ke===void 0&&(Ke=z.clone(),He[Ae]=Ke,j.addEventListener("dispose",te)),z=Ke}if(z.visible=j.visible,z.wireframe=j.wireframe,H===C?z.side=j.shadowSide!==null?j.shadowSide:j.side:z.side=j.shadowSide!==null?j.shadowSide:_[j.side],z.alphaMap=j.alphaMap,z.alphaTest=j.alphaTest,z.map=j.map,z.clipShadows=j.clipShadows,z.clippingPlanes=j.clippingPlanes,z.clipIntersection=j.clipIntersection,z.displacementMap=j.displacementMap,z.displacementScale=j.displacementScale,z.displacementBias=j.displacementBias,z.wireframeLinewidth=j.wireframeLinewidth,z.linewidth=j.linewidth,ne.isPointLight===!0&&z.isMeshDistanceMaterial===!0){const De=o.properties.get(z);De.light=ne}return z}function D($,j,ne,H,z){if($.visible===!1)return;if($.layers.test(j.layers)&&($.isMesh||$.isLine||$.isPoints)&&($.castShadow||$.receiveShadow&&z===C)&&(!$.frustumCulled||i.intersectsObject($))){$.modelViewMatrix.multiplyMatrices(ne.matrixWorldInverse,$.matrixWorld);const Ae=e.update($),He=$.material;if(Array.isArray(He)){const Ke=Ae.groups;for(let ke=0,st=Ke.length;ke<st;ke++){const Be=Ke[ke],It=He[Be.materialIndex];if(It&&It.visible){const Xt=N($,It,H,z);$.onBeforeShadow(o,$,j,ne,Ae,Xt,Be),o.renderBufferDirect(ne,null,Ae,Xt,$,Be),$.onAfterShadow(o,$,j,ne,Ae,Xt,Be)}}}else if(He.visible){const Ke=N($,He,H,z);$.onBeforeShadow(o,$,j,ne,Ae,Ke,null),o.renderBufferDirect(ne,null,Ae,Ke,$,null),$.onAfterShadow(o,$,j,ne,Ae,Ke,null)}}const De=$.children;for(let Ae=0,He=De.length;Ae<He;Ae++)D(De[Ae],j,ne,H,z)}function te($){$.target.removeEventListener("dispose",te);for(const ne in p){const H=p[ne],z=$.target.uuid;z in H&&(H[z].dispose(),delete H[z])}}}const V1={[Ge]:pt,[Kt]:Ue,[ye]:ot,[ce]:Ee,[pt]:Ge,[Ue]:Kt,[ot]:ye,[Ee]:ce};function k1(o,e){function t(){let pe=!1;const Ft=new $n;let Ve=null;const tt=new $n(0,0,0,0);return{setMask:function(Wt){Ve!==Wt&&!pe&&(o.colorMask(Wt,Wt,Wt,Wt),Ve=Wt)},setLocked:function(Wt){pe=Wt},setClear:function(Wt,Vt,Dn,Ti,Qi){Qi===!0&&(Wt*=Ti,Vt*=Ti,Dn*=Ti),Ft.set(Wt,Vt,Dn,Ti),tt.equals(Ft)===!1&&(o.clearColor(Wt,Vt,Dn,Ti),tt.copy(Ft))},reset:function(){pe=!1,Ve=null,tt.set(-1,0,0,0)}}}function i(){let pe=!1,Ft=!1,Ve=null,tt=null,Wt=null;return{setReversed:function(Vt){if(Ft!==Vt){const Dn=e.get("EXT_clip_control");Ft?Dn.clipControlEXT(Dn.LOWER_LEFT_EXT,Dn.ZERO_TO_ONE_EXT):Dn.clipControlEXT(Dn.LOWER_LEFT_EXT,Dn.NEGATIVE_ONE_TO_ONE_EXT);const Ti=Wt;Wt=null,this.setClear(Ti)}Ft=Vt},getReversed:function(){return Ft},setTest:function(Vt){Vt?Et(o.DEPTH_TEST):un(o.DEPTH_TEST)},setMask:function(Vt){Ve!==Vt&&!pe&&(o.depthMask(Vt),Ve=Vt)},setFunc:function(Vt){if(Ft&&(Vt=V1[Vt]),tt!==Vt){switch(Vt){case Ge:o.depthFunc(o.NEVER);break;case pt:o.depthFunc(o.ALWAYS);break;case Kt:o.depthFunc(o.LESS);break;case ce:o.depthFunc(o.LEQUAL);break;case ye:o.depthFunc(o.EQUAL);break;case Ee:o.depthFunc(o.GEQUAL);break;case Ue:o.depthFunc(o.GREATER);break;case ot:o.depthFunc(o.NOTEQUAL);break;default:o.depthFunc(o.LEQUAL)}tt=Vt}},setLocked:function(Vt){pe=Vt},setClear:function(Vt){Wt!==Vt&&(Ft&&(Vt=1-Vt),o.clearDepth(Vt),Wt=Vt)},reset:function(){pe=!1,Ve=null,tt=null,Wt=null,Ft=!1}}}function r(){let pe=!1,Ft=null,Ve=null,tt=null,Wt=null,Vt=null,Dn=null,Ti=null,Qi=null;return{setTest:function(li){pe||(li?Et(o.STENCIL_TEST):un(o.STENCIL_TEST))},setMask:function(li){Ft!==li&&!pe&&(o.stencilMask(li),Ft=li)},setFunc:function(li,Kr,As){(Ve!==li||tt!==Kr||Wt!==As)&&(o.stencilFunc(li,Kr,As),Ve=li,tt=Kr,Wt=As)},setOp:function(li,Kr,As){(Vt!==li||Dn!==Kr||Ti!==As)&&(o.stencilOp(li,Kr,As),Vt=li,Dn=Kr,Ti=As)},setLocked:function(li){pe=li},setClear:function(li){Qi!==li&&(o.clearStencil(li),Qi=li)},reset:function(){pe=!1,Ft=null,Ve=null,tt=null,Wt=null,Vt=null,Dn=null,Ti=null,Qi=null}}}const a=new t,c=new i,h=new r,f=new WeakMap,p=new WeakMap;let g={},_={},x=new WeakMap,y=[],E=null,w=!1,b=null,S=null,O=null,N=null,D=null,te=null,$=null,j=new Ht(0,0,0),ne=0,H=!1,z=null,re=null,De=null,Ae=null,He=null;const Ke=o.getParameter(o.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let ke=!1,st=0;const Be=o.getParameter(o.VERSION);Be.indexOf("WebGL")!==-1?(st=parseFloat(/^WebGL (\d)/.exec(Be)[1]),ke=st>=1):Be.indexOf("OpenGL ES")!==-1&&(st=parseFloat(/^OpenGL ES (\d)/.exec(Be)[1]),ke=st>=2);let It=null,Xt={};const en=o.getParameter(o.SCISSOR_BOX),Pn=o.getParameter(o.VIEWPORT),ri=new $n().fromArray(en),$e=new $n().fromArray(Pn);function vt(pe,Ft,Ve,tt){const Wt=new Uint8Array(4),Vt=o.createTexture();o.bindTexture(pe,Vt),o.texParameteri(pe,o.TEXTURE_MIN_FILTER,o.NEAREST),o.texParameteri(pe,o.TEXTURE_MAG_FILTER,o.NEAREST);for(let Dn=0;Dn<Ve;Dn++)pe===o.TEXTURE_3D||pe===o.TEXTURE_2D_ARRAY?o.texImage3D(Ft,0,o.RGBA,1,1,tt,0,o.RGBA,o.UNSIGNED_BYTE,Wt):o.texImage2D(Ft+Dn,0,o.RGBA,1,1,0,o.RGBA,o.UNSIGNED_BYTE,Wt);return Vt}const rn={};rn[o.TEXTURE_2D]=vt(o.TEXTURE_2D,o.TEXTURE_2D,1),rn[o.TEXTURE_CUBE_MAP]=vt(o.TEXTURE_CUBE_MAP,o.TEXTURE_CUBE_MAP_POSITIVE_X,6),rn[o.TEXTURE_2D_ARRAY]=vt(o.TEXTURE_2D_ARRAY,o.TEXTURE_2D_ARRAY,1,1),rn[o.TEXTURE_3D]=vt(o.TEXTURE_3D,o.TEXTURE_3D,1,1),a.setClear(0,0,0,1),c.setClear(1),h.setClear(0),Et(o.DEPTH_TEST),c.setFunc(ce),dt(!1),Zt(d),Et(o.CULL_FACE),Q(W);function Et(pe){g[pe]!==!0&&(o.enable(pe),g[pe]=!0)}function un(pe){g[pe]!==!1&&(o.disable(pe),g[pe]=!1)}function Tn(pe,Ft){return _[pe]!==Ft?(o.bindFramebuffer(pe,Ft),_[pe]=Ft,pe===o.DRAW_FRAMEBUFFER&&(_[o.FRAMEBUFFER]=Ft),pe===o.FRAMEBUFFER&&(_[o.DRAW_FRAMEBUFFER]=Ft),!0):!1}function yn(pe,Ft){let Ve=y,tt=!1;if(pe){Ve=x.get(Ft),Ve===void 0&&(Ve=[],x.set(Ft,Ve));const Wt=pe.textures;if(Ve.length!==Wt.length||Ve[0]!==o.COLOR_ATTACHMENT0){for(let Vt=0,Dn=Wt.length;Vt<Dn;Vt++)Ve[Vt]=o.COLOR_ATTACHMENT0+Vt;Ve.length=Wt.length,tt=!0}}else Ve[0]!==o.BACK&&(Ve[0]=o.BACK,tt=!0);tt&&o.drawBuffers(Ve)}function jn(pe){return E!==pe?(o.useProgram(pe),E=pe,!0):!1}const nt={[ee]:o.FUNC_ADD,[xe]:o.FUNC_SUBTRACT,[de]:o.FUNC_REVERSE_SUBTRACT};nt[le]=o.MIN,nt[ve]=o.MAX;const xt={[K]:o.ZERO,[q]:o.ONE,[he]:o.SRC_COLOR,[Ie]:o.SRC_ALPHA,[wt]:o.SRC_ALPHA_SATURATE,[rt]:o.DST_COLOR,[Qe]:o.DST_ALPHA,[Ne]:o.ONE_MINUS_SRC_COLOR,[Je]:o.ONE_MINUS_SRC_ALPHA,[Oe]:o.ONE_MINUS_DST_COLOR,[Ze]:o.ONE_MINUS_DST_ALPHA,[kt]:o.CONSTANT_COLOR,[an]:o.ONE_MINUS_CONSTANT_COLOR,[Cn]:o.CONSTANT_ALPHA,[ei]:o.ONE_MINUS_CONSTANT_ALPHA};function Q(pe,Ft,Ve,tt,Wt,Vt,Dn,Ti,Qi,li){if(pe===W){w===!0&&(un(o.BLEND),w=!1);return}if(w===!1&&(Et(o.BLEND),w=!0),pe!==se){if(pe!==b||li!==H){if((S!==ee||D!==ee)&&(o.blendEquation(o.FUNC_ADD),S=ee,D=ee),li)switch(pe){case Y:o.blendFuncSeparate(o.ONE,o.ONE_MINUS_SRC_ALPHA,o.ONE,o.ONE_MINUS_SRC_ALPHA);break;case U:o.blendFunc(o.ONE,o.ONE);break;case R:o.blendFuncSeparate(o.ZERO,o.ONE_MINUS_SRC_COLOR,o.ZERO,o.ONE);break;case oe:o.blendFuncSeparate(o.ZERO,o.SRC_COLOR,o.ZERO,o.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",pe);break}else switch(pe){case Y:o.blendFuncSeparate(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA,o.ONE,o.ONE_MINUS_SRC_ALPHA);break;case U:o.blendFunc(o.SRC_ALPHA,o.ONE);break;case R:o.blendFuncSeparate(o.ZERO,o.ONE_MINUS_SRC_COLOR,o.ZERO,o.ONE);break;case oe:o.blendFunc(o.ZERO,o.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",pe);break}O=null,N=null,te=null,$=null,j.set(0,0,0),ne=0,b=pe,H=li}return}Wt=Wt||Ft,Vt=Vt||Ve,Dn=Dn||tt,(Ft!==S||Wt!==D)&&(o.blendEquationSeparate(nt[Ft],nt[Wt]),S=Ft,D=Wt),(Ve!==O||tt!==N||Vt!==te||Dn!==$)&&(o.blendFuncSeparate(xt[Ve],xt[tt],xt[Vt],xt[Dn]),O=Ve,N=tt,te=Vt,$=Dn),(Ti.equals(j)===!1||Qi!==ne)&&(o.blendColor(Ti.r,Ti.g,Ti.b,Qi),j.copy(Ti),ne=Qi),b=pe,H=!1}function cn(pe,Ft){pe.side===F?un(o.CULL_FACE):Et(o.CULL_FACE);let Ve=pe.side===I;Ft&&(Ve=!Ve),dt(Ve),pe.blending===Y&&pe.transparent===!1?Q(W):Q(pe.blending,pe.blendEquation,pe.blendSrc,pe.blendDst,pe.blendEquationAlpha,pe.blendSrcAlpha,pe.blendDstAlpha,pe.blendColor,pe.blendAlpha,pe.premultipliedAlpha),c.setFunc(pe.depthFunc),c.setTest(pe.depthTest),c.setMask(pe.depthWrite),a.setMask(pe.colorWrite);const tt=pe.stencilWrite;h.setTest(tt),tt&&(h.setMask(pe.stencilWriteMask),h.setFunc(pe.stencilFunc,pe.stencilRef,pe.stencilFuncMask),h.setOp(pe.stencilFail,pe.stencilZFail,pe.stencilZPass)),vn(pe.polygonOffset,pe.polygonOffsetFactor,pe.polygonOffsetUnits),pe.alphaToCoverage===!0?Et(o.SAMPLE_ALPHA_TO_COVERAGE):un(o.SAMPLE_ALPHA_TO_COVERAGE)}function dt(pe){z!==pe&&(pe?o.frontFace(o.CW):o.frontFace(o.CCW),z=pe)}function Zt(pe){pe!==l?(Et(o.CULL_FACE),pe!==re&&(pe===d?o.cullFace(o.BACK):pe===m?o.cullFace(o.FRONT):o.cullFace(o.FRONT_AND_BACK))):un(o.CULL_FACE),re=pe}function Mt(pe){pe!==De&&(ke&&o.lineWidth(pe),De=pe)}function vn(pe,Ft,Ve){pe?(Et(o.POLYGON_OFFSET_FILL),(Ae!==Ft||He!==Ve)&&(o.polygonOffset(Ft,Ve),Ae=Ft,He=Ve)):un(o.POLYGON_OFFSET_FILL)}function Gt(pe){pe?Et(o.SCISSOR_TEST):un(o.SCISSOR_TEST)}function Z(pe){pe===void 0&&(pe=o.TEXTURE0+Ke-1),It!==pe&&(o.activeTexture(pe),It=pe)}function V(pe,Ft,Ve){Ve===void 0&&(It===null?Ve=o.TEXTURE0+Ke-1:Ve=It);let tt=Xt[Ve];tt===void 0&&(tt={type:void 0,texture:void 0},Xt[Ve]=tt),(tt.type!==pe||tt.texture!==Ft)&&(It!==Ve&&(o.activeTexture(Ve),It=Ve),o.bindTexture(pe,Ft||rn[pe]),tt.type=pe,tt.texture=Ft)}function Me(){const pe=Xt[It];pe!==void 0&&pe.type!==void 0&&(o.bindTexture(pe.type,null),pe.type=void 0,pe.texture=void 0)}function qe(){try{o.compressedTexImage2D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function at(){try{o.compressedTexImage3D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Ye(){try{o.texSubImage2D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function sn(){try{o.texSubImage3D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Ut(){try{o.compressedTexSubImage2D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Yt(){try{o.compressedTexSubImage3D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Vn(){try{o.texStorage2D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function mt(){try{o.texStorage3D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Jt(){try{o.texImage2D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function _n(){try{o.texImage3D.apply(o,arguments)}catch(pe){console.error("THREE.WebGLState:",pe)}}function Sn(pe){ri.equals(pe)===!1&&(o.scissor(pe.x,pe.y,pe.z,pe.w),ri.copy(pe))}function jt(pe){$e.equals(pe)===!1&&(o.viewport(pe.x,pe.y,pe.z,pe.w),$e.copy(pe))}function qn(pe,Ft){let Ve=p.get(Ft);Ve===void 0&&(Ve=new WeakMap,p.set(Ft,Ve));let tt=Ve.get(pe);tt===void 0&&(tt=o.getUniformBlockIndex(Ft,pe.name),Ve.set(pe,tt))}function Nn(pe,Ft){const tt=p.get(Ft).get(pe);f.get(Ft)!==tt&&(o.uniformBlockBinding(Ft,tt,pe.__bindingPointIndex),f.set(Ft,tt))}function mi(){o.disable(o.BLEND),o.disable(o.CULL_FACE),o.disable(o.DEPTH_TEST),o.disable(o.POLYGON_OFFSET_FILL),o.disable(o.SCISSOR_TEST),o.disable(o.STENCIL_TEST),o.disable(o.SAMPLE_ALPHA_TO_COVERAGE),o.blendEquation(o.FUNC_ADD),o.blendFunc(o.ONE,o.ZERO),o.blendFuncSeparate(o.ONE,o.ZERO,o.ONE,o.ZERO),o.blendColor(0,0,0,0),o.colorMask(!0,!0,!0,!0),o.clearColor(0,0,0,0),o.depthMask(!0),o.depthFunc(o.LESS),c.setReversed(!1),o.clearDepth(1),o.stencilMask(4294967295),o.stencilFunc(o.ALWAYS,0,4294967295),o.stencilOp(o.KEEP,o.KEEP,o.KEEP),o.clearStencil(0),o.cullFace(o.BACK),o.frontFace(o.CCW),o.polygonOffset(0,0),o.activeTexture(o.TEXTURE0),o.bindFramebuffer(o.FRAMEBUFFER,null),o.bindFramebuffer(o.DRAW_FRAMEBUFFER,null),o.bindFramebuffer(o.READ_FRAMEBUFFER,null),o.useProgram(null),o.lineWidth(1),o.scissor(0,0,o.canvas.width,o.canvas.height),o.viewport(0,0,o.canvas.width,o.canvas.height),g={},It=null,Xt={},_={},x=new WeakMap,y=[],E=null,w=!1,b=null,S=null,O=null,N=null,D=null,te=null,$=null,j=new Ht(0,0,0),ne=0,H=!1,z=null,re=null,De=null,Ae=null,He=null,ri.set(0,0,o.canvas.width,o.canvas.height),$e.set(0,0,o.canvas.width,o.canvas.height),a.reset(),c.reset(),h.reset()}return{buffers:{color:a,depth:c,stencil:h},enable:Et,disable:un,bindFramebuffer:Tn,drawBuffers:yn,useProgram:jn,setBlending:Q,setMaterial:cn,setFlipSided:dt,setCullFace:Zt,setLineWidth:Mt,setPolygonOffset:vn,setScissorTest:Gt,activeTexture:Z,bindTexture:V,unbindTexture:Me,compressedTexImage2D:qe,compressedTexImage3D:at,texImage2D:Jt,texImage3D:_n,updateUBOMapping:qn,uniformBlockBinding:Nn,texStorage2D:Vn,texStorage3D:mt,texSubImage2D:Ye,texSubImage3D:sn,compressedTexSubImage2D:Ut,compressedTexSubImage3D:Yt,scissor:Sn,viewport:jt,reset:mi}}function H1(o,e,t,i,r,a,c){const h=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,f=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),p=new et,g=new WeakMap;let _;const x=new WeakMap;let y=!1;try{y=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function E(Z,V){return y?new OffscreenCanvas(Z,V):Ac("canvas")}function w(Z,V,Me){let qe=1;const at=Gt(Z);if((at.width>Me||at.height>Me)&&(qe=Me/Math.max(at.width,at.height)),qe<1)if(typeof HTMLImageElement<"u"&&Z instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&Z instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&Z instanceof ImageBitmap||typeof VideoFrame<"u"&&Z instanceof VideoFrame){const Ye=Math.floor(qe*at.width),sn=Math.floor(qe*at.height);_===void 0&&(_=E(Ye,sn));const Ut=V?E(Ye,sn):_;return Ut.width=Ye,Ut.height=sn,Ut.getContext("2d").drawImage(Z,0,0,Ye,sn),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+at.width+"x"+at.height+") to ("+Ye+"x"+sn+")."),Ut}else return"data"in Z&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+at.width+"x"+at.height+")."),Z;return Z}function b(Z){return Z.generateMipmaps}function S(Z){o.generateMipmap(Z)}function O(Z){return Z.isWebGLCubeRenderTarget?o.TEXTURE_CUBE_MAP:Z.isWebGL3DRenderTarget?o.TEXTURE_3D:Z.isWebGLArrayRenderTarget||Z.isCompressedArrayTexture?o.TEXTURE_2D_ARRAY:o.TEXTURE_2D}function N(Z,V,Me,qe,at=!1){if(Z!==null){if(o[Z]!==void 0)return o[Z];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+Z+"'")}let Ye=V;if(V===o.RED&&(Me===o.FLOAT&&(Ye=o.R32F),Me===o.HALF_FLOAT&&(Ye=o.R16F),Me===o.UNSIGNED_BYTE&&(Ye=o.R8)),V===o.RED_INTEGER&&(Me===o.UNSIGNED_BYTE&&(Ye=o.R8UI),Me===o.UNSIGNED_SHORT&&(Ye=o.R16UI),Me===o.UNSIGNED_INT&&(Ye=o.R32UI),Me===o.BYTE&&(Ye=o.R8I),Me===o.SHORT&&(Ye=o.R16I),Me===o.INT&&(Ye=o.R32I)),V===o.RG&&(Me===o.FLOAT&&(Ye=o.RG32F),Me===o.HALF_FLOAT&&(Ye=o.RG16F),Me===o.UNSIGNED_BYTE&&(Ye=o.RG8)),V===o.RG_INTEGER&&(Me===o.UNSIGNED_BYTE&&(Ye=o.RG8UI),Me===o.UNSIGNED_SHORT&&(Ye=o.RG16UI),Me===o.UNSIGNED_INT&&(Ye=o.RG32UI),Me===o.BYTE&&(Ye=o.RG8I),Me===o.SHORT&&(Ye=o.RG16I),Me===o.INT&&(Ye=o.RG32I)),V===o.RGB_INTEGER&&(Me===o.UNSIGNED_BYTE&&(Ye=o.RGB8UI),Me===o.UNSIGNED_SHORT&&(Ye=o.RGB16UI),Me===o.UNSIGNED_INT&&(Ye=o.RGB32UI),Me===o.BYTE&&(Ye=o.RGB8I),Me===o.SHORT&&(Ye=o.RGB16I),Me===o.INT&&(Ye=o.RGB32I)),V===o.RGBA_INTEGER&&(Me===o.UNSIGNED_BYTE&&(Ye=o.RGBA8UI),Me===o.UNSIGNED_SHORT&&(Ye=o.RGBA16UI),Me===o.UNSIGNED_INT&&(Ye=o.RGBA32UI),Me===o.BYTE&&(Ye=o.RGBA8I),Me===o.SHORT&&(Ye=o.RGBA16I),Me===o.INT&&(Ye=o.RGBA32I)),V===o.RGB&&Me===o.UNSIGNED_INT_5_9_9_9_REV&&(Ye=o.RGB9_E5),V===o.RGBA){const sn=at?Sc:Xn.getTransfer(qe);Me===o.FLOAT&&(Ye=o.RGBA32F),Me===o.HALF_FLOAT&&(Ye=o.RGBA16F),Me===o.UNSIGNED_BYTE&&(Ye=sn===ci?o.SRGB8_ALPHA8:o.RGBA8),Me===o.UNSIGNED_SHORT_4_4_4_4&&(Ye=o.RGBA4),Me===o.UNSIGNED_SHORT_5_5_5_1&&(Ye=o.RGB5_A1)}return(Ye===o.R16F||Ye===o.R32F||Ye===o.RG16F||Ye===o.RG32F||Ye===o.RGBA16F||Ye===o.RGBA32F)&&e.get("EXT_color_buffer_float"),Ye}function D(Z,V){let Me;return Z?V===null||V===wi||V===zr?Me=o.DEPTH24_STENCIL8:V===_i?Me=o.DEPTH32F_STENCIL8:V===vi&&(Me=o.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):V===null||V===wi||V===zr?Me=o.DEPTH_COMPONENT24:V===_i?Me=o.DEPTH_COMPONENT32F:V===vi&&(Me=o.DEPTH_COMPONENT16),Me}function te(Z,V){return b(Z)===!0||Z.isFramebufferTexture&&Z.minFilter!==Nt&&Z.minFilter!==ae?Math.log2(Math.max(V.width,V.height))+1:Z.mipmaps!==void 0&&Z.mipmaps.length>0?Z.mipmaps.length:Z.isCompressedTexture&&Array.isArray(Z.image)?V.mipmaps.length:1}function $(Z){const V=Z.target;V.removeEventListener("dispose",$),ne(V),V.isVideoTexture&&g.delete(V)}function j(Z){const V=Z.target;V.removeEventListener("dispose",j),z(V)}function ne(Z){const V=i.get(Z);if(V.__webglInit===void 0)return;const Me=Z.source,qe=x.get(Me);if(qe){const at=qe[V.__cacheKey];at.usedTimes--,at.usedTimes===0&&H(Z),Object.keys(qe).length===0&&x.delete(Me)}i.remove(Z)}function H(Z){const V=i.get(Z);o.deleteTexture(V.__webglTexture);const Me=Z.source,qe=x.get(Me);delete qe[V.__cacheKey],c.memory.textures--}function z(Z){const V=i.get(Z);if(Z.depthTexture&&(Z.depthTexture.dispose(),i.remove(Z.depthTexture)),Z.isWebGLCubeRenderTarget)for(let qe=0;qe<6;qe++){if(Array.isArray(V.__webglFramebuffer[qe]))for(let at=0;at<V.__webglFramebuffer[qe].length;at++)o.deleteFramebuffer(V.__webglFramebuffer[qe][at]);else o.deleteFramebuffer(V.__webglFramebuffer[qe]);V.__webglDepthbuffer&&o.deleteRenderbuffer(V.__webglDepthbuffer[qe])}else{if(Array.isArray(V.__webglFramebuffer))for(let qe=0;qe<V.__webglFramebuffer.length;qe++)o.deleteFramebuffer(V.__webglFramebuffer[qe]);else o.deleteFramebuffer(V.__webglFramebuffer);if(V.__webglDepthbuffer&&o.deleteRenderbuffer(V.__webglDepthbuffer),V.__webglMultisampledFramebuffer&&o.deleteFramebuffer(V.__webglMultisampledFramebuffer),V.__webglColorRenderbuffer)for(let qe=0;qe<V.__webglColorRenderbuffer.length;qe++)V.__webglColorRenderbuffer[qe]&&o.deleteRenderbuffer(V.__webglColorRenderbuffer[qe]);V.__webglDepthRenderbuffer&&o.deleteRenderbuffer(V.__webglDepthRenderbuffer)}const Me=Z.textures;for(let qe=0,at=Me.length;qe<at;qe++){const Ye=i.get(Me[qe]);Ye.__webglTexture&&(o.deleteTexture(Ye.__webglTexture),c.memory.textures--),i.remove(Me[qe])}i.remove(Z)}let re=0;function De(){re=0}function Ae(){const Z=re;return Z>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+Z+" texture units while this GPU supports only "+r.maxTextures),re+=1,Z}function He(Z){const V=[];return V.push(Z.wrapS),V.push(Z.wrapT),V.push(Z.wrapR||0),V.push(Z.magFilter),V.push(Z.minFilter),V.push(Z.anisotropy),V.push(Z.internalFormat),V.push(Z.format),V.push(Z.type),V.push(Z.generateMipmaps),V.push(Z.premultiplyAlpha),V.push(Z.flipY),V.push(Z.unpackAlignment),V.push(Z.colorSpace),V.join()}function Ke(Z,V){const Me=i.get(Z);if(Z.isVideoTexture&&Mt(Z),Z.isRenderTargetTexture===!1&&Z.version>0&&Me.__version!==Z.version){const qe=Z.image;if(qe===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(qe.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{$e(Me,Z,V);return}}t.bindTexture(o.TEXTURE_2D,Me.__webglTexture,o.TEXTURE0+V)}function ke(Z,V){const Me=i.get(Z);if(Z.version>0&&Me.__version!==Z.version){$e(Me,Z,V);return}t.bindTexture(o.TEXTURE_2D_ARRAY,Me.__webglTexture,o.TEXTURE0+V)}function st(Z,V){const Me=i.get(Z);if(Z.version>0&&Me.__version!==Z.version){$e(Me,Z,V);return}t.bindTexture(o.TEXTURE_3D,Me.__webglTexture,o.TEXTURE0+V)}function Be(Z,V){const Me=i.get(Z);if(Z.version>0&&Me.__version!==Z.version){vt(Me,Z,V);return}t.bindTexture(o.TEXTURE_CUBE_MAP,Me.__webglTexture,o.TEXTURE0+V)}const It={[ze]:o.REPEAT,[it]:o.CLAMP_TO_EDGE,[Ct]:o.MIRRORED_REPEAT},Xt={[Nt]:o.NEAREST,[Rt]:o.NEAREST_MIPMAP_NEAREST,[pn]:o.NEAREST_MIPMAP_LINEAR,[ae]:o.LINEAR,[_t]:o.LINEAR_MIPMAP_NEAREST,[Xe]:o.LINEAR_MIPMAP_LINEAR},en={[Hp]:o.NEVER,[Zp]:o.ALWAYS,[Gp]:o.LESS,[Pu]:o.LEQUAL,[Wp]:o.EQUAL,[Yp]:o.GEQUAL,[Xp]:o.GREATER,[qp]:o.NOTEQUAL};function Pn(Z,V){if(V.type===_i&&e.has("OES_texture_float_linear")===!1&&(V.magFilter===ae||V.magFilter===_t||V.magFilter===pn||V.magFilter===Xe||V.minFilter===ae||V.minFilter===_t||V.minFilter===pn||V.minFilter===Xe)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),o.texParameteri(Z,o.TEXTURE_WRAP_S,It[V.wrapS]),o.texParameteri(Z,o.TEXTURE_WRAP_T,It[V.wrapT]),(Z===o.TEXTURE_3D||Z===o.TEXTURE_2D_ARRAY)&&o.texParameteri(Z,o.TEXTURE_WRAP_R,It[V.wrapR]),o.texParameteri(Z,o.TEXTURE_MAG_FILTER,Xt[V.magFilter]),o.texParameteri(Z,o.TEXTURE_MIN_FILTER,Xt[V.minFilter]),V.compareFunction&&(o.texParameteri(Z,o.TEXTURE_COMPARE_MODE,o.COMPARE_REF_TO_TEXTURE),o.texParameteri(Z,o.TEXTURE_COMPARE_FUNC,en[V.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(V.magFilter===Nt||V.minFilter!==pn&&V.minFilter!==Xe||V.type===_i&&e.has("OES_texture_float_linear")===!1)return;if(V.anisotropy>1||i.get(V).__currentAnisotropy){const Me=e.get("EXT_texture_filter_anisotropic");o.texParameterf(Z,Me.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(V.anisotropy,r.getMaxAnisotropy())),i.get(V).__currentAnisotropy=V.anisotropy}}}function ri(Z,V){let Me=!1;Z.__webglInit===void 0&&(Z.__webglInit=!0,V.addEventListener("dispose",$));const qe=V.source;let at=x.get(qe);at===void 0&&(at={},x.set(qe,at));const Ye=He(V);if(Ye!==Z.__cacheKey){at[Ye]===void 0&&(at[Ye]={texture:o.createTexture(),usedTimes:0},c.memory.textures++,Me=!0),at[Ye].usedTimes++;const sn=at[Z.__cacheKey];sn!==void 0&&(at[Z.__cacheKey].usedTimes--,sn.usedTimes===0&&H(V)),Z.__cacheKey=Ye,Z.__webglTexture=at[Ye].texture}return Me}function $e(Z,V,Me){let qe=o.TEXTURE_2D;(V.isDataArrayTexture||V.isCompressedArrayTexture)&&(qe=o.TEXTURE_2D_ARRAY),V.isData3DTexture&&(qe=o.TEXTURE_3D);const at=ri(Z,V),Ye=V.source;t.bindTexture(qe,Z.__webglTexture,o.TEXTURE0+Me);const sn=i.get(Ye);if(Ye.version!==sn.__version||at===!0){t.activeTexture(o.TEXTURE0+Me);const Ut=Xn.getPrimaries(Xn.workingColorSpace),Yt=V.colorSpace===ms?null:Xn.getPrimaries(V.colorSpace),Vn=V.colorSpace===ms||Ut===Yt?o.NONE:o.BROWSER_DEFAULT_WEBGL;o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,V.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,V.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,V.unpackAlignment),o.pixelStorei(o.UNPACK_COLORSPACE_CONVERSION_WEBGL,Vn);let mt=w(V.image,!1,r.maxTextureSize);mt=vn(V,mt);const Jt=a.convert(V.format,V.colorSpace),_n=a.convert(V.type);let Sn=N(V.internalFormat,Jt,_n,V.colorSpace,V.isVideoTexture);Pn(qe,V);let jt;const qn=V.mipmaps,Nn=V.isVideoTexture!==!0,mi=sn.__version===void 0||at===!0,pe=Ye.dataReady,Ft=te(V,mt);if(V.isDepthTexture)Sn=D(V.format===ps,V.type),mi&&(Nn?t.texStorage2D(o.TEXTURE_2D,1,Sn,mt.width,mt.height):t.texImage2D(o.TEXTURE_2D,0,Sn,mt.width,mt.height,0,Jt,_n,null));else if(V.isDataTexture)if(qn.length>0){Nn&&mi&&t.texStorage2D(o.TEXTURE_2D,Ft,Sn,qn[0].width,qn[0].height);for(let Ve=0,tt=qn.length;Ve<tt;Ve++)jt=qn[Ve],Nn?pe&&t.texSubImage2D(o.TEXTURE_2D,Ve,0,0,jt.width,jt.height,Jt,_n,jt.data):t.texImage2D(o.TEXTURE_2D,Ve,Sn,jt.width,jt.height,0,Jt,_n,jt.data);V.generateMipmaps=!1}else Nn?(mi&&t.texStorage2D(o.TEXTURE_2D,Ft,Sn,mt.width,mt.height),pe&&t.texSubImage2D(o.TEXTURE_2D,0,0,0,mt.width,mt.height,Jt,_n,mt.data)):t.texImage2D(o.TEXTURE_2D,0,Sn,mt.width,mt.height,0,Jt,_n,mt.data);else if(V.isCompressedTexture)if(V.isCompressedArrayTexture){Nn&&mi&&t.texStorage3D(o.TEXTURE_2D_ARRAY,Ft,Sn,qn[0].width,qn[0].height,mt.depth);for(let Ve=0,tt=qn.length;Ve<tt;Ve++)if(jt=qn[Ve],V.format!==zi)if(Jt!==null)if(Nn){if(pe)if(V.layerUpdates.size>0){const Wt=qd(jt.width,jt.height,V.format,V.type);for(const Vt of V.layerUpdates){const Dn=jt.data.subarray(Vt*Wt/jt.data.BYTES_PER_ELEMENT,(Vt+1)*Wt/jt.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(o.TEXTURE_2D_ARRAY,Ve,0,0,Vt,jt.width,jt.height,1,Jt,Dn)}V.clearLayerUpdates()}else t.compressedTexSubImage3D(o.TEXTURE_2D_ARRAY,Ve,0,0,0,jt.width,jt.height,mt.depth,Jt,jt.data)}else t.compressedTexImage3D(o.TEXTURE_2D_ARRAY,Ve,Sn,jt.width,jt.height,mt.depth,0,jt.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else Nn?pe&&t.texSubImage3D(o.TEXTURE_2D_ARRAY,Ve,0,0,0,jt.width,jt.height,mt.depth,Jt,_n,jt.data):t.texImage3D(o.TEXTURE_2D_ARRAY,Ve,Sn,jt.width,jt.height,mt.depth,0,Jt,_n,jt.data)}else{Nn&&mi&&t.texStorage2D(o.TEXTURE_2D,Ft,Sn,qn[0].width,qn[0].height);for(let Ve=0,tt=qn.length;Ve<tt;Ve++)jt=qn[Ve],V.format!==zi?Jt!==null?Nn?pe&&t.compressedTexSubImage2D(o.TEXTURE_2D,Ve,0,0,jt.width,jt.height,Jt,jt.data):t.compressedTexImage2D(o.TEXTURE_2D,Ve,Sn,jt.width,jt.height,0,jt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Nn?pe&&t.texSubImage2D(o.TEXTURE_2D,Ve,0,0,jt.width,jt.height,Jt,_n,jt.data):t.texImage2D(o.TEXTURE_2D,Ve,Sn,jt.width,jt.height,0,Jt,_n,jt.data)}else if(V.isDataArrayTexture)if(Nn){if(mi&&t.texStorage3D(o.TEXTURE_2D_ARRAY,Ft,Sn,mt.width,mt.height,mt.depth),pe)if(V.layerUpdates.size>0){const Ve=qd(mt.width,mt.height,V.format,V.type);for(const tt of V.layerUpdates){const Wt=mt.data.subarray(tt*Ve/mt.data.BYTES_PER_ELEMENT,(tt+1)*Ve/mt.data.BYTES_PER_ELEMENT);t.texSubImage3D(o.TEXTURE_2D_ARRAY,0,0,0,tt,mt.width,mt.height,1,Jt,_n,Wt)}V.clearLayerUpdates()}else t.texSubImage3D(o.TEXTURE_2D_ARRAY,0,0,0,0,mt.width,mt.height,mt.depth,Jt,_n,mt.data)}else t.texImage3D(o.TEXTURE_2D_ARRAY,0,Sn,mt.width,mt.height,mt.depth,0,Jt,_n,mt.data);else if(V.isData3DTexture)Nn?(mi&&t.texStorage3D(o.TEXTURE_3D,Ft,Sn,mt.width,mt.height,mt.depth),pe&&t.texSubImage3D(o.TEXTURE_3D,0,0,0,0,mt.width,mt.height,mt.depth,Jt,_n,mt.data)):t.texImage3D(o.TEXTURE_3D,0,Sn,mt.width,mt.height,mt.depth,0,Jt,_n,mt.data);else if(V.isFramebufferTexture){if(mi)if(Nn)t.texStorage2D(o.TEXTURE_2D,Ft,Sn,mt.width,mt.height);else{let Ve=mt.width,tt=mt.height;for(let Wt=0;Wt<Ft;Wt++)t.texImage2D(o.TEXTURE_2D,Wt,Sn,Ve,tt,0,Jt,_n,null),Ve>>=1,tt>>=1}}else if(qn.length>0){if(Nn&&mi){const Ve=Gt(qn[0]);t.texStorage2D(o.TEXTURE_2D,Ft,Sn,Ve.width,Ve.height)}for(let Ve=0,tt=qn.length;Ve<tt;Ve++)jt=qn[Ve],Nn?pe&&t.texSubImage2D(o.TEXTURE_2D,Ve,0,0,Jt,_n,jt):t.texImage2D(o.TEXTURE_2D,Ve,Sn,Jt,_n,jt);V.generateMipmaps=!1}else if(Nn){if(mi){const Ve=Gt(mt);t.texStorage2D(o.TEXTURE_2D,Ft,Sn,Ve.width,Ve.height)}pe&&t.texSubImage2D(o.TEXTURE_2D,0,0,0,Jt,_n,mt)}else t.texImage2D(o.TEXTURE_2D,0,Sn,Jt,_n,mt);b(V)&&S(qe),sn.__version=Ye.version,V.onUpdate&&V.onUpdate(V)}Z.__version=V.version}function vt(Z,V,Me){if(V.image.length!==6)return;const qe=ri(Z,V),at=V.source;t.bindTexture(o.TEXTURE_CUBE_MAP,Z.__webglTexture,o.TEXTURE0+Me);const Ye=i.get(at);if(at.version!==Ye.__version||qe===!0){t.activeTexture(o.TEXTURE0+Me);const sn=Xn.getPrimaries(Xn.workingColorSpace),Ut=V.colorSpace===ms?null:Xn.getPrimaries(V.colorSpace),Yt=V.colorSpace===ms||sn===Ut?o.NONE:o.BROWSER_DEFAULT_WEBGL;o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,V.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,V.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,V.unpackAlignment),o.pixelStorei(o.UNPACK_COLORSPACE_CONVERSION_WEBGL,Yt);const Vn=V.isCompressedTexture||V.image[0].isCompressedTexture,mt=V.image[0]&&V.image[0].isDataTexture,Jt=[];for(let tt=0;tt<6;tt++)!Vn&&!mt?Jt[tt]=w(V.image[tt],!0,r.maxCubemapSize):Jt[tt]=mt?V.image[tt].image:V.image[tt],Jt[tt]=vn(V,Jt[tt]);const _n=Jt[0],Sn=a.convert(V.format,V.colorSpace),jt=a.convert(V.type),qn=N(V.internalFormat,Sn,jt,V.colorSpace),Nn=V.isVideoTexture!==!0,mi=Ye.__version===void 0||qe===!0,pe=at.dataReady;let Ft=te(V,_n);Pn(o.TEXTURE_CUBE_MAP,V);let Ve;if(Vn){Nn&&mi&&t.texStorage2D(o.TEXTURE_CUBE_MAP,Ft,qn,_n.width,_n.height);for(let tt=0;tt<6;tt++){Ve=Jt[tt].mipmaps;for(let Wt=0;Wt<Ve.length;Wt++){const Vt=Ve[Wt];V.format!==zi?Sn!==null?Nn?pe&&t.compressedTexSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt,0,0,Vt.width,Vt.height,Sn,Vt.data):t.compressedTexImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt,qn,Vt.width,Vt.height,0,Vt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Nn?pe&&t.texSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt,0,0,Vt.width,Vt.height,Sn,jt,Vt.data):t.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt,qn,Vt.width,Vt.height,0,Sn,jt,Vt.data)}}}else{if(Ve=V.mipmaps,Nn&&mi){Ve.length>0&&Ft++;const tt=Gt(Jt[0]);t.texStorage2D(o.TEXTURE_CUBE_MAP,Ft,qn,tt.width,tt.height)}for(let tt=0;tt<6;tt++)if(mt){Nn?pe&&t.texSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,0,0,0,Jt[tt].width,Jt[tt].height,Sn,jt,Jt[tt].data):t.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,0,qn,Jt[tt].width,Jt[tt].height,0,Sn,jt,Jt[tt].data);for(let Wt=0;Wt<Ve.length;Wt++){const Dn=Ve[Wt].image[tt].image;Nn?pe&&t.texSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt+1,0,0,Dn.width,Dn.height,Sn,jt,Dn.data):t.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt+1,qn,Dn.width,Dn.height,0,Sn,jt,Dn.data)}}else{Nn?pe&&t.texSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,0,0,0,Sn,jt,Jt[tt]):t.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,0,qn,Sn,jt,Jt[tt]);for(let Wt=0;Wt<Ve.length;Wt++){const Vt=Ve[Wt];Nn?pe&&t.texSubImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt+1,0,0,Sn,jt,Vt.image[tt]):t.texImage2D(o.TEXTURE_CUBE_MAP_POSITIVE_X+tt,Wt+1,qn,Sn,jt,Vt.image[tt])}}}b(V)&&S(o.TEXTURE_CUBE_MAP),Ye.__version=at.version,V.onUpdate&&V.onUpdate(V)}Z.__version=V.version}function rn(Z,V,Me,qe,at,Ye){const sn=a.convert(Me.format,Me.colorSpace),Ut=a.convert(Me.type),Yt=N(Me.internalFormat,sn,Ut,Me.colorSpace),Vn=i.get(V),mt=i.get(Me);if(mt.__renderTarget=V,!Vn.__hasExternalTextures){const Jt=Math.max(1,V.width>>Ye),_n=Math.max(1,V.height>>Ye);at===o.TEXTURE_3D||at===o.TEXTURE_2D_ARRAY?t.texImage3D(at,Ye,Yt,Jt,_n,V.depth,0,sn,Ut,null):t.texImage2D(at,Ye,Yt,Jt,_n,0,sn,Ut,null)}t.bindFramebuffer(o.FRAMEBUFFER,Z),Zt(V)?h.framebufferTexture2DMultisampleEXT(o.FRAMEBUFFER,qe,at,mt.__webglTexture,0,dt(V)):(at===o.TEXTURE_2D||at>=o.TEXTURE_CUBE_MAP_POSITIVE_X&&at<=o.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&o.framebufferTexture2D(o.FRAMEBUFFER,qe,at,mt.__webglTexture,Ye),t.bindFramebuffer(o.FRAMEBUFFER,null)}function Et(Z,V,Me){if(o.bindRenderbuffer(o.RENDERBUFFER,Z),V.depthBuffer){const qe=V.depthTexture,at=qe&&qe.isDepthTexture?qe.type:null,Ye=D(V.stencilBuffer,at),sn=V.stencilBuffer?o.DEPTH_STENCIL_ATTACHMENT:o.DEPTH_ATTACHMENT,Ut=dt(V);Zt(V)?h.renderbufferStorageMultisampleEXT(o.RENDERBUFFER,Ut,Ye,V.width,V.height):Me?o.renderbufferStorageMultisample(o.RENDERBUFFER,Ut,Ye,V.width,V.height):o.renderbufferStorage(o.RENDERBUFFER,Ye,V.width,V.height),o.framebufferRenderbuffer(o.FRAMEBUFFER,sn,o.RENDERBUFFER,Z)}else{const qe=V.textures;for(let at=0;at<qe.length;at++){const Ye=qe[at],sn=a.convert(Ye.format,Ye.colorSpace),Ut=a.convert(Ye.type),Yt=N(Ye.internalFormat,sn,Ut,Ye.colorSpace),Vn=dt(V);Me&&Zt(V)===!1?o.renderbufferStorageMultisample(o.RENDERBUFFER,Vn,Yt,V.width,V.height):Zt(V)?h.renderbufferStorageMultisampleEXT(o.RENDERBUFFER,Vn,Yt,V.width,V.height):o.renderbufferStorage(o.RENDERBUFFER,Yt,V.width,V.height)}}o.bindRenderbuffer(o.RENDERBUFFER,null)}function un(Z,V){if(V&&V.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(o.FRAMEBUFFER,Z),!(V.depthTexture&&V.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const qe=i.get(V.depthTexture);qe.__renderTarget=V,(!qe.__webglTexture||V.depthTexture.image.width!==V.width||V.depthTexture.image.height!==V.height)&&(V.depthTexture.image.width=V.width,V.depthTexture.image.height=V.height,V.depthTexture.needsUpdate=!0),Ke(V.depthTexture,0);const at=qe.__webglTexture,Ye=dt(V);if(V.depthTexture.format===rs)Zt(V)?h.framebufferTexture2DMultisampleEXT(o.FRAMEBUFFER,o.DEPTH_ATTACHMENT,o.TEXTURE_2D,at,0,Ye):o.framebufferTexture2D(o.FRAMEBUFFER,o.DEPTH_ATTACHMENT,o.TEXTURE_2D,at,0);else if(V.depthTexture.format===ps)Zt(V)?h.framebufferTexture2DMultisampleEXT(o.FRAMEBUFFER,o.DEPTH_STENCIL_ATTACHMENT,o.TEXTURE_2D,at,0,Ye):o.framebufferTexture2D(o.FRAMEBUFFER,o.DEPTH_STENCIL_ATTACHMENT,o.TEXTURE_2D,at,0);else throw new Error("Unknown depthTexture format")}function Tn(Z){const V=i.get(Z),Me=Z.isWebGLCubeRenderTarget===!0;if(V.__boundDepthTexture!==Z.depthTexture){const qe=Z.depthTexture;if(V.__depthDisposeCallback&&V.__depthDisposeCallback(),qe){const at=()=>{delete V.__boundDepthTexture,delete V.__depthDisposeCallback,qe.removeEventListener("dispose",at)};qe.addEventListener("dispose",at),V.__depthDisposeCallback=at}V.__boundDepthTexture=qe}if(Z.depthTexture&&!V.__autoAllocateDepthBuffer){if(Me)throw new Error("target.depthTexture not supported in Cube render targets");un(V.__webglFramebuffer,Z)}else if(Me){V.__webglDepthbuffer=[];for(let qe=0;qe<6;qe++)if(t.bindFramebuffer(o.FRAMEBUFFER,V.__webglFramebuffer[qe]),V.__webglDepthbuffer[qe]===void 0)V.__webglDepthbuffer[qe]=o.createRenderbuffer(),Et(V.__webglDepthbuffer[qe],Z,!1);else{const at=Z.stencilBuffer?o.DEPTH_STENCIL_ATTACHMENT:o.DEPTH_ATTACHMENT,Ye=V.__webglDepthbuffer[qe];o.bindRenderbuffer(o.RENDERBUFFER,Ye),o.framebufferRenderbuffer(o.FRAMEBUFFER,at,o.RENDERBUFFER,Ye)}}else if(t.bindFramebuffer(o.FRAMEBUFFER,V.__webglFramebuffer),V.__webglDepthbuffer===void 0)V.__webglDepthbuffer=o.createRenderbuffer(),Et(V.__webglDepthbuffer,Z,!1);else{const qe=Z.stencilBuffer?o.DEPTH_STENCIL_ATTACHMENT:o.DEPTH_ATTACHMENT,at=V.__webglDepthbuffer;o.bindRenderbuffer(o.RENDERBUFFER,at),o.framebufferRenderbuffer(o.FRAMEBUFFER,qe,o.RENDERBUFFER,at)}t.bindFramebuffer(o.FRAMEBUFFER,null)}function yn(Z,V,Me){const qe=i.get(Z);V!==void 0&&rn(qe.__webglFramebuffer,Z,Z.texture,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,0),Me!==void 0&&Tn(Z)}function jn(Z){const V=Z.texture,Me=i.get(Z),qe=i.get(V);Z.addEventListener("dispose",j);const at=Z.textures,Ye=Z.isWebGLCubeRenderTarget===!0,sn=at.length>1;if(sn||(qe.__webglTexture===void 0&&(qe.__webglTexture=o.createTexture()),qe.__version=V.version,c.memory.textures++),Ye){Me.__webglFramebuffer=[];for(let Ut=0;Ut<6;Ut++)if(V.mipmaps&&V.mipmaps.length>0){Me.__webglFramebuffer[Ut]=[];for(let Yt=0;Yt<V.mipmaps.length;Yt++)Me.__webglFramebuffer[Ut][Yt]=o.createFramebuffer()}else Me.__webglFramebuffer[Ut]=o.createFramebuffer()}else{if(V.mipmaps&&V.mipmaps.length>0){Me.__webglFramebuffer=[];for(let Ut=0;Ut<V.mipmaps.length;Ut++)Me.__webglFramebuffer[Ut]=o.createFramebuffer()}else Me.__webglFramebuffer=o.createFramebuffer();if(sn)for(let Ut=0,Yt=at.length;Ut<Yt;Ut++){const Vn=i.get(at[Ut]);Vn.__webglTexture===void 0&&(Vn.__webglTexture=o.createTexture(),c.memory.textures++)}if(Z.samples>0&&Zt(Z)===!1){Me.__webglMultisampledFramebuffer=o.createFramebuffer(),Me.__webglColorRenderbuffer=[],t.bindFramebuffer(o.FRAMEBUFFER,Me.__webglMultisampledFramebuffer);for(let Ut=0;Ut<at.length;Ut++){const Yt=at[Ut];Me.__webglColorRenderbuffer[Ut]=o.createRenderbuffer(),o.bindRenderbuffer(o.RENDERBUFFER,Me.__webglColorRenderbuffer[Ut]);const Vn=a.convert(Yt.format,Yt.colorSpace),mt=a.convert(Yt.type),Jt=N(Yt.internalFormat,Vn,mt,Yt.colorSpace,Z.isXRRenderTarget===!0),_n=dt(Z);o.renderbufferStorageMultisample(o.RENDERBUFFER,_n,Jt,Z.width,Z.height),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0+Ut,o.RENDERBUFFER,Me.__webglColorRenderbuffer[Ut])}o.bindRenderbuffer(o.RENDERBUFFER,null),Z.depthBuffer&&(Me.__webglDepthRenderbuffer=o.createRenderbuffer(),Et(Me.__webglDepthRenderbuffer,Z,!0)),t.bindFramebuffer(o.FRAMEBUFFER,null)}}if(Ye){t.bindTexture(o.TEXTURE_CUBE_MAP,qe.__webglTexture),Pn(o.TEXTURE_CUBE_MAP,V);for(let Ut=0;Ut<6;Ut++)if(V.mipmaps&&V.mipmaps.length>0)for(let Yt=0;Yt<V.mipmaps.length;Yt++)rn(Me.__webglFramebuffer[Ut][Yt],Z,V,o.COLOR_ATTACHMENT0,o.TEXTURE_CUBE_MAP_POSITIVE_X+Ut,Yt);else rn(Me.__webglFramebuffer[Ut],Z,V,o.COLOR_ATTACHMENT0,o.TEXTURE_CUBE_MAP_POSITIVE_X+Ut,0);b(V)&&S(o.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(sn){for(let Ut=0,Yt=at.length;Ut<Yt;Ut++){const Vn=at[Ut],mt=i.get(Vn);t.bindTexture(o.TEXTURE_2D,mt.__webglTexture),Pn(o.TEXTURE_2D,Vn),rn(Me.__webglFramebuffer,Z,Vn,o.COLOR_ATTACHMENT0+Ut,o.TEXTURE_2D,0),b(Vn)&&S(o.TEXTURE_2D)}t.unbindTexture()}else{let Ut=o.TEXTURE_2D;if((Z.isWebGL3DRenderTarget||Z.isWebGLArrayRenderTarget)&&(Ut=Z.isWebGL3DRenderTarget?o.TEXTURE_3D:o.TEXTURE_2D_ARRAY),t.bindTexture(Ut,qe.__webglTexture),Pn(Ut,V),V.mipmaps&&V.mipmaps.length>0)for(let Yt=0;Yt<V.mipmaps.length;Yt++)rn(Me.__webglFramebuffer[Yt],Z,V,o.COLOR_ATTACHMENT0,Ut,Yt);else rn(Me.__webglFramebuffer,Z,V,o.COLOR_ATTACHMENT0,Ut,0);b(V)&&S(Ut),t.unbindTexture()}Z.depthBuffer&&Tn(Z)}function nt(Z){const V=Z.textures;for(let Me=0,qe=V.length;Me<qe;Me++){const at=V[Me];if(b(at)){const Ye=O(Z),sn=i.get(at).__webglTexture;t.bindTexture(Ye,sn),S(Ye),t.unbindTexture()}}}const xt=[],Q=[];function cn(Z){if(Z.samples>0){if(Zt(Z)===!1){const V=Z.textures,Me=Z.width,qe=Z.height;let at=o.COLOR_BUFFER_BIT;const Ye=Z.stencilBuffer?o.DEPTH_STENCIL_ATTACHMENT:o.DEPTH_ATTACHMENT,sn=i.get(Z),Ut=V.length>1;if(Ut)for(let Yt=0;Yt<V.length;Yt++)t.bindFramebuffer(o.FRAMEBUFFER,sn.__webglMultisampledFramebuffer),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0+Yt,o.RENDERBUFFER,null),t.bindFramebuffer(o.FRAMEBUFFER,sn.__webglFramebuffer),o.framebufferTexture2D(o.DRAW_FRAMEBUFFER,o.COLOR_ATTACHMENT0+Yt,o.TEXTURE_2D,null,0);t.bindFramebuffer(o.READ_FRAMEBUFFER,sn.__webglMultisampledFramebuffer),t.bindFramebuffer(o.DRAW_FRAMEBUFFER,sn.__webglFramebuffer);for(let Yt=0;Yt<V.length;Yt++){if(Z.resolveDepthBuffer&&(Z.depthBuffer&&(at|=o.DEPTH_BUFFER_BIT),Z.stencilBuffer&&Z.resolveStencilBuffer&&(at|=o.STENCIL_BUFFER_BIT)),Ut){o.framebufferRenderbuffer(o.READ_FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.RENDERBUFFER,sn.__webglColorRenderbuffer[Yt]);const Vn=i.get(V[Yt]).__webglTexture;o.framebufferTexture2D(o.DRAW_FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,Vn,0)}o.blitFramebuffer(0,0,Me,qe,0,0,Me,qe,at,o.NEAREST),f===!0&&(xt.length=0,Q.length=0,xt.push(o.COLOR_ATTACHMENT0+Yt),Z.depthBuffer&&Z.resolveDepthBuffer===!1&&(xt.push(Ye),Q.push(Ye),o.invalidateFramebuffer(o.DRAW_FRAMEBUFFER,Q)),o.invalidateFramebuffer(o.READ_FRAMEBUFFER,xt))}if(t.bindFramebuffer(o.READ_FRAMEBUFFER,null),t.bindFramebuffer(o.DRAW_FRAMEBUFFER,null),Ut)for(let Yt=0;Yt<V.length;Yt++){t.bindFramebuffer(o.FRAMEBUFFER,sn.__webglMultisampledFramebuffer),o.framebufferRenderbuffer(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0+Yt,o.RENDERBUFFER,sn.__webglColorRenderbuffer[Yt]);const Vn=i.get(V[Yt]).__webglTexture;t.bindFramebuffer(o.FRAMEBUFFER,sn.__webglFramebuffer),o.framebufferTexture2D(o.DRAW_FRAMEBUFFER,o.COLOR_ATTACHMENT0+Yt,o.TEXTURE_2D,Vn,0)}t.bindFramebuffer(o.DRAW_FRAMEBUFFER,sn.__webglMultisampledFramebuffer)}else if(Z.depthBuffer&&Z.resolveDepthBuffer===!1&&f){const V=Z.stencilBuffer?o.DEPTH_STENCIL_ATTACHMENT:o.DEPTH_ATTACHMENT;o.invalidateFramebuffer(o.DRAW_FRAMEBUFFER,[V])}}}function dt(Z){return Math.min(r.maxSamples,Z.samples)}function Zt(Z){const V=i.get(Z);return Z.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&V.__useRenderToTexture!==!1}function Mt(Z){const V=c.render.frame;g.get(Z)!==V&&(g.set(Z,V),Z.update())}function vn(Z,V){const Me=Z.colorSpace,qe=Z.format,at=Z.type;return Z.isCompressedTexture===!0||Z.isVideoTexture===!0||Me!==ga&&Me!==ms&&(Xn.getTransfer(Me)===ci?(qe!==zi||at!==St)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Me)),V}function Gt(Z){return typeof HTMLImageElement<"u"&&Z instanceof HTMLImageElement?(p.width=Z.naturalWidth||Z.width,p.height=Z.naturalHeight||Z.height):typeof VideoFrame<"u"&&Z instanceof VideoFrame?(p.width=Z.displayWidth,p.height=Z.displayHeight):(p.width=Z.width,p.height=Z.height),p}this.allocateTextureUnit=Ae,this.resetTextureUnits=De,this.setTexture2D=Ke,this.setTexture2DArray=ke,this.setTexture3D=st,this.setTextureCube=Be,this.rebindTextures=yn,this.setupRenderTarget=jn,this.updateRenderTargetMipmap=nt,this.updateMultisampleRenderTarget=cn,this.setupDepthRenderbuffer=Tn,this.setupFrameBufferTexture=rn,this.useMultisampledRTT=Zt}function F_(o,e){function t(i,r=ms){let a;const c=Xn.getTransfer(r);if(i===St)return o.UNSIGNED_BYTE;if(i===da)return o.UNSIGNED_SHORT_4_4_4_4;if(i===Pr)return o.UNSIGNED_SHORT_5_5_5_1;if(i===ao)return o.UNSIGNED_INT_5_9_9_9_REV;if(i===Mn)return o.BYTE;if(i===pi)return o.SHORT;if(i===vi)return o.UNSIGNED_SHORT;if(i===Wn)return o.INT;if(i===wi)return o.UNSIGNED_INT;if(i===_i)return o.FLOAT;if(i===fs)return o.HALF_FLOAT;if(i===oo)return o.ALPHA;if(i===zs)return o.RGB;if(i===zi)return o.RGBA;if(i===Vs)return o.LUMINANCE;if(i===co)return o.LUMINANCE_ALPHA;if(i===rs)return o.DEPTH_COMPONENT;if(i===ps)return o.DEPTH_STENCIL;if(i===lo)return o.RED;if(i===fa)return o.RED_INTEGER;if(i===vc)return o.RG;if(i===ho)return o.RG_INTEGER;if(i===fe)return o.RGBA_INTEGER;if(i===be||i===Te||i===me||i===lt)if(c===ci)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(i===be)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===Te)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===me)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===lt)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(i===be)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===Te)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===me)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===lt)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(i===At||i===zt||i===qt||i===mn)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(i===At)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===zt)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===qt)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===mn)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(i===gn||i===on||i===Bn)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(i===gn||i===on)return c===ci?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(i===Bn)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(i===kn||i===gi||i===fi||i===zn||i===hn||i===Si||i===Hn||i===Yi||i===Vr||i===Vi||i===ss||i===oi||i===Gi||i===Wi)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(i===kn)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===gi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===fi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===zn)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===hn)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===Si)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===Hn)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===Yi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===Vr)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===Vi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===ss)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===oi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===Gi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===Wi)return c===ci?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(i===Ci||i===Ui||i===ks)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(i===Ci)return c===ci?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(i===Ui)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(i===ks)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(i===kr||i===yl||i===Ml||i===Sl)if(a=e.get("EXT_texture_compression_rgtc"),a!==null){if(i===Ci)return a.COMPRESSED_RED_RGTC1_EXT;if(i===yl)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(i===Ml)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(i===Sl)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return i===zr?o.UNSIGNED_INT_24_8:o[i]!==void 0?o[i]:null}return{convert:t}}const G1={type:"move"};class nf{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Fo,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Fo,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new J,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new J),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Fo,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new J,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new J),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const i of e.hand.values())this._getHandJoint(t,i)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,i){let r=null,a=null,c=null;const h=this._targetRay,f=this._grip,p=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(p&&e.hand){c=!0;for(const w of e.hand.values()){const b=t.getJointPose(w,i),S=this._getHandJoint(p,w);b!==null&&(S.matrix.fromArray(b.transform.matrix),S.matrix.decompose(S.position,S.rotation,S.scale),S.matrixWorldNeedsUpdate=!0,S.jointRadius=b.radius),S.visible=b!==null}const g=p.joints["index-finger-tip"],_=p.joints["thumb-tip"],x=g.position.distanceTo(_.position),y=.02,E=.005;p.inputState.pinching&&x>y+E?(p.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!p.inputState.pinching&&x<=y-E&&(p.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else f!==null&&e.gripSpace&&(a=t.getPose(e.gripSpace,i),a!==null&&(f.matrix.fromArray(a.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,a.linearVelocity?(f.hasLinearVelocity=!0,f.linearVelocity.copy(a.linearVelocity)):f.hasLinearVelocity=!1,a.angularVelocity?(f.hasAngularVelocity=!0,f.angularVelocity.copy(a.angularVelocity)):f.hasAngularVelocity=!1));h!==null&&(r=t.getPose(e.targetRaySpace,i),r===null&&a!==null&&(r=a),r!==null&&(h.matrix.fromArray(r.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),h.matrixWorldNeedsUpdate=!0,r.linearVelocity?(h.hasLinearVelocity=!0,h.linearVelocity.copy(r.linearVelocity)):h.hasLinearVelocity=!1,r.angularVelocity?(h.hasAngularVelocity=!0,h.angularVelocity.copy(r.angularVelocity)):h.hasAngularVelocity=!1,this.dispatchEvent(G1)))}return h!==null&&(h.visible=r!==null),f!==null&&(f.visible=a!==null),p!==null&&(p.visible=c!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const i=new Fo;i.matrixAutoUpdate=!1,i.visible=!1,e.joints[t.jointName]=i,e.add(i)}return e.joints[t.jointName]}}const W1=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,X1=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class q1{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,i){if(this.texture===null){const r=new Ei,a=e.properties.get(r);a.__webglTexture=t.texture,(t.depthNear!=i.depthNear||t.depthFar!=i.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=r}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,i=new qr({vertexShader:W1,fragmentShader:X1,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Ii(new zo(20,20),i)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Y1 extends os{constructor(e,t){super();const i=this;let r=null,a=1,c=null,h="local-floor",f=1,p=null,g=null,_=null,x=null,y=null,E=null;const w=new q1,b=t.getContextAttributes();let S=null,O=null;const N=[],D=[],te=new et;let $=null;const j=new Xi;j.viewport=new $n;const ne=new Xi;ne.viewport=new $n;const H=[j,ne],z=new Gg;let re=null,De=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function($e){let vt=N[$e];return vt===void 0&&(vt=new nf,N[$e]=vt),vt.getTargetRaySpace()},this.getControllerGrip=function($e){let vt=N[$e];return vt===void 0&&(vt=new nf,N[$e]=vt),vt.getGripSpace()},this.getHand=function($e){let vt=N[$e];return vt===void 0&&(vt=new nf,N[$e]=vt),vt.getHandSpace()};function Ae($e){const vt=D.indexOf($e.inputSource);if(vt===-1)return;const rn=N[vt];rn!==void 0&&(rn.update($e.inputSource,$e.frame,p||c),rn.dispatchEvent({type:$e.type,data:$e.inputSource}))}function He(){r.removeEventListener("select",Ae),r.removeEventListener("selectstart",Ae),r.removeEventListener("selectend",Ae),r.removeEventListener("squeeze",Ae),r.removeEventListener("squeezestart",Ae),r.removeEventListener("squeezeend",Ae),r.removeEventListener("end",He),r.removeEventListener("inputsourceschange",Ke);for(let $e=0;$e<N.length;$e++){const vt=D[$e];vt!==null&&(D[$e]=null,N[$e].disconnect(vt))}re=null,De=null,w.reset(),e.setRenderTarget(S),y=null,x=null,_=null,r=null,O=null,ri.stop(),i.isPresenting=!1,e.setPixelRatio($),e.setSize(te.width,te.height,!1),i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function($e){a=$e,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function($e){h=$e,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return p||c},this.setReferenceSpace=function($e){p=$e},this.getBaseLayer=function(){return x!==null?x:y},this.getBinding=function(){return _},this.getFrame=function(){return E},this.getSession=function(){return r},this.setSession=async function($e){if(r=$e,r!==null){if(S=e.getRenderTarget(),r.addEventListener("select",Ae),r.addEventListener("selectstart",Ae),r.addEventListener("selectend",Ae),r.addEventListener("squeeze",Ae),r.addEventListener("squeezestart",Ae),r.addEventListener("squeezeend",Ae),r.addEventListener("end",He),r.addEventListener("inputsourceschange",Ke),b.xrCompatible!==!0&&await t.makeXRCompatible(),$=e.getPixelRatio(),e.getSize(te),r.renderState.layers===void 0){const vt={antialias:b.antialias,alpha:!0,depth:b.depth,stencil:b.stencil,framebufferScaleFactor:a};y=new XRWebGLLayer(r,t,vt),r.updateRenderState({baseLayer:y}),e.setPixelRatio(1),e.setSize(y.framebufferWidth,y.framebufferHeight,!1),O=new Hr(y.framebufferWidth,y.framebufferHeight,{format:zi,type:St,colorSpace:e.outputColorSpace,stencilBuffer:b.stencil})}else{let vt=null,rn=null,Et=null;b.depth&&(Et=b.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,vt=b.stencil?ps:rs,rn=b.stencil?zr:wi);const un={colorFormat:t.RGBA8,depthFormat:Et,scaleFactor:a};_=new XRWebGLBinding(r,t),x=_.createProjectionLayer(un),r.updateRenderState({layers:[x]}),e.setPixelRatio(1),e.setSize(x.textureWidth,x.textureHeight,!1),O=new Hr(x.textureWidth,x.textureHeight,{format:zi,type:St,depthTexture:new fd(x.textureWidth,x.textureHeight,rn,void 0,void 0,void 0,void 0,void 0,void 0,vt),stencilBuffer:b.stencil,colorSpace:e.outputColorSpace,samples:b.antialias?4:0,resolveDepthBuffer:x.ignoreDepthValues===!1})}O.isXRRenderTarget=!0,this.setFoveation(f),p=null,c=await r.requestReferenceSpace(h),ri.setContext(r),ri.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode},this.getDepthTexture=function(){return w.getDepthTexture()};function Ke($e){for(let vt=0;vt<$e.removed.length;vt++){const rn=$e.removed[vt],Et=D.indexOf(rn);Et>=0&&(D[Et]=null,N[Et].disconnect(rn))}for(let vt=0;vt<$e.added.length;vt++){const rn=$e.added[vt];let Et=D.indexOf(rn);if(Et===-1){for(let Tn=0;Tn<N.length;Tn++)if(Tn>=D.length){D.push(rn),Et=Tn;break}else if(D[Tn]===null){D[Tn]=rn,Et=Tn;break}if(Et===-1)break}const un=N[Et];un&&un.connect(rn)}}const ke=new J,st=new J;function Be($e,vt,rn){ke.setFromMatrixPosition(vt.matrixWorld),st.setFromMatrixPosition(rn.matrixWorld);const Et=ke.distanceTo(st),un=vt.projectionMatrix.elements,Tn=rn.projectionMatrix.elements,yn=un[14]/(un[10]-1),jn=un[14]/(un[10]+1),nt=(un[9]+1)/un[5],xt=(un[9]-1)/un[5],Q=(un[8]-1)/un[0],cn=(Tn[8]+1)/Tn[0],dt=yn*Q,Zt=yn*cn,Mt=Et/(-Q+cn),vn=Mt*-Q;if(vt.matrixWorld.decompose($e.position,$e.quaternion,$e.scale),$e.translateX(vn),$e.translateZ(Mt),$e.matrixWorld.compose($e.position,$e.quaternion,$e.scale),$e.matrixWorldInverse.copy($e.matrixWorld).invert(),un[10]===-1)$e.projectionMatrix.copy(vt.projectionMatrix),$e.projectionMatrixInverse.copy(vt.projectionMatrixInverse);else{const Gt=yn+Mt,Z=jn+Mt,V=dt-vn,Me=Zt+(Et-vn),qe=nt*jn/Z*Gt,at=xt*jn/Z*Gt;$e.projectionMatrix.makePerspective(V,Me,qe,at,Gt,Z),$e.projectionMatrixInverse.copy($e.projectionMatrix).invert()}}function It($e,vt){vt===null?$e.matrixWorld.copy($e.matrix):$e.matrixWorld.multiplyMatrices(vt.matrixWorld,$e.matrix),$e.matrixWorldInverse.copy($e.matrixWorld).invert()}this.updateCamera=function($e){if(r===null)return;let vt=$e.near,rn=$e.far;w.texture!==null&&(w.depthNear>0&&(vt=w.depthNear),w.depthFar>0&&(rn=w.depthFar)),z.near=ne.near=j.near=vt,z.far=ne.far=j.far=rn,(re!==z.near||De!==z.far)&&(r.updateRenderState({depthNear:z.near,depthFar:z.far}),re=z.near,De=z.far),j.layers.mask=$e.layers.mask|2,ne.layers.mask=$e.layers.mask|4,z.layers.mask=j.layers.mask|ne.layers.mask;const Et=$e.parent,un=z.cameras;It(z,Et);for(let Tn=0;Tn<un.length;Tn++)It(un[Tn],Et);un.length===2?Be(z,j,ne):z.projectionMatrix.copy(j.projectionMatrix),Xt($e,z,Et)};function Xt($e,vt,rn){rn===null?$e.matrix.copy(vt.matrixWorld):($e.matrix.copy(rn.matrixWorld),$e.matrix.invert(),$e.matrix.multiply(vt.matrixWorld)),$e.matrix.decompose($e.position,$e.quaternion,$e.scale),$e.updateMatrixWorld(!0),$e.projectionMatrix.copy(vt.projectionMatrix),$e.projectionMatrixInverse.copy(vt.projectionMatrixInverse),$e.isPerspectiveCamera&&($e.fov=uo*2*Math.atan(1/$e.projectionMatrix.elements[5]),$e.zoom=1)}this.getCamera=function(){return z},this.getFoveation=function(){if(!(x===null&&y===null))return f},this.setFoveation=function($e){f=$e,x!==null&&(x.fixedFoveation=$e),y!==null&&y.fixedFoveation!==void 0&&(y.fixedFoveation=$e)},this.hasDepthSensing=function(){return w.texture!==null},this.getDepthSensingMesh=function(){return w.getMesh(z)};let en=null;function Pn($e,vt){if(g=vt.getViewerPose(p||c),E=vt,g!==null){const rn=g.views;y!==null&&(e.setRenderTargetFramebuffer(O,y.framebuffer),e.setRenderTarget(O));let Et=!1;rn.length!==z.cameras.length&&(z.cameras.length=0,Et=!0);for(let Tn=0;Tn<rn.length;Tn++){const yn=rn[Tn];let jn=null;if(y!==null)jn=y.getViewport(yn);else{const xt=_.getViewSubImage(x,yn);jn=xt.viewport,Tn===0&&(e.setRenderTargetTextures(O,xt.colorTexture,x.ignoreDepthValues?void 0:xt.depthStencilTexture),e.setRenderTarget(O))}let nt=H[Tn];nt===void 0&&(nt=new Xi,nt.layers.enable(Tn),nt.viewport=new $n,H[Tn]=nt),nt.matrix.fromArray(yn.transform.matrix),nt.matrix.decompose(nt.position,nt.quaternion,nt.scale),nt.projectionMatrix.fromArray(yn.projectionMatrix),nt.projectionMatrixInverse.copy(nt.projectionMatrix).invert(),nt.viewport.set(jn.x,jn.y,jn.width,jn.height),Tn===0&&(z.matrix.copy(nt.matrix),z.matrix.decompose(z.position,z.quaternion,z.scale)),Et===!0&&z.cameras.push(nt)}const un=r.enabledFeatures;if(un&&un.includes("depth-sensing")){const Tn=_.getDepthInformation(rn[0]);Tn&&Tn.isValid&&Tn.texture&&w.init(e,Tn,r.renderState)}}for(let rn=0;rn<N.length;rn++){const Et=D[rn],un=N[rn];Et!==null&&un!==void 0&&un.update(Et,vt,p||c)}en&&en($e,vt),vt.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:vt}),E=null}const ri=new c_;ri.setAnimationLoop(Pn),this.setAnimationLoop=function($e){en=$e},this.dispose=function(){}}}const ka=new Er,Z1=new xn;function $1(o,e){function t(b,S){b.matrixAutoUpdate===!0&&b.updateMatrix(),S.value.copy(b.matrix)}function i(b,S){S.color.getRGB(b.fogColor.value,gm(o)),S.isFog?(b.fogNear.value=S.near,b.fogFar.value=S.far):S.isFogExp2&&(b.fogDensity.value=S.density)}function r(b,S,O,N,D){S.isMeshBasicMaterial||S.isMeshLambertMaterial?a(b,S):S.isMeshToonMaterial?(a(b,S),_(b,S)):S.isMeshPhongMaterial?(a(b,S),g(b,S)):S.isMeshStandardMaterial?(a(b,S),x(b,S),S.isMeshPhysicalMaterial&&y(b,S,D)):S.isMeshMatcapMaterial?(a(b,S),E(b,S)):S.isMeshDepthMaterial?a(b,S):S.isMeshDistanceMaterial?(a(b,S),w(b,S)):S.isMeshNormalMaterial?a(b,S):S.isLineBasicMaterial?(c(b,S),S.isLineDashedMaterial&&h(b,S)):S.isPointsMaterial?f(b,S,O,N):S.isSpriteMaterial?p(b,S):S.isShadowMaterial?(b.color.value.copy(S.color),b.opacity.value=S.opacity):S.isShaderMaterial&&(S.uniformsNeedUpdate=!1)}function a(b,S){b.opacity.value=S.opacity,S.color&&b.diffuse.value.copy(S.color),S.emissive&&b.emissive.value.copy(S.emissive).multiplyScalar(S.emissiveIntensity),S.map&&(b.map.value=S.map,t(S.map,b.mapTransform)),S.alphaMap&&(b.alphaMap.value=S.alphaMap,t(S.alphaMap,b.alphaMapTransform)),S.bumpMap&&(b.bumpMap.value=S.bumpMap,t(S.bumpMap,b.bumpMapTransform),b.bumpScale.value=S.bumpScale,S.side===I&&(b.bumpScale.value*=-1)),S.normalMap&&(b.normalMap.value=S.normalMap,t(S.normalMap,b.normalMapTransform),b.normalScale.value.copy(S.normalScale),S.side===I&&b.normalScale.value.negate()),S.displacementMap&&(b.displacementMap.value=S.displacementMap,t(S.displacementMap,b.displacementMapTransform),b.displacementScale.value=S.displacementScale,b.displacementBias.value=S.displacementBias),S.emissiveMap&&(b.emissiveMap.value=S.emissiveMap,t(S.emissiveMap,b.emissiveMapTransform)),S.specularMap&&(b.specularMap.value=S.specularMap,t(S.specularMap,b.specularMapTransform)),S.alphaTest>0&&(b.alphaTest.value=S.alphaTest);const O=e.get(S),N=O.envMap,D=O.envMapRotation;N&&(b.envMap.value=N,ka.copy(D),ka.x*=-1,ka.y*=-1,ka.z*=-1,N.isCubeTexture&&N.isRenderTargetTexture===!1&&(ka.y*=-1,ka.z*=-1),b.envMapRotation.value.setFromMatrix4(Z1.makeRotationFromEuler(ka)),b.flipEnvMap.value=N.isCubeTexture&&N.isRenderTargetTexture===!1?-1:1,b.reflectivity.value=S.reflectivity,b.ior.value=S.ior,b.refractionRatio.value=S.refractionRatio),S.lightMap&&(b.lightMap.value=S.lightMap,b.lightMapIntensity.value=S.lightMapIntensity,t(S.lightMap,b.lightMapTransform)),S.aoMap&&(b.aoMap.value=S.aoMap,b.aoMapIntensity.value=S.aoMapIntensity,t(S.aoMap,b.aoMapTransform))}function c(b,S){b.diffuse.value.copy(S.color),b.opacity.value=S.opacity,S.map&&(b.map.value=S.map,t(S.map,b.mapTransform))}function h(b,S){b.dashSize.value=S.dashSize,b.totalSize.value=S.dashSize+S.gapSize,b.scale.value=S.scale}function f(b,S,O,N){b.diffuse.value.copy(S.color),b.opacity.value=S.opacity,b.size.value=S.size*O,b.scale.value=N*.5,S.map&&(b.map.value=S.map,t(S.map,b.uvTransform)),S.alphaMap&&(b.alphaMap.value=S.alphaMap,t(S.alphaMap,b.alphaMapTransform)),S.alphaTest>0&&(b.alphaTest.value=S.alphaTest)}function p(b,S){b.diffuse.value.copy(S.color),b.opacity.value=S.opacity,b.rotation.value=S.rotation,S.map&&(b.map.value=S.map,t(S.map,b.mapTransform)),S.alphaMap&&(b.alphaMap.value=S.alphaMap,t(S.alphaMap,b.alphaMapTransform)),S.alphaTest>0&&(b.alphaTest.value=S.alphaTest)}function g(b,S){b.specular.value.copy(S.specular),b.shininess.value=Math.max(S.shininess,1e-4)}function _(b,S){S.gradientMap&&(b.gradientMap.value=S.gradientMap)}function x(b,S){b.metalness.value=S.metalness,S.metalnessMap&&(b.metalnessMap.value=S.metalnessMap,t(S.metalnessMap,b.metalnessMapTransform)),b.roughness.value=S.roughness,S.roughnessMap&&(b.roughnessMap.value=S.roughnessMap,t(S.roughnessMap,b.roughnessMapTransform)),S.envMap&&(b.envMapIntensity.value=S.envMapIntensity)}function y(b,S,O){b.ior.value=S.ior,S.sheen>0&&(b.sheenColor.value.copy(S.sheenColor).multiplyScalar(S.sheen),b.sheenRoughness.value=S.sheenRoughness,S.sheenColorMap&&(b.sheenColorMap.value=S.sheenColorMap,t(S.sheenColorMap,b.sheenColorMapTransform)),S.sheenRoughnessMap&&(b.sheenRoughnessMap.value=S.sheenRoughnessMap,t(S.sheenRoughnessMap,b.sheenRoughnessMapTransform))),S.clearcoat>0&&(b.clearcoat.value=S.clearcoat,b.clearcoatRoughness.value=S.clearcoatRoughness,S.clearcoatMap&&(b.clearcoatMap.value=S.clearcoatMap,t(S.clearcoatMap,b.clearcoatMapTransform)),S.clearcoatRoughnessMap&&(b.clearcoatRoughnessMap.value=S.clearcoatRoughnessMap,t(S.clearcoatRoughnessMap,b.clearcoatRoughnessMapTransform)),S.clearcoatNormalMap&&(b.clearcoatNormalMap.value=S.clearcoatNormalMap,t(S.clearcoatNormalMap,b.clearcoatNormalMapTransform),b.clearcoatNormalScale.value.copy(S.clearcoatNormalScale),S.side===I&&b.clearcoatNormalScale.value.negate())),S.dispersion>0&&(b.dispersion.value=S.dispersion),S.iridescence>0&&(b.iridescence.value=S.iridescence,b.iridescenceIOR.value=S.iridescenceIOR,b.iridescenceThicknessMinimum.value=S.iridescenceThicknessRange[0],b.iridescenceThicknessMaximum.value=S.iridescenceThicknessRange[1],S.iridescenceMap&&(b.iridescenceMap.value=S.iridescenceMap,t(S.iridescenceMap,b.iridescenceMapTransform)),S.iridescenceThicknessMap&&(b.iridescenceThicknessMap.value=S.iridescenceThicknessMap,t(S.iridescenceThicknessMap,b.iridescenceThicknessMapTransform))),S.transmission>0&&(b.transmission.value=S.transmission,b.transmissionSamplerMap.value=O.texture,b.transmissionSamplerSize.value.set(O.width,O.height),S.transmissionMap&&(b.transmissionMap.value=S.transmissionMap,t(S.transmissionMap,b.transmissionMapTransform)),b.thickness.value=S.thickness,S.thicknessMap&&(b.thicknessMap.value=S.thicknessMap,t(S.thicknessMap,b.thicknessMapTransform)),b.attenuationDistance.value=S.attenuationDistance,b.attenuationColor.value.copy(S.attenuationColor)),S.anisotropy>0&&(b.anisotropyVector.value.set(S.anisotropy*Math.cos(S.anisotropyRotation),S.anisotropy*Math.sin(S.anisotropyRotation)),S.anisotropyMap&&(b.anisotropyMap.value=S.anisotropyMap,t(S.anisotropyMap,b.anisotropyMapTransform))),b.specularIntensity.value=S.specularIntensity,b.specularColor.value.copy(S.specularColor),S.specularColorMap&&(b.specularColorMap.value=S.specularColorMap,t(S.specularColorMap,b.specularColorMapTransform)),S.specularIntensityMap&&(b.specularIntensityMap.value=S.specularIntensityMap,t(S.specularIntensityMap,b.specularIntensityMapTransform))}function E(b,S){S.matcap&&(b.matcap.value=S.matcap)}function w(b,S){const O=e.get(S).light;b.referencePosition.value.setFromMatrixPosition(O.matrixWorld),b.nearDistance.value=O.shadow.camera.near,b.farDistance.value=O.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:r}}function K1(o,e,t,i){let r={},a={},c=[];const h=o.getParameter(o.MAX_UNIFORM_BUFFER_BINDINGS);function f(O,N){const D=N.program;i.uniformBlockBinding(O,D)}function p(O,N){let D=r[O.id];D===void 0&&(E(O),D=g(O),r[O.id]=D,O.addEventListener("dispose",b));const te=N.program;i.updateUBOMapping(O,te);const $=e.render.frame;a[O.id]!==$&&(x(O),a[O.id]=$)}function g(O){const N=_();O.__bindingPointIndex=N;const D=o.createBuffer(),te=O.__size,$=O.usage;return o.bindBuffer(o.UNIFORM_BUFFER,D),o.bufferData(o.UNIFORM_BUFFER,te,$),o.bindBuffer(o.UNIFORM_BUFFER,null),o.bindBufferBase(o.UNIFORM_BUFFER,N,D),D}function _(){for(let O=0;O<h;O++)if(c.indexOf(O)===-1)return c.push(O),O;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function x(O){const N=r[O.id],D=O.uniforms,te=O.__cache;o.bindBuffer(o.UNIFORM_BUFFER,N);for(let $=0,j=D.length;$<j;$++){const ne=Array.isArray(D[$])?D[$]:[D[$]];for(let H=0,z=ne.length;H<z;H++){const re=ne[H];if(y(re,$,H,te)===!0){const De=re.__offset,Ae=Array.isArray(re.value)?re.value:[re.value];let He=0;for(let Ke=0;Ke<Ae.length;Ke++){const ke=Ae[Ke],st=w(ke);typeof ke=="number"||typeof ke=="boolean"?(re.__data[0]=ke,o.bufferSubData(o.UNIFORM_BUFFER,De+He,re.__data)):ke.isMatrix3?(re.__data[0]=ke.elements[0],re.__data[1]=ke.elements[1],re.__data[2]=ke.elements[2],re.__data[3]=0,re.__data[4]=ke.elements[3],re.__data[5]=ke.elements[4],re.__data[6]=ke.elements[5],re.__data[7]=0,re.__data[8]=ke.elements[6],re.__data[9]=ke.elements[7],re.__data[10]=ke.elements[8],re.__data[11]=0):(ke.toArray(re.__data,He),He+=st.storage/Float32Array.BYTES_PER_ELEMENT)}o.bufferSubData(o.UNIFORM_BUFFER,De,re.__data)}}}o.bindBuffer(o.UNIFORM_BUFFER,null)}function y(O,N,D,te){const $=O.value,j=N+"_"+D;if(te[j]===void 0)return typeof $=="number"||typeof $=="boolean"?te[j]=$:te[j]=$.clone(),!0;{const ne=te[j];if(typeof $=="number"||typeof $=="boolean"){if(ne!==$)return te[j]=$,!0}else if(ne.equals($)===!1)return ne.copy($),!0}return!1}function E(O){const N=O.uniforms;let D=0;const te=16;for(let j=0,ne=N.length;j<ne;j++){const H=Array.isArray(N[j])?N[j]:[N[j]];for(let z=0,re=H.length;z<re;z++){const De=H[z],Ae=Array.isArray(De.value)?De.value:[De.value];for(let He=0,Ke=Ae.length;He<Ke;He++){const ke=Ae[He],st=w(ke),Be=D%te,It=Be%st.boundary,Xt=Be+It;D+=It,Xt!==0&&te-Xt<st.storage&&(D+=te-Xt),De.__data=new Float32Array(st.storage/Float32Array.BYTES_PER_ELEMENT),De.__offset=D,D+=st.storage}}}const $=D%te;return $>0&&(D+=te-$),O.__size=D,O.__cache={},this}function w(O){const N={boundary:0,storage:0};return typeof O=="number"||typeof O=="boolean"?(N.boundary=4,N.storage=4):O.isVector2?(N.boundary=8,N.storage=8):O.isVector3||O.isColor?(N.boundary=16,N.storage=12):O.isVector4?(N.boundary=16,N.storage=16):O.isMatrix3?(N.boundary=48,N.storage=48):O.isMatrix4?(N.boundary=64,N.storage=64):O.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",O),N}function b(O){const N=O.target;N.removeEventListener("dispose",b);const D=c.indexOf(N.__bindingPointIndex);c.splice(D,1),o.deleteBuffer(r[N.id]),delete r[N.id],delete a[N.id]}function S(){for(const O in r)o.deleteBuffer(r[O]);c=[],r={},a={}}return{bind:f,update:p,dispose:S}}class J1{constructor(e={}){const{canvas:t=Jp(),context:i=null,depth:r=!0,stencil:a=!1,alpha:c=!1,antialias:h=!1,premultipliedAlpha:f=!0,preserveDrawingBuffer:p=!1,powerPreference:g="default",failIfMajorPerformanceCaveat:_=!1,reverseDepthBuffer:x=!1}=e;this.isWebGLRenderer=!0;let y;if(i!==null){if(typeof WebGLRenderingContext<"u"&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");y=i.getContextAttributes().alpha}else y=c;const E=new Uint32Array(4),w=new Int32Array(4);let b=null,S=null;const O=[],N=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=ur,this.toneMapping=Dt,this.toneMappingExposure=1;const D=this;let te=!1,$=0,j=0,ne=null,H=-1,z=null;const re=new $n,De=new $n;let Ae=null;const He=new Ht(0);let Ke=0,ke=t.width,st=t.height,Be=1,It=null,Xt=null;const en=new $n(0,0,ke,st),Pn=new $n(0,0,ke,st);let ri=!1;const $e=new Bc;let vt=!1,rn=!1;const Et=new xn,un=new xn,Tn=new J,yn=new $n,jn={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let nt=!1;function xt(){return ne===null?Be:1}let Q=i;function cn(G,ge){return t.getContext(G,ge)}try{const G={alpha:!0,depth:r,stencil:a,antialias:h,premultipliedAlpha:f,preserveDrawingBuffer:p,powerPreference:g,failIfMajorPerformanceCaveat:_};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${u}`),t.addEventListener("webglcontextlost",tt,!1),t.addEventListener("webglcontextrestored",Wt,!1),t.addEventListener("webglcontextcreationerror",Vt,!1),Q===null){const ge="webgl2";if(Q=cn(ge,G),Q===null)throw cn(ge)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(G){throw console.error("THREE.WebGLRenderer: "+G.message),G}let dt,Zt,Mt,vn,Gt,Z,V,Me,qe,at,Ye,sn,Ut,Yt,Vn,mt,Jt,_n,Sn,jt,qn,Nn,mi,pe;function Ft(){dt=new ob(Q),dt.init(),Nn=new F_(Q,dt),Zt=new tb(Q,dt,e,Nn),Mt=new k1(Q,dt),Zt.reverseDepthBuffer&&x&&Mt.buffers.depth.setReversed(!0),vn=new hb(Q),Gt=new C1,Z=new H1(Q,dt,Mt,Gt,Zt,Nn,vn),V=new ib(D),Me=new ab(D),qe=new JM(Q),mi=new QE(Q,qe),at=new cb(Q,qe,vn,mi),Ye=new db(Q,at,qe,vn),Sn=new ub(Q,Zt,Z),mt=new nb(Gt),sn=new w1(D,V,Me,dt,Zt,mi,mt),Ut=new $1(D,Gt),Yt=new P1,Vn=new F1(dt),_n=new jE(D,V,Me,Mt,Ye,y,f),Jt=new z1(D,Ye,Zt),pe=new K1(Q,vn,Zt,Mt),jt=new eb(Q,dt,vn),qn=new lb(Q,dt,vn),vn.programs=sn.programs,D.capabilities=Zt,D.extensions=dt,D.properties=Gt,D.renderLists=Yt,D.shadowMap=Jt,D.state=Mt,D.info=vn}Ft();const Ve=new Y1(D,Q);this.xr=Ve,this.getContext=function(){return Q},this.getContextAttributes=function(){return Q.getContextAttributes()},this.forceContextLoss=function(){const G=dt.get("WEBGL_lose_context");G&&G.loseContext()},this.forceContextRestore=function(){const G=dt.get("WEBGL_lose_context");G&&G.restoreContext()},this.getPixelRatio=function(){return Be},this.setPixelRatio=function(G){G!==void 0&&(Be=G,this.setSize(ke,st,!1))},this.getSize=function(G){return G.set(ke,st)},this.setSize=function(G,ge,Ce=!0){if(Ve.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}ke=G,st=ge,t.width=Math.floor(G*Be),t.height=Math.floor(ge*Be),Ce===!0&&(t.style.width=G+"px",t.style.height=ge+"px"),this.setViewport(0,0,G,ge)},this.getDrawingBufferSize=function(G){return G.set(ke*Be,st*Be).floor()},this.setDrawingBufferSize=function(G,ge,Ce){ke=G,st=ge,Be=Ce,t.width=Math.floor(G*Ce),t.height=Math.floor(ge*Ce),this.setViewport(0,0,G,ge)},this.getCurrentViewport=function(G){return G.copy(re)},this.getViewport=function(G){return G.copy(en)},this.setViewport=function(G,ge,Ce,Re){G.isVector4?en.set(G.x,G.y,G.z,G.w):en.set(G,ge,Ce,Re),Mt.viewport(re.copy(en).multiplyScalar(Be).round())},this.getScissor=function(G){return G.copy(Pn)},this.setScissor=function(G,ge,Ce,Re){G.isVector4?Pn.set(G.x,G.y,G.z,G.w):Pn.set(G,ge,Ce,Re),Mt.scissor(De.copy(Pn).multiplyScalar(Be).round())},this.getScissorTest=function(){return ri},this.setScissorTest=function(G){Mt.setScissorTest(ri=G)},this.setOpaqueSort=function(G){It=G},this.setTransparentSort=function(G){Xt=G},this.getClearColor=function(G){return G.copy(_n.getClearColor())},this.setClearColor=function(){_n.setClearColor.apply(_n,arguments)},this.getClearAlpha=function(){return _n.getClearAlpha()},this.setClearAlpha=function(){_n.setClearAlpha.apply(_n,arguments)},this.clear=function(G=!0,ge=!0,Ce=!0){let Re=0;if(G){let _e=!1;if(ne!==null){const ft=ne.texture.format;_e=ft===fe||ft===ho||ft===fa}if(_e){const ft=ne.texture.type,Ot=ft===St||ft===wi||ft===vi||ft===zr||ft===da||ft===Pr,$t=_n.getClearColor(),nn=_n.getClearAlpha(),En=$t.r,An=$t.g,dn=$t.b;Ot?(E[0]=En,E[1]=An,E[2]=dn,E[3]=nn,Q.clearBufferuiv(Q.COLOR,0,E)):(w[0]=En,w[1]=An,w[2]=dn,w[3]=nn,Q.clearBufferiv(Q.COLOR,0,w))}else Re|=Q.COLOR_BUFFER_BIT}ge&&(Re|=Q.DEPTH_BUFFER_BIT),Ce&&(Re|=Q.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Q.clear(Re)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",tt,!1),t.removeEventListener("webglcontextrestored",Wt,!1),t.removeEventListener("webglcontextcreationerror",Vt,!1),_n.dispose(),Yt.dispose(),Vn.dispose(),Gt.dispose(),V.dispose(),Me.dispose(),Ye.dispose(),mi.dispose(),pe.dispose(),sn.dispose(),Ve.dispose(),Ve.removeEventListener("sessionstart",O_),Ve.removeEventListener("sessionend",B_),Ha.stop()};function tt(G){G.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),te=!0}function Wt(){console.log("THREE.WebGLRenderer: Context Restored."),te=!1;const G=vn.autoReset,ge=Jt.enabled,Ce=Jt.autoUpdate,Re=Jt.needsUpdate,_e=Jt.type;Ft(),vn.autoReset=G,Jt.enabled=ge,Jt.autoUpdate=Ce,Jt.needsUpdate=Re,Jt.type=_e}function Vt(G){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",G.statusMessage)}function Dn(G){const ge=G.target;ge.removeEventListener("dispose",Dn),Ti(ge)}function Ti(G){Qi(G),Gt.remove(G)}function Qi(G){const ge=Gt.get(G).programs;ge!==void 0&&(ge.forEach(function(Ce){sn.releaseProgram(Ce)}),G.isShaderMaterial&&sn.releaseShaderCache(G))}this.renderBufferDirect=function(G,ge,Ce,Re,_e,ft){ge===null&&(ge=jn);const Ot=_e.isMesh&&_e.matrixWorld.determinant()<0,$t=j1(G,ge,Ce,Re,_e);Mt.setMaterial(Re,Ot);let nn=Ce.index,En=1;if(Re.wireframe===!0){if(nn=at.getWireframeAttribute(Ce),nn===void 0)return;En=2}const An=Ce.drawRange,dn=Ce.attributes.position;let Qn=An.start*En,si=(An.start+An.count)*En;ft!==null&&(Qn=Math.max(Qn,ft.start*En),si=Math.min(si,(ft.start+ft.count)*En)),nn!==null?(Qn=Math.max(Qn,0),si=Math.min(si,nn.count)):dn!=null&&(Qn=Math.max(Qn,0),si=Math.min(si,dn.count));const Li=si-Qn;if(Li<0||Li===1/0)return;mi.setup(_e,Re,$t,Ce,nn);let Ai,ti=jt;if(nn!==null&&(Ai=qe.get(nn),ti=qn,ti.setIndex(Ai)),_e.isMesh)Re.wireframe===!0?(Mt.setLineWidth(Re.wireframeLinewidth*xt()),ti.setMode(Q.LINES)):ti.setMode(Q.TRIANGLES);else if(_e.isLine){let fn=Re.linewidth;fn===void 0&&(fn=1),Mt.setLineWidth(fn*xt()),_e.isLineSegments?ti.setMode(Q.LINES):_e.isLineLoop?ti.setMode(Q.LINE_LOOP):ti.setMode(Q.LINE_STRIP)}else _e.isPoints?ti.setMode(Q.POINTS):_e.isSprite&&ti.setMode(Q.TRIANGLES);if(_e.isBatchedMesh)if(_e._multiDrawInstances!==null)ti.renderMultiDrawInstances(_e._multiDrawStarts,_e._multiDrawCounts,_e._multiDrawCount,_e._multiDrawInstances);else if(dt.get("WEBGL_multi_draw"))ti.renderMultiDraw(_e._multiDrawStarts,_e._multiDrawCounts,_e._multiDrawCount);else{const fn=_e._multiDrawStarts,qi=_e._multiDrawCounts,ai=_e._multiDrawCount,Jr=nn?qe.get(nn).bytesPerElement:1,Go=Gt.get(Re).currentProgram.getUniforms();for(let Tr=0;Tr<ai;Tr++)Go.setValue(Q,"_gl_DrawID",Tr),ti.render(fn[Tr]/Jr,qi[Tr])}else if(_e.isInstancedMesh)ti.renderInstances(Qn,Li,_e.count);else if(Ce.isInstancedBufferGeometry){const fn=Ce._maxInstanceCount!==void 0?Ce._maxInstanceCount:1/0,qi=Math.min(Ce.instanceCount,fn);ti.renderInstances(Qn,Li,qi)}else ti.render(Qn,Li)};function li(G,ge,Ce){G.transparent===!0&&G.side===F&&G.forceSinglePass===!1?(G.side=I,G.needsUpdate=!0,Yh(G,ge,Ce),G.side=P,G.needsUpdate=!0,Yh(G,ge,Ce),G.side=F):Yh(G,ge,Ce)}this.compile=function(G,ge,Ce=null){Ce===null&&(Ce=G),S=Vn.get(Ce),S.init(ge),N.push(S),Ce.traverseVisible(function(_e){_e.isLight&&_e.layers.test(ge.layers)&&(S.pushLight(_e),_e.castShadow&&S.pushShadow(_e))}),G!==Ce&&G.traverseVisible(function(_e){_e.isLight&&_e.layers.test(ge.layers)&&(S.pushLight(_e),_e.castShadow&&S.pushShadow(_e))}),S.setupLights();const Re=new Set;return G.traverse(function(_e){if(!(_e.isMesh||_e.isPoints||_e.isLine||_e.isSprite))return;const ft=_e.material;if(ft)if(Array.isArray(ft))for(let Ot=0;Ot<ft.length;Ot++){const $t=ft[Ot];li($t,Ce,_e),Re.add($t)}else li(ft,Ce,_e),Re.add(ft)}),N.pop(),S=null,Re},this.compileAsync=function(G,ge,Ce=null){const Re=this.compile(G,ge,Ce);return new Promise(_e=>{function ft(){if(Re.forEach(function(Ot){Gt.get(Ot).currentProgram.isReady()&&Re.delete(Ot)}),Re.size===0){_e(G);return}setTimeout(ft,10)}dt.get("KHR_parallel_shader_compile")!==null?ft():setTimeout(ft,10)})};let Kr=null;function As(G){Kr&&Kr(G)}function O_(){Ha.stop()}function B_(){Ha.start()}const Ha=new c_;Ha.setAnimationLoop(As),typeof self<"u"&&Ha.setContext(self),this.setAnimationLoop=function(G){Kr=G,Ve.setAnimationLoop(G),G===null?Ha.stop():Ha.start()},Ve.addEventListener("sessionstart",O_),Ve.addEventListener("sessionend",B_),this.render=function(G,ge){if(ge!==void 0&&ge.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(te===!0)return;if(G.matrixWorldAutoUpdate===!0&&G.updateMatrixWorld(),ge.parent===null&&ge.matrixWorldAutoUpdate===!0&&ge.updateMatrixWorld(),Ve.enabled===!0&&Ve.isPresenting===!0&&(Ve.cameraAutoUpdate===!0&&Ve.updateCamera(ge),ge=Ve.getCamera()),G.isScene===!0&&G.onBeforeRender(D,G,ge,ne),S=Vn.get(G,N.length),S.init(ge),N.push(S),un.multiplyMatrices(ge.projectionMatrix,ge.matrixWorldInverse),$e.setFromProjectionMatrix(un),rn=this.localClippingEnabled,vt=mt.init(this.clippingPlanes,rn),b=Yt.get(G,O.length),b.init(),O.push(b),Ve.enabled===!0&&Ve.isPresenting===!0){const ft=D.xr.getDepthSensingMesh();ft!==null&&rf(ft,ge,-1/0,D.sortObjects)}rf(G,ge,0,D.sortObjects),b.finish(),D.sortObjects===!0&&b.sort(It,Xt),nt=Ve.enabled===!1||Ve.isPresenting===!1||Ve.hasDepthSensing()===!1,nt&&_n.addToRenderList(b,G),this.info.render.frame++,vt===!0&&mt.beginShadows();const Ce=S.state.shadowsArray;Jt.render(Ce,G,ge),vt===!0&&mt.endShadows(),this.info.autoReset===!0&&this.info.reset();const Re=b.opaque,_e=b.transmissive;if(S.setupLights(),ge.isArrayCamera){const ft=ge.cameras;if(_e.length>0)for(let Ot=0,$t=ft.length;Ot<$t;Ot++){const nn=ft[Ot];V_(Re,_e,G,nn)}nt&&_n.render(G);for(let Ot=0,$t=ft.length;Ot<$t;Ot++){const nn=ft[Ot];z_(b,G,nn,nn.viewport)}}else _e.length>0&&V_(Re,_e,G,ge),nt&&_n.render(G),z_(b,G,ge);ne!==null&&(Z.updateMultisampleRenderTarget(ne),Z.updateRenderTargetMipmap(ne)),G.isScene===!0&&G.onAfterRender(D,G,ge),mi.resetDefaultState(),H=-1,z=null,N.pop(),N.length>0?(S=N[N.length-1],vt===!0&&mt.setGlobalState(D.clippingPlanes,S.state.camera)):S=null,O.pop(),O.length>0?b=O[O.length-1]:b=null};function rf(G,ge,Ce,Re){if(G.visible===!1)return;if(G.layers.test(ge.layers)){if(G.isGroup)Ce=G.renderOrder;else if(G.isLOD)G.autoUpdate===!0&&G.update(ge);else if(G.isLight)S.pushLight(G),G.castShadow&&S.pushShadow(G);else if(G.isSprite){if(!G.frustumCulled||$e.intersectsSprite(G)){Re&&yn.setFromMatrixPosition(G.matrixWorld).applyMatrix4(un);const Ot=Ye.update(G),$t=G.material;$t.visible&&b.push(G,Ot,$t,Ce,yn.z,null)}}else if((G.isMesh||G.isLine||G.isPoints)&&(!G.frustumCulled||$e.intersectsObject(G))){const Ot=Ye.update(G),$t=G.material;if(Re&&(G.boundingSphere!==void 0?(G.boundingSphere===null&&G.computeBoundingSphere(),yn.copy(G.boundingSphere.center)):(Ot.boundingSphere===null&&Ot.computeBoundingSphere(),yn.copy(Ot.boundingSphere.center)),yn.applyMatrix4(G.matrixWorld).applyMatrix4(un)),Array.isArray($t)){const nn=Ot.groups;for(let En=0,An=nn.length;En<An;En++){const dn=nn[En],Qn=$t[dn.materialIndex];Qn&&Qn.visible&&b.push(G,Ot,Qn,Ce,yn.z,dn)}}else $t.visible&&b.push(G,Ot,$t,Ce,yn.z,null)}}const ft=G.children;for(let Ot=0,$t=ft.length;Ot<$t;Ot++)rf(ft[Ot],ge,Ce,Re)}function z_(G,ge,Ce,Re){const _e=G.opaque,ft=G.transmissive,Ot=G.transparent;S.setupLightsView(Ce),vt===!0&&mt.setGlobalState(D.clippingPlanes,Ce),Re&&Mt.viewport(re.copy(Re)),_e.length>0&&qh(_e,ge,Ce),ft.length>0&&qh(ft,ge,Ce),Ot.length>0&&qh(Ot,ge,Ce),Mt.buffers.depth.setTest(!0),Mt.buffers.depth.setMask(!0),Mt.buffers.color.setMask(!0),Mt.setPolygonOffset(!1)}function V_(G,ge,Ce,Re){if((Ce.isScene===!0?Ce.overrideMaterial:null)!==null)return;S.state.transmissionRenderTarget[Re.id]===void 0&&(S.state.transmissionRenderTarget[Re.id]=new Hr(1,1,{generateMipmaps:!0,type:dt.has("EXT_color_buffer_half_float")||dt.has("EXT_color_buffer_float")?fs:St,minFilter:Xe,samples:4,stencilBuffer:a,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Xn.workingColorSpace}));const ft=S.state.transmissionRenderTarget[Re.id],Ot=Re.viewport||re;ft.setSize(Ot.z,Ot.w);const $t=D.getRenderTarget();D.setRenderTarget(ft),D.getClearColor(He),Ke=D.getClearAlpha(),Ke<1&&D.setClearColor(16777215,.5),D.clear(),nt&&_n.render(Ce);const nn=D.toneMapping;D.toneMapping=Dt;const En=Re.viewport;if(Re.viewport!==void 0&&(Re.viewport=void 0),S.setupLightsView(Re),vt===!0&&mt.setGlobalState(D.clippingPlanes,Re),qh(G,Ce,Re),Z.updateMultisampleRenderTarget(ft),Z.updateRenderTargetMipmap(ft),dt.has("WEBGL_multisampled_render_to_texture")===!1){let An=!1;for(let dn=0,Qn=ge.length;dn<Qn;dn++){const si=ge[dn],Li=si.object,Ai=si.geometry,ti=si.material,fn=si.group;if(ti.side===F&&Li.layers.test(Re.layers)){const qi=ti.side;ti.side=I,ti.needsUpdate=!0,k_(Li,Ce,Re,Ai,ti,fn),ti.side=qi,ti.needsUpdate=!0,An=!0}}An===!0&&(Z.updateMultisampleRenderTarget(ft),Z.updateRenderTargetMipmap(ft))}D.setRenderTarget($t),D.setClearColor(He,Ke),En!==void 0&&(Re.viewport=En),D.toneMapping=nn}function qh(G,ge,Ce){const Re=ge.isScene===!0?ge.overrideMaterial:null;for(let _e=0,ft=G.length;_e<ft;_e++){const Ot=G[_e],$t=Ot.object,nn=Ot.geometry,En=Re===null?Ot.material:Re,An=Ot.group;$t.layers.test(Ce.layers)&&k_($t,ge,Ce,nn,En,An)}}function k_(G,ge,Ce,Re,_e,ft){G.onBeforeRender(D,ge,Ce,Re,_e,ft),G.modelViewMatrix.multiplyMatrices(Ce.matrixWorldInverse,G.matrixWorld),G.normalMatrix.getNormalMatrix(G.modelViewMatrix),_e.onBeforeRender(D,ge,Ce,Re,G,ft),_e.transparent===!0&&_e.side===F&&_e.forceSinglePass===!1?(_e.side=I,_e.needsUpdate=!0,D.renderBufferDirect(Ce,ge,Re,_e,G,ft),_e.side=P,_e.needsUpdate=!0,D.renderBufferDirect(Ce,ge,Re,_e,G,ft),_e.side=F):D.renderBufferDirect(Ce,ge,Re,_e,G,ft),G.onAfterRender(D,ge,Ce,Re,_e,ft)}function Yh(G,ge,Ce){ge.isScene!==!0&&(ge=jn);const Re=Gt.get(G),_e=S.state.lights,ft=S.state.shadowsArray,Ot=_e.state.version,$t=sn.getParameters(G,_e.state,ft,ge,Ce),nn=sn.getProgramCacheKey($t);let En=Re.programs;Re.environment=G.isMeshStandardMaterial?ge.environment:null,Re.fog=ge.fog,Re.envMap=(G.isMeshStandardMaterial?Me:V).get(G.envMap||Re.environment),Re.envMapRotation=Re.environment!==null&&G.envMap===null?ge.environmentRotation:G.envMapRotation,En===void 0&&(G.addEventListener("dispose",Dn),En=new Map,Re.programs=En);let An=En.get(nn);if(An!==void 0){if(Re.currentProgram===An&&Re.lightsStateVersion===Ot)return G_(G,$t),An}else $t.uniforms=sn.getUniforms(G),G.onBeforeCompile($t,D),An=sn.acquireProgram($t,nn),En.set(nn,An),Re.uniforms=$t.uniforms;const dn=Re.uniforms;return(!G.isShaderMaterial&&!G.isRawShaderMaterial||G.clipping===!0)&&(dn.clippingPlanes=mt.uniform),G_(G,$t),Re.needsLights=eT(G),Re.lightsStateVersion=Ot,Re.needsLights&&(dn.ambientLightColor.value=_e.state.ambient,dn.lightProbe.value=_e.state.probe,dn.directionalLights.value=_e.state.directional,dn.directionalLightShadows.value=_e.state.directionalShadow,dn.spotLights.value=_e.state.spot,dn.spotLightShadows.value=_e.state.spotShadow,dn.rectAreaLights.value=_e.state.rectArea,dn.ltc_1.value=_e.state.rectAreaLTC1,dn.ltc_2.value=_e.state.rectAreaLTC2,dn.pointLights.value=_e.state.point,dn.pointLightShadows.value=_e.state.pointShadow,dn.hemisphereLights.value=_e.state.hemi,dn.directionalShadowMap.value=_e.state.directionalShadowMap,dn.directionalShadowMatrix.value=_e.state.directionalShadowMatrix,dn.spotShadowMap.value=_e.state.spotShadowMap,dn.spotLightMatrix.value=_e.state.spotLightMatrix,dn.spotLightMap.value=_e.state.spotLightMap,dn.pointShadowMap.value=_e.state.pointShadowMap,dn.pointShadowMatrix.value=_e.state.pointShadowMatrix),Re.currentProgram=An,Re.uniformsList=null,An}function H_(G){if(G.uniformsList===null){const ge=G.currentProgram.getUniforms();G.uniformsList=Wh.seqWithValue(ge.seq,G.uniforms)}return G.uniformsList}function G_(G,ge){const Ce=Gt.get(G);Ce.outputColorSpace=ge.outputColorSpace,Ce.batching=ge.batching,Ce.batchingColor=ge.batchingColor,Ce.instancing=ge.instancing,Ce.instancingColor=ge.instancingColor,Ce.instancingMorph=ge.instancingMorph,Ce.skinning=ge.skinning,Ce.morphTargets=ge.morphTargets,Ce.morphNormals=ge.morphNormals,Ce.morphColors=ge.morphColors,Ce.morphTargetsCount=ge.morphTargetsCount,Ce.numClippingPlanes=ge.numClippingPlanes,Ce.numIntersection=ge.numClipIntersection,Ce.vertexAlphas=ge.vertexAlphas,Ce.vertexTangents=ge.vertexTangents,Ce.toneMapping=ge.toneMapping}function j1(G,ge,Ce,Re,_e){ge.isScene!==!0&&(ge=jn),Z.resetTextureUnits();const ft=ge.fog,Ot=Re.isMeshStandardMaterial?ge.environment:null,$t=ne===null?D.outputColorSpace:ne.isXRRenderTarget===!0?ne.texture.colorSpace:ga,nn=(Re.isMeshStandardMaterial?Me:V).get(Re.envMap||Ot),En=Re.vertexColors===!0&&!!Ce.attributes.color&&Ce.attributes.color.itemSize===4,An=!!Ce.attributes.tangent&&(!!Re.normalMap||Re.anisotropy>0),dn=!!Ce.morphAttributes.position,Qn=!!Ce.morphAttributes.normal,si=!!Ce.morphAttributes.color;let Li=Dt;Re.toneMapped&&(ne===null||ne.isXRRenderTarget===!0)&&(Li=D.toneMapping);const Ai=Ce.morphAttributes.position||Ce.morphAttributes.normal||Ce.morphAttributes.color,ti=Ai!==void 0?Ai.length:0,fn=Gt.get(Re),qi=S.state.lights;if(vt===!0&&(rn===!0||G!==z)){const lr=G===z&&Re.id===H;mt.setState(Re,G,lr)}let ai=!1;Re.version===fn.__version?(fn.needsLights&&fn.lightsStateVersion!==qi.state.version||fn.outputColorSpace!==$t||_e.isBatchedMesh&&fn.batching===!1||!_e.isBatchedMesh&&fn.batching===!0||_e.isBatchedMesh&&fn.batchingColor===!0&&_e.colorTexture===null||_e.isBatchedMesh&&fn.batchingColor===!1&&_e.colorTexture!==null||_e.isInstancedMesh&&fn.instancing===!1||!_e.isInstancedMesh&&fn.instancing===!0||_e.isSkinnedMesh&&fn.skinning===!1||!_e.isSkinnedMesh&&fn.skinning===!0||_e.isInstancedMesh&&fn.instancingColor===!0&&_e.instanceColor===null||_e.isInstancedMesh&&fn.instancingColor===!1&&_e.instanceColor!==null||_e.isInstancedMesh&&fn.instancingMorph===!0&&_e.morphTexture===null||_e.isInstancedMesh&&fn.instancingMorph===!1&&_e.morphTexture!==null||fn.envMap!==nn||Re.fog===!0&&fn.fog!==ft||fn.numClippingPlanes!==void 0&&(fn.numClippingPlanes!==mt.numPlanes||fn.numIntersection!==mt.numIntersection)||fn.vertexAlphas!==En||fn.vertexTangents!==An||fn.morphTargets!==dn||fn.morphNormals!==Qn||fn.morphColors!==si||fn.toneMapping!==Li||fn.morphTargetsCount!==ti)&&(ai=!0):(ai=!0,fn.__version=Re.version);let Jr=fn.currentProgram;ai===!0&&(Jr=Yh(Re,ge,_e));let Go=!1,Tr=!1,rl=!1;const xi=Jr.getUniforms(),Lr=fn.uniforms;if(Mt.useProgram(Jr.program)&&(Go=!0,Tr=!0,rl=!0),Re.id!==H&&(H=Re.id,Tr=!0),Go||z!==G){Mt.buffers.depth.getReversed()?(Et.copy(G.projectionMatrix),Mv(Et),Sv(Et),xi.setValue(Q,"projectionMatrix",Et)):xi.setValue(Q,"projectionMatrix",G.projectionMatrix),xi.setValue(Q,"viewMatrix",G.matrixWorldInverse);const _r=xi.map.cameraPosition;_r!==void 0&&_r.setValue(Q,Tn.setFromMatrixPosition(G.matrixWorld)),Zt.logarithmicDepthBuffer&&xi.setValue(Q,"logDepthBufFC",2/(Math.log(G.far+1)/Math.LN2)),(Re.isMeshPhongMaterial||Re.isMeshToonMaterial||Re.isMeshLambertMaterial||Re.isMeshBasicMaterial||Re.isMeshStandardMaterial||Re.isShaderMaterial)&&xi.setValue(Q,"isOrthographic",G.isOrthographicCamera===!0),z!==G&&(z=G,Tr=!0,rl=!0)}if(_e.isSkinnedMesh){xi.setOptional(Q,_e,"bindMatrix"),xi.setOptional(Q,_e,"bindMatrixInverse");const lr=_e.skeleton;lr&&(lr.boneTexture===null&&lr.computeBoneTexture(),xi.setValue(Q,"boneTexture",lr.boneTexture,Z))}_e.isBatchedMesh&&(xi.setOptional(Q,_e,"batchingTexture"),xi.setValue(Q,"batchingTexture",_e._matricesTexture,Z),xi.setOptional(Q,_e,"batchingIdTexture"),xi.setValue(Q,"batchingIdTexture",_e._indirectTexture,Z),xi.setOptional(Q,_e,"batchingColorTexture"),_e._colorsTexture!==null&&xi.setValue(Q,"batchingColorTexture",_e._colorsTexture,Z));const Dr=Ce.morphAttributes;if((Dr.position!==void 0||Dr.normal!==void 0||Dr.color!==void 0)&&Sn.update(_e,Ce,Jr),(Tr||fn.receiveShadow!==_e.receiveShadow)&&(fn.receiveShadow=_e.receiveShadow,xi.setValue(Q,"receiveShadow",_e.receiveShadow)),Re.isMeshGouraudMaterial&&Re.envMap!==null&&(Lr.envMap.value=nn,Lr.flipEnvMap.value=nn.isCubeTexture&&nn.isRenderTargetTexture===!1?-1:1),Re.isMeshStandardMaterial&&Re.envMap===null&&ge.environment!==null&&(Lr.envMapIntensity.value=ge.environmentIntensity),Tr&&(xi.setValue(Q,"toneMappingExposure",D.toneMappingExposure),fn.needsLights&&Q1(Lr,rl),ft&&Re.fog===!0&&Ut.refreshFogUniforms(Lr,ft),Ut.refreshMaterialUniforms(Lr,Re,Be,st,S.state.transmissionRenderTarget[G.id]),Wh.upload(Q,H_(fn),Lr,Z)),Re.isShaderMaterial&&Re.uniformsNeedUpdate===!0&&(Wh.upload(Q,H_(fn),Lr,Z),Re.uniformsNeedUpdate=!1),Re.isSpriteMaterial&&xi.setValue(Q,"center",_e.center),xi.setValue(Q,"modelViewMatrix",_e.modelViewMatrix),xi.setValue(Q,"normalMatrix",_e.normalMatrix),xi.setValue(Q,"modelMatrix",_e.matrixWorld),Re.isShaderMaterial||Re.isRawShaderMaterial){const lr=Re.uniformsGroups;for(let _r=0,sf=lr.length;_r<sf;_r++){const Ga=lr[_r];pe.update(Ga,Jr),pe.bind(Ga,Jr)}}return Jr}function Q1(G,ge){G.ambientLightColor.needsUpdate=ge,G.lightProbe.needsUpdate=ge,G.directionalLights.needsUpdate=ge,G.directionalLightShadows.needsUpdate=ge,G.pointLights.needsUpdate=ge,G.pointLightShadows.needsUpdate=ge,G.spotLights.needsUpdate=ge,G.spotLightShadows.needsUpdate=ge,G.rectAreaLights.needsUpdate=ge,G.hemisphereLights.needsUpdate=ge}function eT(G){return G.isMeshLambertMaterial||G.isMeshToonMaterial||G.isMeshPhongMaterial||G.isMeshStandardMaterial||G.isShadowMaterial||G.isShaderMaterial&&G.lights===!0}this.getActiveCubeFace=function(){return $},this.getActiveMipmapLevel=function(){return j},this.getRenderTarget=function(){return ne},this.setRenderTargetTextures=function(G,ge,Ce){Gt.get(G.texture).__webglTexture=ge,Gt.get(G.depthTexture).__webglTexture=Ce;const Re=Gt.get(G);Re.__hasExternalTextures=!0,Re.__autoAllocateDepthBuffer=Ce===void 0,Re.__autoAllocateDepthBuffer||dt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),Re.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(G,ge){const Ce=Gt.get(G);Ce.__webglFramebuffer=ge,Ce.__useDefaultFramebuffer=ge===void 0},this.setRenderTarget=function(G,ge=0,Ce=0){ne=G,$=ge,j=Ce;let Re=!0,_e=null,ft=!1,Ot=!1;if(G){const nn=Gt.get(G);if(nn.__useDefaultFramebuffer!==void 0)Mt.bindFramebuffer(Q.FRAMEBUFFER,null),Re=!1;else if(nn.__webglFramebuffer===void 0)Z.setupRenderTarget(G);else if(nn.__hasExternalTextures)Z.rebindTextures(G,Gt.get(G.texture).__webglTexture,Gt.get(G.depthTexture).__webglTexture);else if(G.depthBuffer){const dn=G.depthTexture;if(nn.__boundDepthTexture!==dn){if(dn!==null&&Gt.has(dn)&&(G.width!==dn.image.width||G.height!==dn.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");Z.setupDepthRenderbuffer(G)}}const En=G.texture;(En.isData3DTexture||En.isDataArrayTexture||En.isCompressedArrayTexture)&&(Ot=!0);const An=Gt.get(G).__webglFramebuffer;G.isWebGLCubeRenderTarget?(Array.isArray(An[ge])?_e=An[ge][Ce]:_e=An[ge],ft=!0):G.samples>0&&Z.useMultisampledRTT(G)===!1?_e=Gt.get(G).__webglMultisampledFramebuffer:Array.isArray(An)?_e=An[Ce]:_e=An,re.copy(G.viewport),De.copy(G.scissor),Ae=G.scissorTest}else re.copy(en).multiplyScalar(Be).floor(),De.copy(Pn).multiplyScalar(Be).floor(),Ae=ri;if(Mt.bindFramebuffer(Q.FRAMEBUFFER,_e)&&Re&&Mt.drawBuffers(G,_e),Mt.viewport(re),Mt.scissor(De),Mt.setScissorTest(Ae),ft){const nn=Gt.get(G.texture);Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_CUBE_MAP_POSITIVE_X+ge,nn.__webglTexture,Ce)}else if(Ot){const nn=Gt.get(G.texture),En=ge||0;Q.framebufferTextureLayer(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,nn.__webglTexture,Ce||0,En)}H=-1},this.readRenderTargetPixels=function(G,ge,Ce,Re,_e,ft,Ot){if(!(G&&G.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let $t=Gt.get(G).__webglFramebuffer;if(G.isWebGLCubeRenderTarget&&Ot!==void 0&&($t=$t[Ot]),$t){Mt.bindFramebuffer(Q.FRAMEBUFFER,$t);try{const nn=G.texture,En=nn.format,An=nn.type;if(!Zt.textureFormatReadable(En)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!Zt.textureTypeReadable(An)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}ge>=0&&ge<=G.width-Re&&Ce>=0&&Ce<=G.height-_e&&Q.readPixels(ge,Ce,Re,_e,Nn.convert(En),Nn.convert(An),ft)}finally{const nn=ne!==null?Gt.get(ne).__webglFramebuffer:null;Mt.bindFramebuffer(Q.FRAMEBUFFER,nn)}}},this.readRenderTargetPixelsAsync=async function(G,ge,Ce,Re,_e,ft,Ot){if(!(G&&G.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let $t=Gt.get(G).__webglFramebuffer;if(G.isWebGLCubeRenderTarget&&Ot!==void 0&&($t=$t[Ot]),$t){const nn=G.texture,En=nn.format,An=nn.type;if(!Zt.textureFormatReadable(En))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!Zt.textureTypeReadable(An))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(ge>=0&&ge<=G.width-Re&&Ce>=0&&Ce<=G.height-_e){Mt.bindFramebuffer(Q.FRAMEBUFFER,$t);const dn=Q.createBuffer();Q.bindBuffer(Q.PIXEL_PACK_BUFFER,dn),Q.bufferData(Q.PIXEL_PACK_BUFFER,ft.byteLength,Q.STREAM_READ),Q.readPixels(ge,Ce,Re,_e,Nn.convert(En),Nn.convert(An),0);const Qn=ne!==null?Gt.get(ne).__webglFramebuffer:null;Mt.bindFramebuffer(Q.FRAMEBUFFER,Qn);const si=Q.fenceSync(Q.SYNC_GPU_COMMANDS_COMPLETE,0);return Q.flush(),await yv(Q,si,4),Q.bindBuffer(Q.PIXEL_PACK_BUFFER,dn),Q.getBufferSubData(Q.PIXEL_PACK_BUFFER,0,ft),Q.deleteBuffer(dn),Q.deleteSync(si),ft}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(G,ge=null,Ce=0){G.isTexture!==!0&&(po("WebGLRenderer: copyFramebufferToTexture function signature has changed."),ge=arguments[0]||null,G=arguments[1]);const Re=Math.pow(2,-Ce),_e=Math.floor(G.image.width*Re),ft=Math.floor(G.image.height*Re),Ot=ge!==null?ge.x:0,$t=ge!==null?ge.y:0;Z.setTexture2D(G,0),Q.copyTexSubImage2D(Q.TEXTURE_2D,Ce,0,0,Ot,$t,_e,ft),Mt.unbindTexture()};const tT=Q.createFramebuffer(),nT=Q.createFramebuffer();this.copyTextureToTexture=function(G,ge,Ce=null,Re=null,_e=0,ft=null){G.isTexture!==!0&&(po("WebGLRenderer: copyTextureToTexture function signature has changed."),Re=arguments[0]||null,G=arguments[1],ge=arguments[2],ft=arguments[3]||0,Ce=null),ft===null&&(_e!==0?(po("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),ft=_e,_e=0):ft=0);let Ot,$t,nn,En,An,dn,Qn,si,Li;const Ai=G.isCompressedTexture?G.mipmaps[ft]:G.image;if(Ce!==null)Ot=Ce.max.x-Ce.min.x,$t=Ce.max.y-Ce.min.y,nn=Ce.isBox3?Ce.max.z-Ce.min.z:1,En=Ce.min.x,An=Ce.min.y,dn=Ce.isBox3?Ce.min.z:0;else{const Dr=Math.pow(2,-_e);Ot=Math.floor(Ai.width*Dr),$t=Math.floor(Ai.height*Dr),G.isDataArrayTexture?nn=Ai.depth:G.isData3DTexture?nn=Math.floor(Ai.depth*Dr):nn=1,En=0,An=0,dn=0}Re!==null?(Qn=Re.x,si=Re.y,Li=Re.z):(Qn=0,si=0,Li=0);const ti=Nn.convert(ge.format),fn=Nn.convert(ge.type);let qi;ge.isData3DTexture?(Z.setTexture3D(ge,0),qi=Q.TEXTURE_3D):ge.isDataArrayTexture||ge.isCompressedArrayTexture?(Z.setTexture2DArray(ge,0),qi=Q.TEXTURE_2D_ARRAY):(Z.setTexture2D(ge,0),qi=Q.TEXTURE_2D),Q.pixelStorei(Q.UNPACK_FLIP_Y_WEBGL,ge.flipY),Q.pixelStorei(Q.UNPACK_PREMULTIPLY_ALPHA_WEBGL,ge.premultiplyAlpha),Q.pixelStorei(Q.UNPACK_ALIGNMENT,ge.unpackAlignment);const ai=Q.getParameter(Q.UNPACK_ROW_LENGTH),Jr=Q.getParameter(Q.UNPACK_IMAGE_HEIGHT),Go=Q.getParameter(Q.UNPACK_SKIP_PIXELS),Tr=Q.getParameter(Q.UNPACK_SKIP_ROWS),rl=Q.getParameter(Q.UNPACK_SKIP_IMAGES);Q.pixelStorei(Q.UNPACK_ROW_LENGTH,Ai.width),Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT,Ai.height),Q.pixelStorei(Q.UNPACK_SKIP_PIXELS,En),Q.pixelStorei(Q.UNPACK_SKIP_ROWS,An),Q.pixelStorei(Q.UNPACK_SKIP_IMAGES,dn);const xi=G.isDataArrayTexture||G.isData3DTexture,Lr=ge.isDataArrayTexture||ge.isData3DTexture;if(G.isDepthTexture){const Dr=Gt.get(G),lr=Gt.get(ge),_r=Gt.get(Dr.__renderTarget),sf=Gt.get(lr.__renderTarget);Mt.bindFramebuffer(Q.READ_FRAMEBUFFER,_r.__webglFramebuffer),Mt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,sf.__webglFramebuffer);for(let Ga=0;Ga<nn;Ga++)xi&&(Q.framebufferTextureLayer(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Gt.get(G).__webglTexture,_e,dn+Ga),Q.framebufferTextureLayer(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Gt.get(ge).__webglTexture,ft,Li+Ga)),Q.blitFramebuffer(En,An,Ot,$t,Qn,si,Ot,$t,Q.DEPTH_BUFFER_BIT,Q.NEAREST);Mt.bindFramebuffer(Q.READ_FRAMEBUFFER,null),Mt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,null)}else if(_e!==0||G.isRenderTargetTexture||Gt.has(G)){const Dr=Gt.get(G),lr=Gt.get(ge);Mt.bindFramebuffer(Q.READ_FRAMEBUFFER,tT),Mt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,nT);for(let _r=0;_r<nn;_r++)xi?Q.framebufferTextureLayer(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Dr.__webglTexture,_e,dn+_r):Q.framebufferTexture2D(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,Dr.__webglTexture,_e),Lr?Q.framebufferTextureLayer(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,lr.__webglTexture,ft,Li+_r):Q.framebufferTexture2D(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,lr.__webglTexture,ft),_e!==0?Q.blitFramebuffer(En,An,Ot,$t,Qn,si,Ot,$t,Q.COLOR_BUFFER_BIT,Q.NEAREST):Lr?Q.copyTexSubImage3D(qi,ft,Qn,si,Li+_r,En,An,Ot,$t):Q.copyTexSubImage2D(qi,ft,Qn,si,En,An,Ot,$t);Mt.bindFramebuffer(Q.READ_FRAMEBUFFER,null),Mt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,null)}else Lr?G.isDataTexture||G.isData3DTexture?Q.texSubImage3D(qi,ft,Qn,si,Li,Ot,$t,nn,ti,fn,Ai.data):ge.isCompressedArrayTexture?Q.compressedTexSubImage3D(qi,ft,Qn,si,Li,Ot,$t,nn,ti,Ai.data):Q.texSubImage3D(qi,ft,Qn,si,Li,Ot,$t,nn,ti,fn,Ai):G.isDataTexture?Q.texSubImage2D(Q.TEXTURE_2D,ft,Qn,si,Ot,$t,ti,fn,Ai.data):G.isCompressedTexture?Q.compressedTexSubImage2D(Q.TEXTURE_2D,ft,Qn,si,Ai.width,Ai.height,ti,Ai.data):Q.texSubImage2D(Q.TEXTURE_2D,ft,Qn,si,Ot,$t,ti,fn,Ai);Q.pixelStorei(Q.UNPACK_ROW_LENGTH,ai),Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT,Jr),Q.pixelStorei(Q.UNPACK_SKIP_PIXELS,Go),Q.pixelStorei(Q.UNPACK_SKIP_ROWS,Tr),Q.pixelStorei(Q.UNPACK_SKIP_IMAGES,rl),ft===0&&ge.generateMipmaps&&Q.generateMipmap(qi),Mt.unbindTexture()},this.copyTextureToTexture3D=function(G,ge,Ce=null,Re=null,_e=0){return G.isTexture!==!0&&(po("WebGLRenderer: copyTextureToTexture3D function signature has changed."),Ce=arguments[0]||null,Re=arguments[1]||null,G=arguments[2],ge=arguments[3],_e=arguments[4]||0),po('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(G,ge,Ce,Re,_e)},this.initRenderTarget=function(G){Gt.get(G).__webglFramebuffer===void 0&&Z.setupRenderTarget(G)},this.initTexture=function(G){G.isCubeTexture?Z.setTextureCube(G,0):G.isData3DTexture?Z.setTexture3D(G,0):G.isDataArrayTexture||G.isCompressedArrayTexture?Z.setTexture2DArray(G,0):Z.setTexture2D(G,0),Mt.unbindTexture()},this.resetState=function(){$=0,j=0,ne=null,Mt.reset(),mi.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return as}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorspace=Xn._getDrawingBufferColorSpace(e),t.unpackColorSpace=Xn._getUnpackColorSpace()}}return L.ACESFilmicToneMapping=ln,L.AddEquation=ee,L.AddOperation=ie,L.AdditiveAnimationBlendMode=Cu,L.AdditiveBlending=U,L.AgXToneMapping=X,L.AlphaFormat=oo,L.AlwaysCompare=Zp,L.AlwaysDepth=pt,L.AlwaysStencilFunc=Ru,L.AmbientLight=Dg,L.AnimationAction=Kg,L.AnimationClip=el,L.AnimationLoader=Wy,L.AnimationMixer=vM,L.AnimationObjectGroup=_M,L.AnimationUtils=Vy,L.ArcCurve=$m,L.ArrayCamera=Gg,L.ArrowHelper=kM,L.AttachedBindMode=ue,L.Audio=Yg,L.AudioAnalyser=oM,L.AudioContext=Bd,L.AudioListener=rM,L.AudioLoader=tM,L.AxesHelper=HM,L.BackSide=I,L.BasicDepthPacking=zp,L.BasicShadowMap=M,L.BatchedMesh=Vm,L.Bone=sd,L.BooleanKeyframeTrack=Ia,L.Box2=wM,L.Box3=sr,L.Box3Helper=zM,L.BoxGeometry=Ea,L.BoxHelper=BM,L.BufferAttribute=hi,L.BufferGeometry=In,L.BufferGeometryLoader=Bg,L.ByteType=Mn,L.Cache=Es,L.Camera=Wl,L.CameraHelper=OM,L.CanvasTexture=hy,L.CapsuleGeometry=ph,L.CatmullRomCurve3=Km,L.CineonToneMapping=gt,L.CircleGeometry=mh,L.ClampToEdgeWrapping=it,L.Clock=Wg,L.Color=Ht,L.ColorKeyframeTrack=Ld,L.ColorManagement=Xn,L.CompressedArrayTexture=cy,L.CompressedCubeTexture=ly,L.CompressedTexture=hh,L.CompressedTextureLoader=Xy,L.ConeGeometry=gh,L.ConstantAlphaFactor=Cn,L.ConstantColorFactor=kt,L.Controls=WM,L.CubeCamera=ym,L.CubeReflectionMapping=Pe,L.CubeRefractionMapping=yt,L.CubeTexture=Lc,L.CubeTextureLoader=qy,L.CubeUVReflectionMapping=je,L.CubicBezierCurve=xd,L.CubicBezierCurve3=jm,L.CubicInterpolant=Sg,L.CullFaceBack=d,L.CullFaceFront=m,L.CullFaceFrontBack=v,L.CullFaceNone=l,L.Curve=Yr,L.CurvePath=eg,L.CustomBlending=se,L.CustomToneMapping=ut,L.CylinderGeometry=Oo,L.Cylindrical=AM,L.Data3DTexture=Nu,L.DataArrayTexture=Al,L.DataTexture=cs,L.DataTextureLoader=Yy,L.DataUtils=Ov,L.DecrementStencilOp=Fx,L.DecrementWrapStencilOp=Bx,L.DefaultLoadingManager=Tg,L.DepthFormat=rs,L.DepthStencilFormat=ps,L.DepthTexture=fd,L.DetachedBindMode=Le,L.DirectionalLight=Lg,L.DirectionalLightHelper=FM,L.DiscreteInterpolant=Eg,L.DodecahedronGeometry=_h,L.DoubleSide=F,L.DstAlphaFactor=Qe,L.DstColorFactor=rt,L.DynamicCopyUsage=Qx,L.DynamicDrawUsage=Yx,L.DynamicReadUsage=Kx,L.EdgesGeometry=tg,L.EllipseCurve=uh,L.EqualCompare=Wp,L.EqualDepth=ye,L.EqualStencilFunc=Hx,L.EquirectangularReflectionMapping=We,L.EquirectangularRefractionMapping=ct,L.Euler=Er,L.EventDispatcher=os,L.ExtrudeGeometry=bh,L.FileLoader=Ts,L.Float16BufferAttribute=Gv,L.Float32BufferAttribute=tn,L.FloatType=_i,L.Fog=ql,L.FogExp2=Xl,L.FramebufferTexture=oy,L.FrontSide=P,L.Frustum=Bc,L.GLBufferAttribute=EM,L.GLSL1=tv,L.GLSL3=Iu,L.GreaterCompare=Xp,L.GreaterDepth=Ue,L.GreaterEqualCompare=Yp,L.GreaterEqualDepth=Ee,L.GreaterEqualStencilFunc=qx,L.GreaterStencilFunc=Wx,L.GridHelper=UM,L.Group=Fo,L.HalfFloatType=fs,L.HemisphereLight=Ag,L.HemisphereLightHelper=DM,L.IcosahedronGeometry=Th,L.ImageBitmapLoader=eM,L.ImageLoader=tl,L.ImageUtils=tm,L.IncrementStencilOp=Nx,L.IncrementWrapStencilOp=Ox,L.InstancedBufferAttribute=Uo,L.InstancedBufferGeometry=Og,L.InstancedInterleavedBuffer=SM,L.InstancedMesh=Bm,L.Int16BufferAttribute=kv,L.Int32BufferAttribute=Hv,L.Int8BufferAttribute=Bv,L.IntType=Wn,L.InterleavedBuffer=Yl,L.InterleavedBufferAttribute=ba,L.Interpolant=Kc,L.InterpolateDiscrete=yc,L.InterpolateLinear=El,L.InterpolateSmooth=bl,L.InvertStencilOp=zx,L.KeepStencilOp=_a,L.KeyframeTrack=Zr,L.LOD=Cm,L.LatheGeometry=Wc,L.Layers=Dl,L.LessCompare=Gp,L.LessDepth=Kt,L.LessEqualCompare=Pu,L.LessEqualDepth=ce,L.LessEqualStencilFunc=Gx,L.LessStencilFunc=kx,L.Light=Qs,L.LightProbe=Fg,L.Line=Js,L.Line3=CM,L.LineBasicMaterial=cr,L.LineCurve=vd,L.LineCurve3=Qm,L.LineDashedMaterial=vg,L.LineLoop=Xm,L.LineSegments=ls,L.LinearFilter=ae,L.LinearInterpolant=Id,L.LinearMipMapLinearFilter=Bt,L.LinearMipMapNearestFilter=Fe,L.LinearMipmapLinearFilter=Xe,L.LinearMipmapNearestFilter=_t,L.LinearSRGBColorSpace=ga,L.LinearToneMapping=bt,L.LinearTransfer=Sc,L.Loader=gr,L.LoaderUtils=Od,L.LoadingManager=Dd,L.LoopOnce=Fp,L.LoopPingPong=Bp,L.LoopRepeat=Op,L.LuminanceAlphaFormat=co,L.LuminanceFormat=Vs,L.MOUSE=n,L.Material=Ji,L.MaterialLoader=Dh,L.MathUtils=xv,L.Matrix2=Gd,L.Matrix3=wn,L.Matrix4=xn,L.MaxEquation=ve,L.Mesh=Ii,L.MeshBasicMaterial=Zs,L.MeshDepthMaterial=wd,L.MeshDistanceMaterial=Cd,L.MeshLambertMaterial=_g,L.MeshMatcapMaterial=xg,L.MeshNormalMaterial=gg,L.MeshPhongMaterial=pg,L.MeshPhysicalMaterial=fg,L.MeshStandardMaterial=Ad,L.MeshToonMaterial=mg,L.MinEquation=le,L.MirroredRepeatWrapping=Ct,L.MixOperation=Qt,L.MultiplyBlending=oe,L.MultiplyOperation=ht,L.NearestFilter=Nt,L.NearestMipMapLinearFilter=Zn,L.NearestMipMapNearestFilter=On,L.NearestMipmapLinearFilter=pn,L.NearestMipmapNearestFilter=Rt,L.NeutralToneMapping=B,L.NeverCompare=Hp,L.NeverDepth=Ge,L.NeverStencilFunc=Vx,L.NoBlending=W,L.NoColorSpace=ms,L.NoToneMapping=Dt,L.NormalAnimationBlendMode=Tl,L.NormalBlending=Y,L.NotEqualCompare=qp,L.NotEqualDepth=ot,L.NotEqualStencilFunc=Xx,L.NumberKeyframeTrack=Jc,L.Object3D=Kn,L.ObjectLoader=jy,L.ObjectSpaceNormalMap=kp,L.OctahedronGeometry=Zc,L.OneFactor=q,L.OneMinusConstantAlphaFactor=ei,L.OneMinusConstantColorFactor=an,L.OneMinusDstAlphaFactor=Ze,L.OneMinusDstColorFactor=Oe,L.OneMinusSrcAlphaFactor=Je,L.OneMinusSrcColorFactor=Ne,L.OrthographicCamera=Lh,L.PCFShadowMap=T,L.PCFSoftShadowMap=A,L.PMREMGenerator=jd,L.Path=Gc,L.PerspectiveCamera=Xi,L.Plane=Ks,L.PlaneGeometry=zo,L.PlaneHelper=VM,L.PointLight=Ig,L.PointLightHelper=IM,L.Points=Ym,L.PointsMaterial=ud,L.PolarGridHelper=NM,L.PolyhedronGeometry=js,L.PositionalAudio=aM,L.PropertyBinding=Jn,L.PropertyMixer=$g,L.QuadraticBezierCurve=yd,L.QuadraticBezierCurve3=Md,L.Quaternion=dr,L.QuaternionKeyframeTrack=jc,L.QuaternionLinearInterpolant=bg,L.RED_GREEN_RGTC2_Format=Ml,L.RED_RGTC1_Format=kr,L.REVISION=u,L.RGBADepthPacking=Vp,L.RGBAFormat=zi,L.RGBAIntegerFormat=fe,L.RGBA_ASTC_10x10_Format=oi,L.RGBA_ASTC_10x5_Format=Vr,L.RGBA_ASTC_10x6_Format=Vi,L.RGBA_ASTC_10x8_Format=ss,L.RGBA_ASTC_12x10_Format=Gi,L.RGBA_ASTC_12x12_Format=Wi,L.RGBA_ASTC_4x4_Format=kn,L.RGBA_ASTC_5x4_Format=gi,L.RGBA_ASTC_5x5_Format=fi,L.RGBA_ASTC_6x5_Format=zn,L.RGBA_ASTC_6x6_Format=hn,L.RGBA_ASTC_8x5_Format=Si,L.RGBA_ASTC_8x6_Format=Hn,L.RGBA_ASTC_8x8_Format=Yi,L.RGBA_BPTC_Format=Ci,L.RGBA_ETC2_EAC_Format=Bn,L.RGBA_PVRTC_2BPPV1_Format=mn,L.RGBA_PVRTC_4BPPV1_Format=qt,L.RGBA_S3TC_DXT1_Format=Te,L.RGBA_S3TC_DXT3_Format=me,L.RGBA_S3TC_DXT5_Format=lt,L.RGBDepthPacking=Ix,L.RGBFormat=zs,L.RGBIntegerFormat=k,L.RGB_BPTC_SIGNED_Format=Ui,L.RGB_BPTC_UNSIGNED_Format=ks,L.RGB_ETC1_Format=gn,L.RGB_ETC2_Format=on,L.RGB_PVRTC_2BPPV1_Format=zt,L.RGB_PVRTC_4BPPV1_Format=At,L.RGB_S3TC_DXT1_Format=be,L.RGDepthPacking=Lx,L.RGFormat=vc,L.RGIntegerFormat=ho,L.RawShaderMaterial=dg,L.Ray=yo,L.Raycaster=bM,L.RectAreaLight=Ug,L.RedFormat=lo,L.RedIntegerFormat=fa,L.ReinhardToneMapping=Tt,L.RenderTarget=nm,L.RepeatWrapping=ze,L.ReplaceStencilOp=Ux,L.ReverseSubtractEquation=de,L.RingGeometry=Ah,L.SIGNED_RED_GREEN_RGTC2_Format=Sl,L.SIGNED_RED_RGTC1_Format=yl,L.SRGBColorSpace=ur,L.SRGBTransfer=ci,L.Scene=Sm,L.ShaderChunk=Ln,L.ShaderLib=$r,L.ShaderMaterial=qr,L.ShadowMaterial=ug,L.Shape=Ca,L.ShapeGeometry=wh,L.ShapePath=GM,L.ShapeUtils=hs,L.ShortType=pi,L.Skeleton=Ql,L.SkeletonHelper=PM,L.SkinnedMesh=Um,L.Source=va,L.Sphere=$i,L.SphereGeometry=$c,L.Spherical=TM,L.SphericalHarmonics3=Ng,L.SplineCurve=Sd,L.SpotLight=Rg,L.SpotLightHelper=RM,L.Sprite=Am,L.SpriteMaterial=td,L.SrcAlphaFactor=Ie,L.SrcAlphaSaturateFactor=wt,L.SrcColorFactor=he,L.StaticCopyUsage=jx,L.StaticDrawUsage=Ec,L.StaticReadUsage=$x,L.StereoCamera=nM,L.StreamCopyUsage=ev,L.StreamDrawUsage=Zx,L.StreamReadUsage=Jx,L.StringKeyframeTrack=La,L.SubtractEquation=xe,L.SubtractiveBlending=R,L.TOUCH=s,L.TangentSpaceNormalMap=Hs,L.TetrahedronGeometry=Ch,L.Texture=Ei,L.TextureLoader=Zy,L.TextureUtils=$M,L.TorusGeometry=Rh,L.TorusKnotGeometry=Ph,L.Triangle=fr,L.TriangleFanDrawMode=Px,L.TriangleStripDrawMode=Rx,L.TrianglesDrawMode=Cx,L.TubeGeometry=Ih,L.UVMapping=we,L.Uint16BufferAttribute=Ju,L.Uint32BufferAttribute=ju,L.Uint8BufferAttribute=zv,L.Uint8ClampedBufferAttribute=Vv,L.Uniform=kd,L.UniformsGroup=MM,L.UniformsLib=Pt,L.UniformsUtils=_m,L.UnsignedByteType=St,L.UnsignedInt248Type=zr,L.UnsignedInt5999Type=ao,L.UnsignedIntType=wi,L.UnsignedShort4444Type=da,L.UnsignedShort5551Type=Pr,L.UnsignedShortType=vi,L.VSMShadowMap=C,L.Vector2=et,L.Vector3=J,L.Vector4=$n,L.VectorKeyframeTrack=Qc,L.VideoTexture=ay,L.WebGL3DRenderTarget=wv,L.WebGLArrayRenderTarget=Av,L.WebGLCoordinateSystem=as,L.WebGLCubeRenderTarget=Mm,L.WebGLMultipleRenderTargets=KM,L.WebGLRenderTarget=Hr,L.WebGLRenderer=J1,L.WebGLUtils=F_,L.WebGPUCoordinateSystem=bc,L.WireframeGeometry=cg,L.WrapAroundEnding=Mc,L.ZeroCurvatureEnding=pa,L.ZeroFactor=K,L.ZeroSlopeEnding=ma,L.ZeroStencilOp=Dx,L.createCanvasElement=Jp,L}var RP=dl.exports,Y0;function PP(){return Y0||(Y0=1,function(u,n){(function(s,l){l(n,CP())})(RP,function(s,l){function d(ce,ye){var Ee=Object.keys(ce);if(Object.getOwnPropertySymbols){var Ue=Object.getOwnPropertySymbols(ce);ye&&(Ue=Ue.filter(function(ot){return Object.getOwnPropertyDescriptor(ce,ot).enumerable})),Ee.push.apply(Ee,Ue)}return Ee}function m(ce){for(var ye=1;ye<arguments.length;ye++){var Ee=arguments[ye]!=null?arguments[ye]:{};ye%2?d(Object(Ee),!0).forEach(function(Ue){A(ce,Ue,Ee[Ue])}):Object.getOwnPropertyDescriptors?Object.defineProperties(ce,Object.getOwnPropertyDescriptors(Ee)):d(Object(Ee)).forEach(function(Ue){Object.defineProperty(ce,Ue,Object.getOwnPropertyDescriptor(Ee,Ue))})}return ce}function v(ce,ye){if(!(ce instanceof ye))throw new TypeError("Cannot call a class as a function")}function M(ce,ye){for(var Ee=0;Ee<ye.length;Ee++){var Ue=ye[Ee];Ue.enumerable=Ue.enumerable||!1,Ue.configurable=!0,"value"in Ue&&(Ue.writable=!0),Object.defineProperty(ce,Y(Ue.key),Ue)}}function T(ce,ye,Ee){return ye&&M(ce.prototype,ye),Object.defineProperty(ce,"prototype",{writable:!1}),ce}function A(ce,ye,Ee){return(ye=Y(ye))in ce?Object.defineProperty(ce,ye,{value:Ee,enumerable:!0,configurable:!0,writable:!0}):ce[ye]=Ee,ce}function C(ce,ye){if(typeof ye!="function"&&ye!==null)throw new TypeError("Super expression must either be null or a function");ce.prototype=Object.create(ye&&ye.prototype,{constructor:{value:ce,writable:!0,configurable:!0}}),Object.defineProperty(ce,"prototype",{writable:!1}),ye&&I(ce,ye)}function P(ce){return P=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(ye){return ye.__proto__||Object.getPrototypeOf(ye)},P(ce)}function I(ce,ye){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(Ee,Ue){return Ee.__proto__=Ue,Ee},I(ce,ye)}function F(ce,ye){if(ye&&(typeof ye=="object"||typeof ye=="function"))return ye;if(ye!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return function(Ee){if(Ee===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return Ee}(ce)}function W(ce){var ye=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}();return function(){var Ee,Ue=P(ce);if(ye){var ot=P(this).constructor;Ee=Reflect.construct(Ue,arguments,ot)}else Ee=Ue.apply(this,arguments);return F(this,Ee)}}function Y(ce){var ye=function(Ee,Ue){if(typeof Ee!="object"||Ee===null)return Ee;var ot=Ee[Symbol.toPrimitive];if(ot!==void 0){var ht=ot.call(Ee,Ue||"default");if(typeof ht!="object")return ht;throw new TypeError("@@toPrimitive must return a primitive value.")}return(Ue==="string"?String:Number)(Ee)}(ce,"string");return typeof ye=="symbol"?ye:String(ye)}var U={exports:{}};(function(ce){var ye=/\n/,Ee=`
`,Ue=/\s/;function ot(ie,Dt,bt,Tt){var gt=ie.indexOf(Dt,bt);return gt===-1||gt>Tt?Tt:gt}function ht(ie){return Ue.test(ie)}function Qt(ie,Dt,bt,Tt){return{start:Dt,end:Dt+Math.min(Tt,bt-Dt)}}ce.exports=function(ie,Dt){return ce.exports.lines(ie,Dt).map(function(bt){return ie.substring(bt.start,bt.end)}).join(`
`)},ce.exports.lines=function(ie,Dt){if((Dt=Dt||{}).width===0&&Dt.mode!=="nowrap")return[];ie=ie||"";var bt=typeof Dt.width=="number"?Dt.width:Number.MAX_VALUE,Tt=Math.max(0,Dt.start||0),gt=typeof Dt.end=="number"?Dt.end:ie.length,ln=Dt.mode,ut=Dt.measure||Qt;return ln==="pre"?function(X,B,ue,Le,we){for(var Pe=[],yt=ue,We=ue;We<Le&&We<B.length;We++){var ct=B.charAt(We),je=ye.test(ct);if(je||We===Le-1){var ze=X(B,yt,je?We:We+1,we);Pe.push(ze),yt=We+1}}return Pe}(ut,ie,Tt,gt,bt):function(X,B,ue,Le,we,Pe){var yt=[],We=we;for(Pe==="nowrap"&&(We=Number.MAX_VALUE);ue<Le&&ue<B.length;){for(var ct=ot(B,Ee,ue,Le);ue<ct&&ht(B.charAt(ue));)ue++;var je=X(B,ue,ct,We),ze=ue+(je.end-je.start),it=ze+Ee.length;if(ze<ct){for(;ze>ue&&!ht(B.charAt(ze));)ze--;if(ze===ue)it>ue+Ee.length&&it--,ze=it;else for(it=ze;ze>ue&&ht(B.charAt(ze-Ee.length));)ze--}if(ze>=ue){var Ct=X(B,ue,ze,We);yt.push(Ct)}ue=it}return yt}(ut,ie,Tt,gt,bt,ln)}})(U);var R=U.exports,oe=["x","e","a","o","n","s","r","c","u","m","v","w","z"],se=["m","w"],ee=["H","I","N","E","F","K","L","T","U","V","W","X","Y","Z"],xe=9,de=32,le=function(){function ce(){var ye=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};v(this,ce),this.glyphs=[],this._measure=this.computeMetrics.bind(this),this.update(ye)}return T(ce,[{key:"width",get:function(){return this._width}},{key:"height",get:function(){return this._height}},{key:"descender",get:function(){return this._descender}},{key:"ascender",get:function(){return this._ascender}},{key:"xHeight",get:function(){return this._xHeight}},{key:"baseline",get:function(){return this._baseline}},{key:"capHeight",get:function(){return this._capHeight}},{key:"lineHeight",get:function(){return this._lineHeight}},{key:"linesTotal",get:function(){return this._linesTotal}},{key:"lettersTotal",get:function(){return this._lettersTotal}},{key:"wordsTotal",get:function(){return this._wordsTotal}},{key:"update",value:function(ye){var Ee=this;if(ye=Object.assign({measure:this._measure},ye),this._options=ye,this._options.tabSize=he(this._options.tabSize,4),!ye.font)throw new Error("must provide a valid bitmap font");var Ue=this.glyphs,ot=ye.text||"",ht=ye.font;this._setupSpaceGlyphs(ht);var Qt=R.lines(ot,ye),ie=ye.width||0,Dt=ot.split(" ").filter(function(We){return We!==`
`}).length,bt=ot.split("").filter(function(We){return We!==`
`&&We!==" "}).length;Ue.length=0;var Tt=Qt.reduce(function(We,ct){return Math.max(We,ct.width,ie)},0),gt=0,ln=0,ut=he(ye.lineHeight,ht.common.lineHeight),X=ht.common.base,B=ut-X,ue=ye.letterSpacing||0,Le=ut*Qt.length-B,we=function(We){return We==="center"?1:We==="right"?2:0}(this._options.align);ln-=Le,this._width=Tt,this._height=Le,this._descender=ut-X,this._baseline=X,this._xHeight=function(We){for(var ct=0;ct<oe.length;ct++){var je=oe[ct].charCodeAt(0),ze=q(We.chars,je);if(ze>=0)return We.chars[ze].height}return 0}(ht),this._capHeight=function(We){for(var ct=0;ct<ee.length;ct++){var je=ee[ct].charCodeAt(0),ze=q(We.chars,je);if(ze>=0)return We.chars[ze].height}return 0}(ht),this._lineHeight=ut,this._ascender=ut-B-this._xHeight;var Pe=0,yt=0;Qt.forEach(function(We,ct){for(var je,ze=We.start,it=We.end,Ct=We.width,Nt=ot.slice(ze,it).split(" ").filter(function(Xe){return Xe!==""}).length,Rt=ot.slice(ze,it).split(" ").join("").length,On=0,pn=0,Zn=ze;Zn<it;Zn++){var ae=ot.charCodeAt(Zn),_t=Ee.getGlyph(ht,ae);if(_t){je&&(gt+=K(ht,je.id,_t.id));var Fe=gt;we===1?Fe+=(Tt-Ct)/2:we===2&&(Fe+=Tt-Ct),Ue.push({position:[Fe,ln],data:_t,index:Zn,linesTotal:Qt.length,lineIndex:ct,lineLettersTotal:Rt,lineLetterIndex:On,lineWordsTotal:Nt,lineWordIndex:pn,wordsTotal:Dt,wordIndex:Pe,lettersTotal:bt,letterIndex:yt}),_t.id===de&&je.id!==de&&(pn++,Pe++),_t.id!==de&&(On++,yt++),gt+=_t.xadvance+ue,je=_t}}ln+=ut,gt=0}),this._lettersTotal=bt,this._wordsTotal=Dt,this._linesTotal=Qt.length}},{key:"getGlyph",value:function(ye,Ee){var Ue=ve(ye,Ee);return Ue||(Ee===xe?this._fallbackTabGlyph:Ee===de?this._fallbackSpaceGlyph:null)}},{key:"computeMetrics",value:function(ye,Ee,Ue,ot){var ht,Qt,ie=this._options.letterSpacing||0,Dt=this._options.font,bt=0,Tt=0,gt=0;if(!Dt.chars||Dt.chars.length===0)return{start:Ee,end:Ee,width:0};Ue=Math.min(ye.length,Ue);for(var ln=Ee;ln<Ue;ln++){var ut=ye.charCodeAt(ln);if(ht=this.getGlyph(Dt,ut)){ht.char=ye[ln],ht.xoffset;var X=(bt+=Qt?K(Dt,Qt.id,ht.id):0)+ht.xadvance+ie,B=bt+ht.width;if(B>=ot||X>=ot)break;bt=X,Tt=B,Qt=ht}gt++}return Qt&&(Tt+=Qt.xoffset),{start:Ee,end:Ee+gt,width:Tt}}},{key:"_setupSpaceGlyphs",value:function(ye){if(this._fallbackSpaceGlyph=null,this._fallbackTabGlyph=null,ye.chars&&ye.chars.length!==0){var Ee=ve(ye,de)||function(ht){for(var Qt=0;Qt<se.length;Qt++){var ie=se[Qt].charCodeAt(0),Dt=q(ht.chars,ie);if(Dt>=0)return ht.chars[Dt]}return 0}(ye)||ye.chars[0],Ue=this._options.tabSize*Ee.xadvance;this._fallbackSpaceGlyph=Ee;var ot=Object.assign({},Ee);this._fallbackTabGlyph=Object.assign(ot,{x:0,y:0,xadvance:Ue,id:xe,xoffset:0,yoffset:0,width:0,height:0})}}}]),ce}();function ve(ce,ye){if(!ce.chars||ce.chars.length===0)return null;var Ee=q(ce.chars,ye);return Ee>=0?ce.chars[Ee]:null}function K(ce,ye,Ee){if(!ce.kernings||ce.kernings.length===0)return 0;for(var Ue=ce.kernings,ot=0;ot<Ue.length;ot++){var ht=Ue[ot];if(ht.first===ye&&ht.second===Ee)return ht.amount}return 0}function q(ce,ye,Ee){for(var Ue=Ee=Ee||0;Ue<ce.length;Ue++)if(ce[Ue].id===ye)return Ue;return-1}function he(ce,ye){return typeof ce=="number"?ce:typeof ye=="number"?ye:0}var Ne={min:[0,0],max:[0,0]};function Ie(ce){var ye=ce.length/2;Ne.min[0]=ce[0],Ne.min[1]=ce[1],Ne.max[0]=ce[0],Ne.max[1]=ce[1];for(var Ee=0;Ee<ye;Ee++){var Ue=ce[2*Ee+0],ot=ce[2*Ee+1];Ne.min[0]=Math.min(Ue,Ne.min[0]),Ne.min[1]=Math.min(ot,Ne.min[1]),Ne.max[0]=Math.max(Ue,Ne.max[0]),Ne.max[1]=Math.max(ot,Ne.max[1])}}var Je={computeBox:function(ce,ye){return Ie(ce),ye.min.set(Ne.min[0],Ne.min[1],0),ye.max.set(Ne.max[0],Ne.max[1],0),ye},computeSphere:function(ce,ye){Ie(ce);var Ee=Ne.min[0],Ue=Ne.min[1],ot=Ne.max[0]-Ee,ht=Ne.max[1]-Ue,Qt=Math.sqrt(ot*ot+ht*ht);ye.center.set(Ee+ot/2,Ue+ht/2,0),ye.radius=Qt/2}},Qe={pages:function(ce){var ye=new Float32Array(4*ce.length*1),Ee=0;return ce.forEach(function(Ue){var ot=Ue.data.page||0;ye[Ee++]=ot,ye[Ee++]=ot,ye[Ee++]=ot,ye[Ee++]=ot}),ye},attributes:function(ce,ye,Ee,Ue,ot){var ht=new Float32Array(4*ce.length*2),Qt=new Float32Array(4*ce.length*2),ie=new Float32Array(4*ce.length*2),Dt=new Float32Array(4*ce.length*2),bt=new Float32Array(4*ce.length*2),Tt=new Float32Array(4*ce.length*2),gt=0,ln=0,ut=0,X=0,B=0,ue=0;return ce.forEach(function(Le){var we=Le.data,Pe=we.x+we.width,yt=we.y+we.height,We=we.x/ye,ct=we.y/Ee,je=Pe/ye,ze=yt/Ee;Ue&&(ct=(Ee-we.y)/Ee,ze=(Ee-yt)/Ee),ht[gt++]=We,ht[gt++]=ct,ht[gt++]=We,ht[gt++]=ze,ht[gt++]=je,ht[gt++]=ze,ht[gt++]=je,ht[gt++]=ct,Qt[X++]=Le.position[0]/ot.width,Qt[X++]=(Le.position[1]+ot.height)/ot.height,Qt[X++]=Le.position[0]/ot.width,Qt[X++]=(Le.position[1]+ot.height+we.height)/ot.height,Qt[X++]=(Le.position[0]+we.width)/ot.width,Qt[X++]=(Le.position[1]+ot.height+we.height)/ot.height,Qt[X++]=(Le.position[0]+we.width)/ot.width,Qt[X++]=(Le.position[1]+ot.height)/ot.height,ie[B++]=0,ie[B++]=1,ie[B++]=0,ie[B++]=0,ie[B++]=1,ie[B++]=0,ie[B++]=1,ie[B++]=1,Dt[ue++]=we.width,Dt[ue++]=we.height,Dt[ue++]=we.width,Dt[ue++]=we.height,Dt[ue++]=we.width,Dt[ue++]=we.height,Dt[ue++]=we.width,Dt[ue++]=we.height;var it=Le.position[0]+we.xoffset,Ct=Le.position[1]+we.yoffset,Nt=we.width,Rt=we.height;bt[ln++]=it,bt[ln++]=Ct,bt[ln++]=it,bt[ln++]=Ct+Rt,bt[ln++]=it+Nt,bt[ln++]=Ct+Rt,bt[ln++]=it+Nt,bt[ln++]=Ct,Tt[ut++]=it+Nt/2,Tt[ut++]=Ct+Rt/2,Tt[ut++]=it+Nt/2,Tt[ut++]=Ct+Rt/2,Tt[ut++]=it+Nt/2,Tt[ut++]=Ct+Rt/2,Tt[ut++]=it+Nt/2,Tt[ut++]=Ct+Rt/2}),{uvs:ht,layoutUvs:Qt,positions:bt,centers:Tt,glyphUvs:ie,glyphResolution:Dt}},infos:function(ce,ye){for(var Ee=new Float32Array(4*ce.length),Ue=new Float32Array(4*ce.length),ot=new Float32Array(4*ce.length),ht=new Float32Array(4*ce.length),Qt=new Float32Array(4*ce.length),ie=new Float32Array(4*ce.length),Dt=new Float32Array(4*ce.length),bt=new Float32Array(4*ce.length),Tt=new Float32Array(4*ce.length),gt=new Float32Array(4*ce.length),ln=0,ut=0,X=0,B=0,ue=0,Le=0,we=0,Pe=0,yt=0,We=0,ct=0;ct<ce.length;ct++){var je=ce[ct];Ee[ln++]=je.linesTotal,Ee[ln++]=je.linesTotal,Ee[ln++]=je.linesTotal,Ee[ln++]=je.linesTotal,Ue[ut++]=je.lineIndex,Ue[ut++]=je.lineIndex,Ue[ut++]=je.lineIndex,Ue[ut++]=je.lineIndex,ot[X++]=je.lineLettersTotal,ot[X++]=je.lineLettersTotal,ot[X++]=je.lineLettersTotal,ot[X++]=je.lineLettersTotal,ht[B++]=je.lineLetterIndex,ht[B++]=je.lineLetterIndex,ht[B++]=je.lineLetterIndex,ht[B++]=je.lineLetterIndex,Qt[ue++]=je.lineWordsTotal,Qt[ue++]=je.lineWordsTotal,Qt[ue++]=je.lineWordsTotal,Qt[ue++]=je.lineWordsTotal,ie[Le++]=je.lineWordIndex,ie[Le++]=je.lineWordIndex,ie[Le++]=je.lineWordIndex,ie[Le++]=je.lineWordIndex,Dt[we++]=je.wordsTotal,Dt[we++]=je.wordsTotal,Dt[we++]=je.wordsTotal,Dt[we++]=je.wordsTotal,bt[Pe++]=je.wordIndex,bt[Pe++]=je.wordIndex,bt[Pe++]=je.wordIndex,bt[Pe++]=je.wordIndex,Tt[yt++]=je.lettersTotal,Tt[yt++]=je.lettersTotal,Tt[yt++]=je.lettersTotal,Tt[yt++]=je.lettersTotal,gt[We++]=je.letterIndex,gt[We++]=je.letterIndex,gt[We++]=je.letterIndex,gt[We++]=je.letterIndex}return{linesTotal:Ee,lineIndex:Ue,lineLettersTotal:ot,lineLetterIndex:ht,lineWordsTotal:Qt,lineWordIndex:ie,wordsTotal:Dt,wordIndex:bt,lettersTotal:Tt,letterIndex:gt}}},Ze=Object.prototype.toString;function rt(ce){return!!ce.constructor&&typeof ce.constructor.isBuffer=="function"&&ce.constructor.isBuffer(ce)}var Oe=function(ce){switch(ce){case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"uint8":return Uint8Array;case"uint16":return Uint16Array;case"uint32":return Uint32Array;case"float32":return Float32Array;case"float64":return Float64Array;case"array":return Array;case"uint8_clamped":return Uint8ClampedArray}},wt=function(ce){return ce.BYTES_PER_ELEMENT&&Ze.call(ce.buffer)==="[object ArrayBuffer]"||Array.isArray(ce)},kt=function(ce){return ce!=null&&(rt(ce)||function(ye){return typeof ye.readFloatLE=="function"&&typeof ye.slice=="function"&&rt(ye.slice(0,0))}(ce)||!!ce._isBuffer)},an=[0,2,3],Cn=[2,1,3],ei=function(ce){C(Ee,ce);var ye=W(Ee);function Ee(Ue){var ot;return v(this,Ee),typeof Ue=="string"&&(Ue={text:Ue}),(ot=ye.call(this))._options=Object.assign({},Ue),ot._layout=null,ot._visibleGlyphs=[],ot.update(ot._options),ot}return T(Ee,[{key:"layout",get:function(){return this._layout}},{key:"visibleGlyphs",get:function(){return this._visibleGlyphs}},{key:"update",value:function(Ue){if(Ue=this._validateOptions(Ue)){this._layout=function(ut){return new le(ut)}(Ue);var ot=Ue.flipY!==!1,ht=Ue.font,Qt=ht.common.scaleW,ie=ht.common.scaleH,Dt=this._layout.glyphs.filter(function(ut){var X=ut.data;return X.width*X.height>0});this._visibleGlyphs=Dt;var bt=Qe.attributes(Dt,Qt,ie,ot,this._layout),Tt=Qe.infos(Dt,this._layout),gt=function(ut,X){ut&&(wt(ut)||kt(ut))||(X=ut||{},ut=null);for(var B=typeof(X=typeof X=="number"?{count:X}:X||{}).type=="string"?X.type:"uint16",ue=typeof X.count=="number"?X.count:1,Le=X.start||0,we=X.clockwise!==!1?an:Cn,Pe=we[0],yt=we[1],We=we[2],ct=6*ue,je=ut||new(Oe(B))(ct),ze=0,it=0;ze<ct;ze+=6,it+=4){var Ct=ze+Le;je[Ct+0]=it+0,je[Ct+1]=it+1,je[Ct+2]=it+2,je[Ct+3]=it+Pe,je[Ct+4]=it+yt,je[Ct+5]=it+We}return je}([],{clockwise:!0,type:"uint16",count:Dt.length});if(this.setIndex(gt),this.setAttribute("position",new l.BufferAttribute(bt.positions,2)),this.setAttribute("center",new l.BufferAttribute(bt.centers,2)),this.setAttribute("uv",new l.BufferAttribute(bt.uvs,2)),this.setAttribute("layoutUv",new l.BufferAttribute(bt.layoutUvs,2)),this.setAttribute("glyphUv",new l.BufferAttribute(bt.glyphUvs,2)),this.setAttribute("glyphResolution",new l.BufferAttribute(bt.glyphResolution,2)),this.setAttribute("lineIndex",new l.BufferAttribute(Tt.lineIndex,1)),this.setAttribute("lineLettersTotal",new l.BufferAttribute(Tt.lineLettersTotal,1)),this.setAttribute("lineLetterIndex",new l.BufferAttribute(Tt.lineLetterIndex,1)),this.setAttribute("lineWordsTotal",new l.BufferAttribute(Tt.lineWordsTotal,1)),this.setAttribute("lineWordIndex",new l.BufferAttribute(Tt.lineWordIndex,1)),this.setAttribute("wordIndex",new l.BufferAttribute(Tt.wordIndex,1)),this.setAttribute("letterIndex",new l.BufferAttribute(Tt.letterIndex,1)),!Ue.multipage&&"page"in this.attributes)this.deleteAttribute("page");else if(Ue.multipage){var ln=Qe.pages(Dt);this.setAttribute("page",new l.BufferAttribute(ln,1))}}}},{key:"computeBoundingSphere",value:function(){this.boundingSphere===null&&(this.boundingSphere=new l.Sphere);var Ue=this.attributes.position.array,ot=this.attributes.position.itemSize;if(!Ue||!ot||Ue.length<2)return this.boundingSphere.radius=0,void this.boundingSphere.center.set(0,0,0);Je.computeSphere(Ue,this.boundingSphere),isNaN(this.boundingSphere.radius)&&console.error('BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}},{key:"computeBoundingBox",value:function(){this.boundingBox===null&&(this.boundingBox=new l.Box3);var Ue=this.boundingBox,ot=this.attributes.position.array,ht=this.attributes.position.itemSize;if(ot&&ht&&!(ot.length<2))return Je.computeBox(ot,Ue);Ue.makeEmpty()}},{key:"_validateOptions",value:function(Ue){if(typeof Ue=="string"&&(Ue={text:Ue}),!(Ue=Object.assign({},this._options,Ue)).font)throw new TypeError("must specify a { font } in options");return Ue}}]),Ee}(l.BufferGeometry),Ge={common:{uOpacity:{value:1},uColor:{value:{r:255,g:255,b:255}},uMap:{value:null}},rendering:{uThreshold:{value:.05},uAlphaTest:{value:.01}},strokes:{uStrokeColor:{value:{r:255,g:0,b:0}},uStrokeOutsetWidth:{value:0},uStrokeInsetWidth:{value:.3}}},pt={side:l.FrontSide,transparent:!0,defines:{IS_SMALL:!1},extensions:{derivatives:!0},uniforms:m(m(m({},Ge.common),Ge.rendering),Ge.strokes),vertexShader:`#define GLSLIFY 1
attribute vec2 layoutUv;attribute float lineIndex;attribute float lineLettersTotal;attribute float lineLetterIndex;attribute float lineWordsTotal;attribute float lineWordIndex;attribute float wordIndex;attribute float letterIndex;varying vec2 vUv;varying vec2 vLayoutUv;varying vec3 vViewPosition;varying vec3 vNormal;varying float vLineIndex;varying float vLineLettersTotal;varying float vLineLetterIndex;varying float vLineWordsTotal;varying float vLineWordIndex;varying float vWordIndex;varying float vLetterIndex;void main(){vec4 mvPosition=vec4(position,1.0);mvPosition=modelViewMatrix*mvPosition;gl_Position=projectionMatrix*mvPosition;vUv=uv;vLayoutUv=layoutUv;vViewPosition=-mvPosition.xyz;vNormal=normal;vLineIndex=lineIndex;vLineLettersTotal=lineLettersTotal;vLineLetterIndex=lineLetterIndex;vLineWordsTotal=lineWordsTotal;vLineWordIndex=lineWordIndex;vWordIndex=wordIndex;vLetterIndex=letterIndex;}`,fragmentShader:`#define GLSLIFY 1
varying vec2 vUv;uniform float uOpacity;uniform float uThreshold;uniform float uAlphaTest;uniform vec3 uColor;uniform sampler2D uMap;uniform vec3 uStrokeColor;uniform float uStrokeOutsetWidth;uniform float uStrokeInsetWidth;float median(float r,float g,float b){return max(min(r,g),min(max(r,g),b));}void main(){vec3 s=texture2D(uMap,vUv).rgb;float sigDist=median(s.r,s.g,s.b)-0.5;float afwidth=1.4142135623730951/2.0;
#ifdef IS_SMALL
float alpha=smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDist);
#else
float alpha=clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);
#endif
float sigDistOutset=sigDist+uStrokeOutsetWidth*0.5;float sigDistInset=sigDist-uStrokeInsetWidth*0.5;
#ifdef IS_SMALL
float outset=smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDistOutset);float inset=1.0-smoothstep(uThreshold-afwidth,uThreshold+afwidth,sigDistInset);
#else
float outset=clamp(sigDistOutset/fwidth(sigDistOutset)+0.5,0.0,1.0);float inset=1.0-clamp(sigDistInset/fwidth(sigDistInset)+0.5,0.0,1.0);
#endif
float border=outset*inset;if(alpha<uAlphaTest)discard;vec4 filledFragColor=vec4(uColor,uOpacity*alpha);gl_FragColor=filledFragColor;}`},Kt=function(ce){C(Ee,ce);var ye=W(Ee);function Ee(){var Ue=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return v(this,Ee),Ue=Object.assign(JSON.parse(JSON.stringify(pt)),Ue),ye.call(this,Ue)}return T(Ee)}(l.ShaderMaterial);s.MSDFTextGeometry=ei,s.MSDFTextMaterial=Kt,s.uniforms=Ge,Object.defineProperty(s,"__esModule",{value:!0})})}(dl,dl.exports)),dl.exports}var Ka=PP();class IP{constructor(){this.renderer=new mP({canvas:document.querySelector("#bg"),antialias:!0,alpha:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.autoClear=!1,this.scene=new p0,this.copyscene=new p0,this.txtgroup=new ca,this.copytxtgroup=new ca,this.planegroup=new ca,this.copyscene.add(this.copytxtgroup),this.textures=[...document.querySelectorAll(".js-texture")],this.textures=this.textures.map(n=>new du().load(n.src)),this.slidetextures=[...document.querySelectorAll(".js-texture2")],this.slidetextures=this.slidetextures.map(n=>new du().load(n.src)),this.pslidetextures=[...document.querySelectorAll(".js-texture3")],this.pslidetextures=this.pslidetextures.map(n=>new du().load(n.src)),this.videotextures=[...document.querySelectorAll(".videos")],this.videotextures=this.videotextures.map(n=>n),this.position=0,this.speed=.1,this.targetSpeed=0,this.addText(),this.addPlane(),this.camera=new Cr(45,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.z=30,this.camera.position.x=-3,this.time=0,this.materials=[],this.meshes=[],this.slideind=0,this.groups=[],this.addmesh(),this.handleImages(),this.addback(),this.addPointlit(),this.render(),this.handleResize=this.handleResize.bind(this),window.addEventListener("resize",this.handleResize)}handleResize(){const n=window.innerWidth/window.innerHeight,s=10;this.camera.left=s*n/-2,this.camera.right=s*n/2,this.camera.top=s/2,this.camera.bottom=s/-2,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}addText(){this.txtmaterial=new Br({side:Fr,transparent:!0,defines:{IS_SMALL:!1},extensions:{derivatives:!0},uniforms:{uSpeed:{value:0},...Ka.uniforms.common,...Ka.uniforms.rendering,...Ka.uniforms.strokes,uOpacity:{value:1},uColor:{value:new Yn("#A9A9A9")},uMap:{value:null},uThreshold:{value:.05},uAlphaTest:{value:.01},uStrokeColor:{value:new Yn("#008060")},uStrokeOutsetWidth:{value:0},uStrokeInsetWidth:{value:.3},ustroke:{value:!1}},vertexShader:X0,fragmentShader:W0}),this.txtmaterial2=new Br({side:Fr,transparent:!0,defines:{IS_SMALL:!1},extensions:{derivatives:!0},uniforms:{uSpeed:{value:0},...Ka.uniforms.common,...Ka.uniforms.rendering,...Ka.uniforms.strokes,uOpacity:{value:1},uColor:{value:new Yn("#C0C0C0")},uMap:{value:null},uThreshold:{value:.05},uAlphaTest:{value:.01},uStrokeColor:{value:new Yn("#FFD700")},uStrokeOutsetWidth:{value:1.8},uStrokeInsetWidth:{value:.5},ustroke:{value:!0}},vertexShader:X0,fragmentShader:W0});const n=["1-SkyRoot-MetaHack.","2-SolutionChallenge.","3-farmhack.","4-IIT-hackopitch.","5-IITMadaras."];Promise.all([s(wP)]).then(([l])=>{n.forEach((d,m)=>{const v=new Ka.MSDFTextGeometry({text:d.toUpperCase(),font:AP});this.txtmaterial.uniforms.uMap.value=l,this.txtmaterial2.uniforms.uMap.value=l;const M=new Rr(v,this.txtmaterial);this.textsize="0.0018",window.innerWidth<500&&(this.textsize="0.0012");const T=89.892;M.scale.set(this.textsize,-this.textsize,this.textsize),M.position.y=-.5*m,M.position.x=-.8,M.position.z=T,this.txtgroup.add(M);const A=new Rr(v,this.txtmaterial2);A.scale.set(this.textsize,-this.textsize,this.textsize),A.position.y=-.5*m,A.position.x=-.8,A.position.z=T,console.log("Textmesh",A),this.copytxtgroup.add(A),this.scene.add(this.txtgroup)})});function s(l){return new Promise((m,v)=>{new du().load(l,m)})}}addPlane(){this.planegeometry=new gc(16/21,9/21,30,30).translate(0,0,1);let n=this.planegeometry.attributes.position.array,s=[],l=1.35;for(let d=0;d<n.length;d+=3){let m=n[d],v=n[d+1],M=n[d+2],T=new ii(m,M).normalize().multiplyScalar(l);s.push(T.x,v,T.y)}this.planegeometry.setAttribute("position",new ua(s,3)),this.planematerial=new Br({vertexShader:xP,fragmentShader:vP,uniforms:{textureSampler:{value:this.textures[0]},glitchIntensity:{value:0}},side:Fr}),this.plane=new Rr(this.planegeometry,this.planematerial),this.plane.position.y=0,this.plane.position.x=0,this.plane.position.z=89.792,this.planegroup.add(this.plane),this.scene.add(this.planegroup)}updateTexture(){let n=Math.round(this.position*-1)%this.textures.length;this.planematerial.uniforms.textureSampler.value=this.textures[n],this.copytxtgroup.children.forEach((s,l)=>{l!==n?s.visible=!1:s.visible=!0})}addmesh(){this.material=new Br({vertexShader:gP,fragmentShader:_P,uniforms:{textureimg:{type:"t",value:null},timeanim:{type:"f",value:this.time},distancefromcent:{type:"f",value:0},waveintensity:{type:"f",value:0},glitchIntensity:{type:"f",value:0}},transparent:!0,side:Fs})}handleImages(){this.videotextures.forEach((n,s)=>{let l=this.material.clone(),d=new MA(n);l.uniforms.textureimg.value=d;let m=new gc(3/3,2/3),v=new Rr(m,l),M=new ca;M.add(v),this.groups.push(M),this.scene.add(M),this.materials.push(l),this.meshes.push(v),v.position.y=s*1.2,M.position.z=54.05,M.position.x=.15,M.rotation.y=-.2,M.rotation.x=-.5,M.rotation.z=-.2,window.innerWidth<500&&(M.scale.set(.8,.8),M.position.x=-.2)})}addback(){this.scene.background=new Yn("#999D9E")}addPointlit(){new RA(16777215).position.set(25,25,25),this.ambientLight=new IA(16777215),this.ambientLight.intensity=3,this.scene.add(this.ambientLight)}render(){this.time++,this.txtgroup.position.y=-this.position,this.speed*=.9,this.targetSpeed+=this.speed-this.targetSpeed,this.txtmaterial.uniforms.uSpeed.value=this.targetSpeed,this.txtmaterial2.uniforms.uSpeed.value=this.targetSpeed,this.txtgroup.position.y=-this.position*.5,this.copytxtgroup.position.y=-this.position*.5,this.plane.rotation.y=this.position*2*Math.PI,this.planegroup.rotation.z=.2*Math.sin(this.position*.5),this.materials&&this.materials.forEach(n=>{n.uniforms.timeanim.value=this.time}),this.videotextures&&this.videotextures.forEach(n=>{n.needsUpdate=!0}),this.renderer.render(this.scene,this.camera),this.renderer.clearDepth(),this.renderer.render(this.copyscene,this.camera),window.requestAnimationFrame(this.render.bind(this))}removeEventListeners(){window.removeEventListener("resize",this.handleResize)}}document.body.style.overflowX="hidden";function LP(){let u=0;const n=document.querySelector(".loader-progress"),s=document.querySelector(".loader-percentage"),l=document.getElementById("preloader"),d=setInterval(()=>{u+=Math.random()*10,u>100&&(u=100),n.style.width=`${u}%`,s.textContent=`${Math.round(u)}%`,u===100&&(clearInterval(d),setTimeout(()=>{l.style.transform="translateY(-100%)",setTimeout(()=>{l.style.display="none",document.getElementById("content").style.display="block"},500)},500))},200)}window.addEventListener("load",LP);gsap.registerPlugin(ScrollTrigger);const bu=new LocomotiveScroll({el:document.querySelector(".smooth-scroll"),smooth:!0,smartphone:{smooth:!0},tablet:{smooth:!0}});bu.on("scroll",u=>{const n=u.scroll.y;for(let s=0;s<$0.length;s++)DP($0[s],n)},ScrollTrigger.update);ScrollTrigger.scrollerProxy(".smooth-scroll",{scrollTop(u){return arguments.length?bu.scrollTo(u,{duration:0,disableLerp:!0}):bu.scroll.instance.scroll.y},getBoundingClientRect(){return{top:0,left:0,width:window.innerWidth,height:window.innerHeight}},pinType:document.querySelector(".smooth-scroll").style.transform?"transform":"fixed"});ScrollTrigger.addEventListener("refresh",()=>bu.update());ScrollTrigger.defaults({scroller:".smooth-scroll"});let nr=new IP;function Z0(u){const n=u*-1;console.log("this is value of t ",n),n<-2234.5&&n>-3880.34?(nr.camera.position.z=56.05,nr.camera.position.x=.2567569580078125,nr.camera.rotation.y=.2567569580078125):n<-4789?(nr.camera.position.z=92.663,nr.camera.position.x=.4877,nr.camera.rotation.y=.2567569580078125,nr.vscrollact=!0,nr.position=(n/1e3+5)%5,nr.speed=n/17e4):(nr.camera.position.z=n*-.019,nr.camera.position.x=n*-1e-4,nr.camera.rotation.y=n*-1e-4)}const $0=[...document.querySelectorAll(".carousel")];function DP(u,n){const s=u.parentElement.offsetTop;console.log("The curent pos in trans ",n);const l=u.querySelector(".mediaScroller");console.log("Windows inner height",window.innerHeight);let d=(n-s)/window.innerHeight*100;if(console.log("curentpercent",d),d=d<0?0:d>400?400:d,l.style.transform=`translate3d(${-d}vw,0,0)`,d>0&&d<110){console.log("I am inside the elem",d);const m=window.innerWidth;let v=nr.videotextures,M=0<d&&d<30?0:30<=d&&d<60?1:60<=d&&d<100?2:(100<=d&&d<120,3);M===0?(v[0].play(),v[1].pause(),v[2].pause()):M===1?(v[0].pause(),v[1].play(),v[2].pause()):M===2?(v[0].pause(),v[1].pause(),v[2].play()):M==3&&(v[0].pause(),v[1].pause(),v[2].pause()),nr.meshes.forEach((T,A)=>{T.position.y=A*1.2-d*.029;let C=Math.min(Math.abs(M-A));if(C=1-C**3,!(m<500)){let P=1+.3*C;T.scale.set(P,P,P)}T.material.uniforms.distancefromcent.value=C,console.log("this is odddistance",C)})}else document.body.onscroll=Z0,Z0(n);nr.updateTexture(),nr.copytxtgroup.children.forEach((m,v)=>{m.material.uniforms.ustroke.value=!0})}
